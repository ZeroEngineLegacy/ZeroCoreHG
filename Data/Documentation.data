[Version:1]
DocumentationLibrary 
{
	var Classes = Array
	{
		Object
		{
			var Name = "Aabb"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Center"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Extents"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HalfExtents"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Max"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Min"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SurfaceArea"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ContainsPoint"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Expand"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "(Aabb, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Expand"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "(Aabb, Aabb)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Aabb"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Overlap"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Aabb)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Aabb"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetInvalid"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ZeroOut"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AcquireNetHostInfo"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when the net peer host is acquiring project-specific host information."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ReturnHostInfo"
					var Type = "EventBundle"
					var Description = "Data."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Action"
			var BaseClass = "ReferenceCountedEventObject"
			var Library = "EngineLibrary"
			var Description = "Base action class."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "The action is queued and not stared or running."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Completed"
					var Type = "Boolean"
					var Description = "The action ran until it completed."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Started"
					var Type = "Boolean"
					var Description = "Has the action started?"
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Cancel"
					var Description = "Cancel the action and all child actions."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ActionDelay"
			var BaseClass = "Action"
			var Library = "EngineLibrary"
			var Description = "Delay action. Delays by time in seconds."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "TimeLeft"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AddNoiseNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Adds random noise (static) to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AdditiveCutoff"
					var Type = "Real"
					var Description = "The cutoff frequency used for the additive noise component, in Hz."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AdditiveGain"
					var Type = "Real"
					var Description = "The gain of the additive noise component, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MultiplicativeCutoff"
					var Type = "Real"
					var Description = "The cutoff frequency used for the multiplicative noise component, in Hz."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MultiplicativeGain"
					var Type = "Real"
					var Description = "The gain of the multiplicative noise component, in decibels."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AdditiveSynthNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Generates audio using additive synthesis."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddHarmonic"
					var Description = "Adds a new harmonic to the additive synth notes. The first value is the multiplier that will be applied to the base frequency, the second is the volume of this harmonic, and the third (the AdsrEnvelope object) contains the envelope-related values."
					var ReturnType = "Void"
					var Parameters = "(Real frequencyMultiplier, Real volume, AdsrEnvelope envelope, SynthWaveType type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frequencyMultiplier"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "envelope"
							var Type = "AdsrEnvelope"
							var Description = ""
						}
						Parameter
						{
							var Name = "type"
							var Type = "SynthWaveType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "NoteOff"
					var Description = "Stops playing all current notes at the specified MIDI value."
					var ReturnType = "Void"
					var Parameters = "(Real midiNote)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "midiNote"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "NoteOn"
					var Description = "Starts playing a new note. The first parameter is the MIDI note value (range is 0 to 127), and the second is the volume modification that should be applied to this note (a value of 1.0 does not change the volume, while 0.0 would be silence)."
					var ReturnType = "Void"
					var Parameters = "(Real midiNote, Real volume)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "midiNote"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAllHarmonics"
					var Description = "Removes all current harmonics. You must add at least one harmonic before playing a note."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StopAllNotes"
					var Description = "Stops playing all current notes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AdsrEnvelope"
			var BaseClass = ""
			var Library = "SoundLibrary"
			var Description = "Used to control harmonics of notes played by the AdditiveSynthNode."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttackTime"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DecayTime"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DelayTime"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReleaseTime"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SustainLevel"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SustainTime"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Animation"
			var BaseClass = "Resource"
			var Library = "EngineLibrary"
			var Description = "The Animation resource class is used to store animations of game objects and their properties."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Duration"
					var Type = "Real"
					var Description = "Duration of the animation in seconds."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AnimationGraph"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "The AnimationGraph component controls animation for an individual game object. It stores all needed per instance (vs what is shared in the animation resource) manages the current time and enumerates the animation sets. The AnimationGraph can animate multiple child objects and properties enabling bone animation, and other hierarchical animations."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Is the animGraph animating?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ActiveNode"
					var Type = "AnimationNode"
					var Description = "The current root animation node."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimeScale"
					var Type = "Real"
					var Description = "A scalar to the entire animation graph."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateBasicNode"
					var Description = "Node creation functions."
					var ReturnType = "BasicAnimation"
					var Parameters = "(Animation animation, AnimationPlayMode mode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "mode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateChainNode"
					var Description = ""
					var ReturnType = "ChainNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateCrossBlendNode"
					var Description = ""
					var ReturnType = "CrossBlend"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateDirectBlendNode"
					var Description = ""
					var ReturnType = "DirectBlend"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateSelectiveNode"
					var Description = ""
					var ReturnType = "SelectiveNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsPlayingInGraph"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Animation animation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PreviewGraph"
					var Description = "Editor preview functionality."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PrintGraph"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AnimationGraphEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Animation"
					var Type = "Animation"
					var Description = "Only set when the animation node has a single animation."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Node"
					var Type = "AnimationNode"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PlayMode"
					var Type = "AnimationPlayMode"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AnimationNode"
			var BaseClass = "ReferenceCountedEventObject"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CollapseToPoseOnFinish"
					var Type = "Boolean"
					var Description = "Whether or not to collapse to a pose node when finished playing."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Duration"
					var Type = "Real"
					var Description = "The duration of the node."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Whether or not the node is currently paused."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Time"
					var Type = "Real"
					var Description = "The current time in the node."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimeScale"
					var Type = "Real"
					var Description = "A scalar to dt when updating the node."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CollapseToPose"
					var Description = "Collapses all children to a pose node on the next Update."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetNormalizedTime"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsActive"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PrintNode"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer tabs)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "tabs"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetNormalizedTime"
					var Description = "A value between [0-1]."
					var ReturnType = "Void"
					var Parameters = "(Real normalizedTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normalizedTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AnyHandle"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AnyType"
			var BaseClass = "Type"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Archetype"
			var BaseClass = "Resource"
			var Library = "EngineLibrary"
			var Description = "An archetype is a resource containing the serialized data definition of an object. The archetype stores a binary cache of the serialization data and the source file for debugging and for archetype updating."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Area"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BottomCenter"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "BottomLeft"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "BottomRight"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Center"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CenterLeft"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CenterRight"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Origin"
					var Type = "Location"
					var Description = "Location of the Origin of the Area."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Size"
					var Type = "Real2"
					var Description = "Size of the Area."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TopCenter"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TopLeft"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TopRight"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "LocalOffsetOf"
					var Description = "Offset of the given location in local space."
					var ReturnType = "Real2"
					var Parameters = "(Location location)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "location"
							var Type = "Location"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ArrayRange[T]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ArrayRange[T]"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Byte"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Reset"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Reset"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Array[T]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ArrayRange[T]"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Capacity"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LastIndex"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Copy"
					var Description = ""
					var ReturnType = "Array[T]"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Copy"
					var Description = ""
					var ReturnType = "Array[T]"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindFirstIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindFirstIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Byte"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "any"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Insert"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Insert"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Pop"
					var Description = ""
					var ReturnType = "any"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Pop"
					var Description = ""
					var ReturnType = "Byte"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Push"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Push"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Range"
					var Description = ""
					var ReturnType = "ArrayRange[T]"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Range"
					var Description = ""
					var ReturnType = "ArrayRange[T]"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAll"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAll"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAt"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAt"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveFirst"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveFirst"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveSwap"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveSwap"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Reserve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Reserve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Resize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Resize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Resize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Resize"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Sort"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(delegate(left:any,right:any):Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "delegate(left:any,right:any):Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Sort"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(delegate(left:any,right:any):Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "delegate(left:any,right:any):Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Sort"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(delegate(left:Byte,right:Byte):Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "delegate(left:Byte,right:Byte):Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Sort"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(delegate(left:Byte,right:Byte):Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "delegate(left:Byte,right:Byte):Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AsciiEncoding"
			var BaseClass = "IEncoding"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Audio"
			var BaseClass = "ContentComposition"
			var Library = "SoundLibrary"
			var Description = "Audio content is raw wave data and is compressed into various formats."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "PeakOutputLevel"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "RMSOutputLevel"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "SystemVolume"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddNoiseNode"
					var Description = ""
					var ReturnType = "AddNoiseNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AdditiveSynthNode"
					var Description = ""
					var ReturnType = "AdditiveSynthNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "BandPassNode"
					var Description = ""
					var ReturnType = "BandPassNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ChorusNode"
					var Description = ""
					var ReturnType = "ChorusNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CompressorNode"
					var Description = ""
					var ReturnType = "CompressorNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CustomAudioNode"
					var Description = ""
					var ReturnType = "CustomAudioNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "DelayNode"
					var Description = ""
					var ReturnType = "DelayNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "EqualizerNode"
					var Description = ""
					var ReturnType = "EqualizerNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ExpanderNode"
					var Description = ""
					var ReturnType = "ExpanderNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FlangerNode"
					var Description = ""
					var ReturnType = "FlangerNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GeneratedWaveNode"
					var Description = ""
					var ReturnType = "GeneratedWaveNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetNodeGraphInfo"
					var Description = ""
					var ReturnType = "NodeInfoListRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "HighPassNode"
					var Description = ""
					var ReturnType = "HighPassNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "LowPassNode"
					var Description = ""
					var ReturnType = "LowPassNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ModulationNode"
					var Description = ""
					var ReturnType = "ModulationNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "PanningNode"
					var Description = ""
					var ReturnType = "PanningNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "PitchNode"
					var Description = ""
					var ReturnType = "PitchNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RecordingNode"
					var Description = ""
					var ReturnType = "RecordingNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReverbNode"
					var Description = ""
					var ReturnType = "ReverbNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SetUseHighLatency"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SoundBuffer"
					var Description = ""
					var ReturnType = "SoundBuffer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "VolumeNode"
					var Description = ""
					var ReturnType = "VolumeNode"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "AudioSettings"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LatencySetting"
					var Type = "AudioLatency"
					var Description = "If you are having audio problems (lots of clicks and/or static) you can try changing this setting to High."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinVolumeThreshold"
					var Type = "Real"
					var Description = "Sets the volume threshold at which sounds will be virtualized (they will continue tracking their position and all data but will not process audio). This is a floating point volume number, not decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MixType"
					var Type = "AudioMixTypes"
					var Description = "Sets the number of channels the audio system uses when creating audio. If set to AutoDetect (the default setting), it will match the number of channels in its mix to the number of channels in the operating system's default output device. You can override this by selecting Mono (single channel of audio), Stereo (one channel for a left speaker, one channel for a right speaker), Quad (two left speakers and two right speakers), FiveOne (a typical 5.1 speaker configuration), or SevenOne (a typical 7.1 speaker configuration). If your selection is different from the output device, it will be automatically translated to match the number of channels needed for output."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SystemVolume"
					var Type = "Real"
					var Description = "An overall volume modifier that is applied to all audio produced by Zero."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BandPassNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a band pass filter to audio generated by its input SoundNodes (removes low and high frequencies)"
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CentralFrequency"
					var Type = "Real"
					var Description = "The center frequency of the band. Frequencies above and below this band will be attenuated."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QualityFactor"
					var Type = "Real"
					var Description = "The Q number of the band pass filter: higher numbers make the band smaller, while smaller numbers make it wider. The default value is 0.669."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BaseCastFilter"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "Used to filter objects during cast operations."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "IgnoreChildren"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreDynamic"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreGhost"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreKinematic"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreStatic"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BaseCollisionEvent"
			var BaseClass = "Event"
			var Library = "PhysicsLibrary"
			var Description = "Common interface for all collision events. Contains shared methods to access contact information for a collision."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ContactPointCount"
					var Type = "Integer"
					var Description = "The number of contact points in this collision."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ContactPoints"
					var Type = "ContactPointRange"
					var Description = "A range for iterating through all contact points."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsGhost"
					var Type = "Boolean"
					var Description = "If this was a ghost collision (detected but not resolved)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = "The object that this event was sent to."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OtherObject"
					var Type = "Cog"
					var Description = "The other object in this collision."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BaseSprite"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Common interface for 2D Sprite based graphicals."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GeometryMode"
					var Type = "SpriteGeometryMode"
					var Description = "How the Sprite should be oriented in 3D space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VertexColor"
					var Type = "Real4"
					var Description = "Color attribute of the generated vertices accessible in the vertex shader."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BasicDirectionEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Common interface for all directional force effects. Used to group together all common logic/variables for the force/gravity variants."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "Real3"
					var Description = "The direction that the effect will be applied in (may be in local or world space depending on the LocalSpaceDirection property)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalSpaceDirection"
					var Type = "Boolean"
					var Description = "Determines if the direction that the effect is applied is in local or world space. This vector is normalized when calculating forces."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Strength"
					var Type = "Real"
					var Description = "The magnitude of the force to apply."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldDirection"
					var Type = "Real3"
					var Description = "The world direction of the effect. If the effect is not in local space then this is the same as Direction."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BasicPointEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Common interface for all point effects. Used to attract or repel objects towards a central point. The strength of the effect is calculated as an interpolation between two strength values at two radial distances."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EndCondition"
					var Type = "PhysicsEffectEndCondition"
					var Description = "How the interpolation should be handled after max distance. ClampToMax will clamp to StrengthAtMax. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InterpolationType"
					var Type = "PhysicsEffectInterpolationType"
					var Description = "The type of interpolation used (e.g. Linear, Quadratic) for the effect."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPositionOffset"
					var Type = "Real3"
					var Description = "The offset from the transform position (in local space) that the point effect will be applied at."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxDistance"
					var Type = "Real"
					var Description = "The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinDistance"
					var Type = "Real"
					var Description = "The first distance at which attenuation will start. If an object is under the min distance, StrengthAtMin will be used. If an object is in between min and max, then it will attenuate."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StrengthAtMax"
					var Type = "Real"
					var Description = "The strength that this effect applies at the max distance."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StrengthAtMin"
					var Type = "Real"
					var Description = "The strength that this effect applies at the min distance."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BitStream"
			var BaseClass = ""
			var Library = "NetworkingLibrary"
			var Description = "Bit-packed data stream."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CanReadBoolean"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadDoubleInteger"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(DoubleInteger, DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadDoubleReal"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadDoubleRealQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(DoubleReal, DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadDoubleRealQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger2"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger2Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer2, Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger2Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger3"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger3Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer3, Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger3Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger4"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger4Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer4, Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadInteger4Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadIntegerQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadIntegerQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadQuaternion"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal2"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal2Half"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal2Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal2Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal3"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal3Half"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal3Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal3Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal4"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal4Half"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal4Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadReal4Quantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadRealHalf"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadRealQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadRealQuantized"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CanReadString"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clears all data written and resets the bitstream, optionally freeing reserved memory."
					var ReturnType = "Void"
					var Parameters = "(Boolean freeMemory)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "freeMemory"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearBitsRead"
					var Description = "Clears the number of bits read."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearBitsWritten"
					var Description = "Clears the number of bits written."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBitCapacity"
					var Description = "Returns the data array capacity in bits."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBitsRead"
					var Description = "Returns the number of bits read."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBitsUnread"
					var Description = "Returns the number of bits unread."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBitsUnwritten"
					var Description = "Returns the number of bits unwritten."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBitsWritten"
					var Description = "Returns the number of bits written."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByteCapacity"
					var Description = "Returns the data array capacity in bytes."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBytesRead"
					var Description = "Returns the number of bytes read (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBytesUnread"
					var Description = "Returns the number of bytes unread (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBytesUnwritten"
					var Description = "Returns the number of bytes unwritten (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetBytesWritten"
					var Description = "Returns the number of bytes written (Rounded up, ex. 12 bits = 2 bytes)"
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsEmpty"
					var Description = "Returns true if the BitStream is empty (0 bits written), else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "MeasureBoolean"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureDoubleInteger"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(DoubleInteger, DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureDoubleReal"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureDoubleRealQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(DoubleReal, DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureDoubleRealQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger2"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger2Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer2, Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger2Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger3"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger3Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger3Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer3, Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger4"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger4Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer4, Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureInteger4Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureIntegerQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureIntegerQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureQuaternion"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal2"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal2Half"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal2Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal2Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal3"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal3Half"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal3Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal3Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal4"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal4Half"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal4Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureReal4Quantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureRealHalf"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureRealQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureRealQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureString"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MeasureString"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReadBoolean"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadDoubleInteger"
					var Description = ""
					var ReturnType = "DoubleInteger"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "DoubleInteger"
					var Parameters = "(DoubleInteger, DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "DoubleInteger"
					var Parameters = "(DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadDoubleReal"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadDoubleRealQuantized"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "(DoubleReal, DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadDoubleRealQuantized"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "(DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger2"
					var Description = ""
					var ReturnType = "Integer2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger2Quantized"
					var Description = ""
					var ReturnType = "Integer2"
					var Parameters = "(Integer2, Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger2Quantized"
					var Description = ""
					var ReturnType = "Integer2"
					var Parameters = "(Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger3"
					var Description = ""
					var ReturnType = "Integer3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger3Quantized"
					var Description = ""
					var ReturnType = "Integer3"
					var Parameters = "(Integer3, Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger3Quantized"
					var Description = ""
					var ReturnType = "Integer3"
					var Parameters = "(Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger4"
					var Description = ""
					var ReturnType = "Integer4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger4Quantized"
					var Description = ""
					var ReturnType = "Integer4"
					var Parameters = "(Integer4, Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadInteger4Quantized"
					var Description = ""
					var ReturnType = "Integer4"
					var Parameters = "(Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadIntegerQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadIntegerQuantized"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadQuaternion"
					var Description = ""
					var ReturnType = "Quaternion"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal2"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal2Half"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal2Quantized"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal2Quantized"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal3"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal3Half"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal3Quantized"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal3Quantized"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal4"
					var Description = ""
					var ReturnType = "Real4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal4Half"
					var Description = ""
					var ReturnType = "Real4"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal4Quantized"
					var Description = ""
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadReal4Quantized"
					var Description = ""
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadRealHalf"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadRealQuantized"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadRealQuantized"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadString"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Reserve"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetBitsRead"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetBitsWritten"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetBytesRead"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetBytesWritten"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Unread"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteBoolean"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteDoubleInteger"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(DoubleInteger, DoubleInteger, DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteDoubleIntegerQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(DoubleInteger, DoubleInteger, DoubleInteger)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteDoubleReal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteDoubleRealQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(DoubleReal, DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteDoubleRealQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(DoubleReal, DoubleReal, DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger2"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger2Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer2, Integer2, Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger2Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer2, Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger3"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger3Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer3, Integer3, Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger3Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer3, Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger4"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger4Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer4, Integer4, Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteInteger4Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer4, Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteIntegerQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteIntegerQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteQuaternion"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal2"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal2Half"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal2Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal2Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real2, Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal3"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal3Half"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal3Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal3Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3, Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal4"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal4Half"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal4Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteReal4Quantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real4, Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteRealHalf"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteRealQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real, Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteRealQuantized"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteString"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Bone"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Used by Skeleton to identify child objects whos transforms can be used for mesh skinning."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean2"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Boolean2"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean2"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Boolean2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean2x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean2x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean2x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Boolean3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Boolean3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean3"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Boolean3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean3x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean3x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean3x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M23"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WAxis"
					var Type = "Boolean4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Boolean4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Boolean4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Boolean4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Boolean4"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Boolean4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean4x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean4x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M32"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Boolean4x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M23"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M32"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M33"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Boolean4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BoundType"
			var BaseClass = "Type"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BaseType"
					var Type = "BoundType"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "DefaultConstructor"
					var Type = "Function"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Destructor"
					var Type = "Function"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Fields"
					var Type = "FieldRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Functions"
					var Type = "FunctionRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "GetterSetters"
					var Type = "GetterSetterRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNative"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsTypeOrBaseNative"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Members"
					var Type = "MemberRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PreConstructor"
					var Type = "Function"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Properties"
					var Type = "PropertyRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TemplateBaseName"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetConstructor"
					var Description = ""
					var ReturnType = "Function"
					var Parameters = "(DelegateType, Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DelegateType"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetField"
					var Description = ""
					var ReturnType = "Field"
					var Parameters = "(String, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetField"
					var Description = ""
					var ReturnType = "Field"
					var Parameters = "(String, Type, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Type"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetField"
					var Description = ""
					var ReturnType = "Field"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetFunction"
					var Description = ""
					var ReturnType = "Function"
					var Parameters = "(String, DelegateType, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DelegateType"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetFunction"
					var Description = ""
					var ReturnType = "Function"
					var Parameters = "(String, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetFunction"
					var Description = ""
					var ReturnType = "Function"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetGetterSetter"
					var Description = ""
					var ReturnType = "GetterSetter"
					var Parameters = "(String, Type, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Type"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetGetterSetter"
					var Description = ""
					var ReturnType = "GetterSetter"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetGetterSetter"
					var Description = ""
					var ReturnType = "GetterSetter"
					var Parameters = "(String, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetMember"
					var Description = ""
					var ReturnType = "Member"
					var Parameters = "(String, Type, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Type"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetMember"
					var Description = ""
					var ReturnType = "Member"
					var Parameters = "(String, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetMember"
					var Description = ""
					var ReturnType = "Member"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetProperty"
					var Description = ""
					var ReturnType = "Property"
					var Parameters = "(String, Type, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Type"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetProperty"
					var Description = ""
					var ReturnType = "Property"
					var Parameters = "(String, Members)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Members"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetProperty"
					var Description = ""
					var ReturnType = "Property"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InstantiatePreConstructedObject"
					var Description = ""
					var ReturnType = "any"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BoxCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines the collision volume of a box defined by a size on each axis."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "HalfSize"
					var Type = "Real3"
					var Description = "The half size (from the center to the upper-right corner) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Size"
					var Type = "Real3"
					var Description = "The size (from min to max) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldSize"
					var Type = "Real3"
					var Description = "The size of the box after the transform is applied (scale and rotation)."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BoxParticleEmitter"
			var BaseClass = "ParticleEmitterShared"
			var Library = "GraphicsLibrary"
			var Description = "Emits particles inside a box."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BuildEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "BuoyancyEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a buoyancy force to an object in a given direction."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DebugDrawRuntime"
					var Type = "Boolean"
					var Description = "Draw the points used to compute the buoyancy during run-time. This helps in debugging, but should be left off during normal run."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Density"
					var Type = "Real"
					var Description = "The density of the fluid."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Detail"
					var Type = "Integer"
					var Description = "The amount of points to subdivide each object into for sampling (total points is Detail^3)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Gravity"
					var Type = "Real3"
					var Description = "The direction of gravity in world-space."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Byte"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Camera"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Represents a viewpoint for rendering."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CameraViewportCog"
					var Type = "Cog"
					var Description = "The object that has a CameraViewport component using this Camera, if any."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "FarPlane"
					var Type = "Real"
					var Description = "The far clipping plane, always positive and in the view direction."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FieldOfView"
					var Type = "Real"
					var Description = "The vertical field of view of the Camera, in degrees. Horizontal fov derived from aspect ratio (Hor+)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NearPlane"
					var Type = "Real"
					var Description = "The near clipping plane, always positive and in the view direction."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PerspectiveMode"
					var Type = "PerspectiveMode"
					var Description = "How the scene is projected on to the view plane."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Size"
					var Type = "Real"
					var Description = "Size (width and height) of the orthographic projection, in world units."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldDirection"
					var Type = "Real3"
					var Description = "Direction the Camera is facing, in world space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldTranslation"
					var Type = "Real3"
					var Description = "Translation of the Camera, in world space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldUp"
					var Type = "Real3"
					var Description = "The upright direction of the Camera(perpendicular to facing direction), in world space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CameraViewport"
			var BaseClass = "Component"
			var Library = "GameplayLibrary"
			var Description = "Manages all setup between Camera, Renderer, and viewport UI that is required to define how anything is to be rendered."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CameraPath"
					var Type = "CogPath"
					var Description = "Object with the Camera component to be used for rendering. A Camera can only be used by one CameraViewport, if already used by another usage will be stolen when assigned."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FinalTexture"
					var Type = "Texture"
					var Description = "Texture that contains the end result of this CameraViewport's rendering. Must be explicitly written to in renderer script."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ForwardViewportEvents"
					var Type = "Boolean"
					var Description = "Forwards mouse events to viewports underneath this viewport."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MarginColor"
					var Type = "Real4"
					var Description = "Color to used for letterbox/scaling margins."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MouseWorldRay"
					var Type = "Ray"
					var Description = "Get the world ray starting from the mouse."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NormalizedOffset"
					var Type = "Real2"
					var Description = "Offset of the viewport in normalized UI coordinates."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NormalizedSize"
					var Type = "Real2"
					var Description = "Size of viewport in normalized UI coordinates."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RenderInEditor"
					var Type = "Boolean"
					var Description = "If rendering will be ran in edit mode."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RenderInGame"
					var Type = "Boolean"
					var Description = "If rendering will be ran in play game mode."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RenderOrder"
					var Type = "Integer"
					var Description = "The order that rendering should be done reletive to other CameraViewports, lowest to highest."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RenderToViewport"
					var Type = "Boolean"
					var Description = "If the rendering result in FinalTexture should also be placed on the UI viewport."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RendererPath"
					var Type = "CogPath"
					var Description = "Object with renderer script that connects to RenderTasksUpdate that determines what rendering will be done."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ResolutionOrAspect"
					var Type = "Real2"
					var Description = "Target resolution, or the aspect ratio when used with specific viewport scaling modes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewToPerspective"
					var Type = "Real4x4"
					var Description = "Transformation that defines how the view frustum is mapped to normalized coordinates, pre W divide."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ViewportHasFocus"
					var Type = "Boolean"
					var Description = "If the viewport created by this CameraViewport, if rendering to one, has focus."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ViewportOffset"
					var Type = "Real2"
					var Description = "The current offset of the viewport, in pixels."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ViewportOffsetWithMargin"
					var Type = "Real2"
					var Description = "The current offset of the viewport's margin, in pixels."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ViewportResolution"
					var Type = "Real2"
					var Description = "The current resolution of the viewport."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ViewportResolutionWithMargin"
					var Type = "Real2"
					var Description = "The current resolution of the viewport including margin."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ViewportScaling"
					var Type = "ViewportScaling"
					var Description = "Method to use for sizing the viewport."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldToPerspective"
					var Type = "Real4x4"
					var Description = "Concatenation of the WorldToView and ViewToPerspective transformations."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldToView"
					var Type = "Real4x4"
					var Description = "Transformation that defines view space as the Camera at the origin and the view direction as -Z."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ScreenToViewport"
					var Description = "Convert a screen point to a point reletive to the viewport."
					var ReturnType = "Real2"
					var Parameters = "(Real2 screenPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ScreenToWorldPlane"
					var Description = "Convert the screen point to a position on a given plane."
					var ReturnType = "Real3"
					var Parameters = "(Real2 screenPoint, Real3 worldPlaneNormal, Real3 worldPlanePosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPlaneNormal"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPlanePosition"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ScreenToWorldRay"
					var Description = "Convert a screen point to a ray."
					var ReturnType = "Ray"
					var Parameters = "(Real2 screenPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ScreenToWorldViewPlane"
					var Description = "Convert the screen point to a position on the view plane at a given depth."
					var ReturnType = "Real3"
					var Parameters = "(Real2 screenPoint, Real viewDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = "viewDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ScreenToWorldZPlane"
					var Description = "Convert the screen point to a position on the z plane at a given depth."
					var ReturnType = "Real3"
					var Parameters = "(Real2 screenPoint, Real worldDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "screenPoint"
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ViewPlaneSize"
					var Description = "Size of the screen at a Depth."
					var ReturnType = "Real2"
					var Parameters = "(Real viewDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ViewportTakeFocus"
					var Description = "Returns whether or not it succeeded in taking focus. Will always fail if RenderToViewport is false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ViewportToScreen"
					var Description = "Convert a viewport point to a screen point."
					var ReturnType = "Real2"
					var Parameters = "(Real2 viewportPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewportPoint"
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WorldToScreen"
					var Description = "Convert a world point to a screen point."
					var ReturnType = "Real2"
					var Parameters = "(Real3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CapsuleCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines the collision volume for a capsule defined by a height and radius. A capsule can be thought of as a cylinder with spherical end caps."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "AxisDirection"
					var Description = "The direction that the height is defined along. Allows the user to change whether the capsule's height is along the local-space x, y, or z axis."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Height"
					var Type = "Real"
					var Description = "The local space distance from the center of one sphere to another."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The local space radius of the spheres at the capsule edges."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ScalingMode"
					var Type = "CapsuleScalingMode"
					var Description = "How should non-uniform scale affect the capsules size. Should a scale of 2 on the height axis double the total capsule size or should it double the capsule height?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldCylinderHeight"
					var Type = "Real"
					var Description = "The full height of the capsule's cylinder after the scale is applied (world distance from one sphere to another)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldRadius"
					var Type = "Real"
					var Description = "The radius of the sphere caps after scale is applied."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CarWheelArray"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = "An array interface to the cog paths of wheels that this car uses. This array is read-only."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = "How many wheels this car owns."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = "Get the cog for a wheel by index."
					var ReturnType = "Cog"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CastFilter"
			var BaseClass = "BaseCastFilter"
			var Library = "PhysicsLibrary"
			var Description = "Filter for casting operations in physics. Allows basic filtering such as static or dynamic objects, advanced filters such as collision groups, and custom filters via an event callback."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CallbackEventName"
					var Type = "String"
					var Description = "The name of the event to invoke on the callback object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CallbackObject"
					var Type = "Object"
					var Description = "An object to invoke a callback on (via the callback name) to see if an object in a cast should be skipped."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CollisionGroup"
					var Type = "CollisionGroup"
					var Description = "Should this cast behave like it belongs to a collision group? Uses the current space's CollisionTable for filtering logic."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreCog"
					var Type = "Cog"
					var Description = "A cog to ignore during casts."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CastFilterEvent"
			var BaseClass = "Event"
			var Library = "PhysicsLibrary"
			var Description = "Allows a user to filter out an object during any cast in physics."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FilterState"
					var Type = "CastFilterState"
					var Description = "When filtering should we accept or reject this cog? Alternatively we can let the default cast filter logic run."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = "The object being tested in this cast."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CastResult"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "A result from a cast operation on a PhysicsSpace."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Collider"
					var Type = "Collider"
					var Description = "The collider hit by the cast."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Distance"
					var Type = "Real"
					var Description = "The distance from the ray/segment start to the point of intersection. Invalid on a volume cast."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Normal"
					var Type = "Real3"
					var Description = "The normal of the object at the intersection point (world space). Invalid on a volume cast."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ObjectHit"
					var Type = "Cog"
					var Description = "The cog hit by the cast."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldPosition"
					var Type = "Real3"
					var Description = "Returns the world-space position that the object was hit. Invalid on a volume cast."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetLocalPosition"
					var Description = "Returns the local-space position that the object was hit. The point index is used to get the first or last point of intersection. Invalid on volume casts."
					var ReturnType = "Real3"
					var Parameters = "(Integer pointIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pointIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ChorusNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a chorus filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FeedbackPercent"
					var Type = "Real"
					var Description = "The percentage of output which is fed back into the filter as input."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxDelayMillisec"
					var Type = "Real"
					var Description = "The maximum delay reached by the modulation. It will oscillate between the MinDelayMillisec value and this value at the frequency set by the ModulationFrequency property."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinDelayMillisec"
					var Type = "Real"
					var Description = "The minimum delay reached by the modulation. It will oscillate between the this value and the MaxDelayMillisec value at the frequency set by the ModulationFrequency property."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ModulationFrequency"
					var Type = "Real"
					var Description = "The frequency of the oscillator which varies the modulation."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OffsetMillisec"
					var Type = "Real"
					var Description = "The offset value of the chorus filter, in milliseconds."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Cog"
			var BaseClass = "Object"
			var Library = "EngineLibrary"
			var Description = "Game Object Composition class. This class is the foundational object for all dynamic objects in the game world. The Cog is a piece of logical interactive content and the primary mechanism game systems (Graphics, Physics, Etc.) provide functionality and communicate. A Cog can be anything from physical objects like trees, tanks, players to to logical objects like teams, triggers, or AI objects."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Actions"
					var Type = "Actions"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Archetype"
					var Type = "Archetype"
					var Description = "Getter / setter for Archetype."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "BaseArchetype"
					var Type = "Archetype"
					var Description = "Returns the Archetype our Archetype inherits from."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "BaseArchetypeName"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Children"
					var Type = "HierarchyListRange"
					var Description = "Returns a range of all direct children on this Cog."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ComponentCount"
					var Type = "Integer"
					var Description = "Returns how many Components are on this Cog."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "EditorViewportHidden"
					var Type = "Boolean"
					var Description = "Hidden from view used for editor."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Get the GameSession that owns us and our Space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LevelSettings"
					var Type = "Cog"
					var Description = "Get the object named 'LevelSettings', a special convenience object where we can put general functionality for our Level."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Locked"
					var Type = "Boolean"
					var Description = "Not able to be modified or selected in the viewport."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MarkedForDestruction"
					var Type = "Boolean"
					var Description = "Has this Cog already been destroyed and is waiting for the frame to end (delayed destruction). This allows us to do custom logic when an object is still not null, but about to be destroyed (e.g. we don't want to render Cogs marked for deletion)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = "Name of the Object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectViewHidden"
					var Type = "Boolean"
					var Description = "If the object needs to not show up in the object view."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Parent"
					var Type = "Cog"
					var Description = "Get the parent of this object in the Hierarchy."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Persistent"
					var Type = "Boolean"
					var Description = "Object will not be destroyed on level load or change."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RuntimeId"
					var Type = "Integer"
					var Description = "Gets a unique integer for this object (used primarily for debugging)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "Returns the Space that this object lives in."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Transient"
					var Type = "Boolean"
					var Description = "Object will not be saved."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddComponentByName"
					var Description = "Add a component by name."
					var ReturnType = "Boolean"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Could not add Component"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "AddComponentByType"
					var Description = "Add a component of the given type."
					var ReturnType = "Boolean"
					var Parameters = "(BoundType componentType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentType"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid component addition"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "AttachTo"
					var Description = "Attach to a parent object."
					var ReturnType = "Void"
					var Parameters = "(Cog parent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "parent"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid attachment"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "AttachToRelative"
					var Description = "Attach to a parent object and compute the new transform so that the objects are relative."
					var ReturnType = "Void"
					var Parameters = "(Cog parent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "parent"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearArchetype"
					var Description = "Removes our association with the current Archetype."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clone"
					var Description = "Clones this cog. The cloned object will be parented to this objects parent (if it exists)."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Calls DebugDraw on all components in this cog."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Destroy"
					var Description = "Queues the cog up for delayed destruction (at the end of the frame). If the object is marked as Protected, this will do nothing."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Detach"
					var Description = "Detach from a parent object."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DetachRelative"
					var Description = "Detach from a parent object and compute the new transform so that the objects are relative."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchDown"
					var Description = "Dispatches an event down the tree on all children recursively (pre-order traversal)"
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchEvent"
					var Description = "Dispatches an event on this object."
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchUp"
					var Description = "Dispatches an event up the tree on each parent recursively (pre-order traversal)"
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindAllChildrenByName"
					var Description = "Returns a range of all children with the given name."
					var ReturnType = "HierarchyNameRange"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindChildByName"
					var Description = "Find a child object with the given name."
					var ReturnType = "Cog"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindNearestArchetype"
					var Description = "Same as FindNearestParentArchetype except that it includes this Cog."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindNextInOrder"
					var Description = "Finds the next Cog in depth first post-order."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindNextSibling"
					var Description = "Returns the sibling Cog after this in the parents child list. Returns null if it's the last child. If the Cog doesn't have a parent, it will return the Cog after it in the Space."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindPreviousInOrder"
					var Description = "Finds the previous Cog in reverse depth first post-order (the opposite of FindNextInOrder)."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindPreviousSibling"
					var Description = "Returns the sibling Cog before this in the parents child list. Returns null if it's the first child. If the Cog doesn't have a parent, it will return the Cog before it in the Space."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindRoot"
					var Description = "Searches up the hierarchy for the root Cog."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindRootArchetype"
					var Description = "Finds the top most Archetype in the Hierarchy."
					var ReturnType = "Cog"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetComponentByIndex"
					var Description = "Returns the Component at the given index."
					var ReturnType = "Component"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cog"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "GetComponentByName"
					var Description = "Finds the Components with the given type name."
					var ReturnType = "Component"
					var Parameters = "(String componentTypeName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentTypeName"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetComponentIndex"
					var Description = "Finds the index of the given Component type. Returns uint max if the Component didn't exist."
					var ReturnType = "Integer"
					var Parameters = "(BoundType componentType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentType"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsDescendant"
					var Description = "Returns whether or not the given cog is a descendant of us."
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsModifiedFromArchetype"
					var Description = "Returns whether or not we have any local modifications from our Archetype. This does not account for properties with LocalModificationOverride (such as Transform modifications)."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlaceAfterSibling"
					var Description = "Moves this Cog after the given sibling. Assumes they have the same parent."
					var ReturnType = "Void"
					var Parameters = "(Cog sibling)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sibling"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cannot move object"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "PlaceBeforeSibling"
					var Description = "Moves this Cog before the given sibling. Assumes they have the same parent."
					var ReturnType = "Void"
					var Parameters = "(Cog sibling)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sibling"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cannot move object"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveComponentByName"
					var Description = "Remove a component by name. Returns true if the component existed."
					var ReturnType = "Boolean"
					var Parameters = "(String typeName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "typeName"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Could not remove Component"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveComponentByType"
					var Description = "Remove a component by type. Returns true if the component existed."
					var ReturnType = "Boolean"
					var Parameters = "(BoundType componentType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "componentType"
							var Type = "BoundType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Could not remove Component"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "ReplaceChild"
					var Description = "Places the new child at the same place as the old child in the Hierarchy. This detaches but does not destroy the old child."
					var ReturnType = "Void"
					var Parameters = "(Cog oldChild, Cog newChild)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "oldChild"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "newChild"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cannot replace child"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "UploadToArchetype"
					var Description = "Upload this objects data to the archetype and marks this object as not modified. This function does not rebuild all other Cogs with the same Archetype. See ArchetypeRebuilder for more information about how to rebuild Archetypes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CogInitializerEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CogInitializer"
					var Type = "CogInitializer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CogPath"
			var BaseClass = "Object"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Cog"
					var Type = "Cog"
					var Description = "Setting the cog manually may recompute the path if the option is set Getting the cog will attempt to resolve the cog if we don't already have one (or if the path options is set, it will always resolve)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DirectCog"
					var Type = "Cog"
					var Description = "Setting the cog manually may recompute the path if the option is set Getting the cog will return whatever cog we already resolved, or null (it will not attempt to resolve)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ErrorOnDirectLinkFail"
					var Type = "Boolean"
					var Description = "Is it an exception/notification if a direct link to the object cannot be resolved?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ErrorOnPathCantCompute"
					var Type = "Boolean"
					var Description = "Is it an exception/notification if the path to an object cannot be computed?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ErrorOnResolveToNull"
					var Type = "Boolean"
					var Description = "Is an exception thrown if you try to access the Cog when it's invalid or not found?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Path"
					var Type = "String"
					var Description = "Setting the path will invalidate the object until the next call to GetCog."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PathPreference0"
					var Type = "CogPathPreference"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PathPreference1"
					var Type = "CogPathPreference"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PathPreference2"
					var Type = "CogPathPreference"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RelativeTo"
					var Type = "Cog"
					var Description = "The cog that we compute paths relative to."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UpdateCogOnInitialize"
					var Type = "Boolean"
					var Description = "Whether the cog path attempts to resolve an object when the object is fully initialized."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UpdateCogOnPathChange"
					var Type = "Boolean"
					var Description = "When we set the cog path, should we try and resolve the object (this also detects parse errors)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UpdatePathOnCogChange"
					var Type = "Boolean"
					var Description = "When we set the cog, should we try and recompute a path to the object?"
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = "Creates a new copy of a cog path (since cog paths are reference counted and shared)"
					var ReturnType = "CogPath"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ComputePath"
					var Description = "Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string."
					var ReturnType = "String"
					var Parameters = "(Cog from, Cog to, CogPathPreference pref)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "from"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "to"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "pref"
							var Type = "CogPathPreference"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Refresh"
					var Description = "Returns true if the object changes, false otherwise."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cog Path"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RefreshIfNull"
					var Description = "Returns true if the object changes, false otherwise."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Resolve"
					var Description = "Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert."
					var ReturnType = "Cog"
					var Parameters = "(Cog startFrom, String path)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "startFrom"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "path"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Collider"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A collider controls how collision detection is performed for an object. A collider also gives mass properties to a RigidBody(via the material and volume). If there is no RigidBody associated with this collider then it is considered static. Note: colliders without RigidBodies should not be moved at run-time!"
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ActiveBody"
					var Type = "RigidBody"
					var Description = "The rigid body that \"owns\" this collider. This is the body that forces/impulses/etc... should be applied to."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CollisionGroup"
					var Type = "CollisionGroup"
					var Description = "The collision group is a tag used to alter collision behavior based upon the space's CollisionTable."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ContactCount"
					var Type = "Integer"
					var Description = "The current number of contacts/collisions with this collider."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Contacts"
					var Type = "ContactRange"
					var Description = "A range of all contacts for this collider."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Ghost"
					var Type = "Boolean"
					var Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointCount"
					var Type = "Integer"
					var Description = "The number of joints attached to this collider."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Joints"
					var Type = "JointRange"
					var Description = "A range of all joints attached to this collider."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Material"
					var Type = "PhysicsMaterial"
					var Description = "The material used to determine the density, restitution, and friction of this collider."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Offset"
					var Type = "Real3"
					var Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SendsEvents"
					var Type = "Boolean"
					var Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldAabb"
					var Type = "Aabb"
					var Description = "Returns the world-space axis aligned bounding box (Aabb) of this collider."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldBoundingSphere"
					var Type = "Sphere"
					var Description = "Returns the world-space bounding sphere of this collider."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ComputeVolume"
					var Description = "Compute the world-space volume of this collider."
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetPointVelocity"
					var Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero."
					var ReturnType = "Real3"
					var Parameters = "(Real3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionEndBlock"
			var BaseClass = "CollisionFilterBlock"
			var Library = "PhysicsLibrary"
			var Description = "CollisionFilterBlock for CollisionEnded events."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionEvent"
			var BaseClass = "BaseCollisionEvent"
			var Library = "PhysicsLibrary"
			var Description = "Information about a collision in physics. Sent when collisions start, persist, or end."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FirstPoint"
					var Type = "ContactPoint"
					var Description = "Convenience function to return the first ContactPoint. Some logic only cares about one point of information. In a more general case all points should be iterated over."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionFilter"
			var BaseClass = "SafeId32EventObject"
			var Library = "PhysicsLibrary"
			var Description = "A filter for storing the relationship between a pair of groups. Stores flags for the kind of filter this is, as well as what events to send out and to whom."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CollisionFlag"
					var Type = "CollisionFilterCollisionFlags"
					var Description = "The collision state between the two types. Controls whether the types skip detection, skip resolution, or resolve as normal."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CollisionGroupA"
					var Type = "CollisionGroup"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CollisionGroupB"
					var Type = "CollisionGroup"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionFilterBlock"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = "Used to specify which collision group events should be sent out for a CollisionFilter. Allows customizing who gets events (in the filter pair) and what event name is sent out."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BlockType"
					var Type = "CollisionFilterBlockType"
					var Description = "What type of collision filter block is this?"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "EventOverride"
					var Type = "String"
					var Description = "What event name to send out when this block triggers. If left empty the default name will be used (e.g. GroupCollisionStarted)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SendEventsToA"
					var Type = "Boolean"
					var Description = "Does the first object in the filter get this event type sent to it?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SendEventsToB"
					var Type = "Boolean"
					var Description = "Does the second object in the filter get this event type sent to it?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SendEventsToSpace"
					var Type = "Boolean"
					var Description = "Does the active space of the objects get this event type sent to it?"
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionGroup"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "Represents a label for a Collider to be used with a CollisionTable."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Creates a CollisionGroup for run-time modifications."
					var ReturnType = "CollisionGroup"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates a clone of this CollisionGroup for run-time modifications."
					var ReturnType = "CollisionGroup"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionGroupEvent"
			var BaseClass = "BaseCollisionEvent"
			var Library = "PhysicsLibrary"
			var Description = "An event sent out when specified by a CollisionFilter in a CollisionTable. Used to hook up events based upon certain CollisionGroup types colliding."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FirstPoint"
					var Type = "ContactPoint"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TypeAName"
					var Type = "String"
					var Description = "Returns the CollisionGroup name of object A."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TypeBName"
					var Type = "String"
					var Description = "Returns the CollisionGroup name of object B."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionPersistedBlock"
			var BaseClass = "CollisionFilterBlock"
			var Library = "PhysicsLibrary"
			var Description = "CollisionFilterBlock for CollisionPersisted events."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionStartBlock"
			var BaseClass = "CollisionFilterBlock"
			var Library = "PhysicsLibrary"
			var Description = "CollisionFilterBlock for CollisionStarted events."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CollisionTable"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "Defines filter pairs between CollisionGroups. These filters are used to control if collision detection and resolution happens between Colliders. Additionally, CollisionFilterBlocks can be defined on filters to send out extra events."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Creates a CollisionTable for run-time modifications."
					var ReturnType = "CollisionTable"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FindFilter"
					var Description = "Finds the filter between the pair of collision groups."
					var ReturnType = "CollisionFilter"
					var Parameters = "(CollisionGroup groupA, CollisionGroup groupB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "groupA"
							var Type = "CollisionGroup"
							var Description = ""
						}
						Parameter
						{
							var Name = "groupB"
							var Type = "CollisionGroup"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates a clone of this CollisionTable for run-time modifications."
					var ReturnType = "CollisionTable"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CommandEvent"
			var BaseClass = "ObjectEvent"
			var Library = "WidgetLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "Gives context to where the command was executed."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Component"
			var BaseClass = "Object"
			var Library = "EngineLibrary"
			var Description = "A component is an atomic piece of functionality that is composed into a Cog to form game objects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Get the GameSession that owns us and our space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LevelSettings"
					var Type = "Cog"
					var Description = "Get the object named 'LevelSettings', a special object where we can put components for our level."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Owner"
					var Type = "Cog"
					var Description = "Get the Cog this Component is owned by (not the parent of this composition)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "The Space where the object is located."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DebugDraw"
					var Description = "Base debug draw for a component. Special for the each type of component."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CompressorNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttackMillisec"
					var Type = "Real"
					var Description = "The time for the compressor to ramp to full effect after the input reaches the threshold."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InputGainDecibels"
					var Type = "Real"
					var Description = "The volume adjustment applied to the audio input, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "KneeWidth"
					var Type = "Real"
					var Description = "The knee width of the compressor, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OutputGainDecibels"
					var Type = "Real"
					var Description = "The volume adjustment applied to the compressor output, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Ratio"
					var Type = "Real"
					var Description = "The ratio of the volume reduction applied by the compressor."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReleaseMillisec"
					var Type = "Real"
					var Description = "The time for the compressor to ramp from full effect to off after the input drops below the threshold."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ThresholdDecibels"
					var Type = "Real"
					var Description = "The threshold, in decibels, at which the volume of the input is affected by the compressor."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Console"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DumpValue"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "DumpValue"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReadBoolean"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReadInteger"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReadReal"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReadString"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ConsoleEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ConstraintConfigBlock"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = "A block of information for solving a joint (or constraint) type. This is used to configure how one joint is solved independently of another joint."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AngularBaumgarte"
					var Type = "Real"
					var Description = "The exponential constant for correcting angular error with a penalty impulse."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AngularErrorCorrection"
					var Type = "Real"
					var Description = "The max amount of error that can be corrected by the angular portion of any constraint in one frame (only for PostStabilization)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LinearBaumgarte"
					var Type = "Real"
					var Description = "The exponential constant for correcting linear error with a penalty impulse."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LinearErrorCorrection"
					var Type = "Real"
					var Description = "The max amount of error that can be corrected by the linear portion of any constraint in one frame (only for PostStabilization)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PositionCorrectionType"
					var Type = "ConstraintPositionCorrection"
					var Description = "What method should be used to fix errors in joints."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Slop"
					var Type = "Real"
					var Description = "The amount of error allowed before position correction takes effect."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ContactGraphEdge"
			var BaseClass = "BaseConstraintGraphEdge< Physics::Contact, Physics::ContactEdge >"
			var Library = "PhysicsLibrary"
			var Description = "A bi-directional graph edge between a collider and a contact. Exposes some internals to Contact which currently can't be exposed."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ContactPointCount"
					var Type = "Integer"
					var Description = "How many points of contact were in this collision."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ContactPoints"
					var Type = "ContactPointRange"
					var Description = "Returns a range of all contact points in the collision."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "FirstPoint"
					var Type = "ContactPoint"
					var Description = "Convenience function to return the first ContactPoint. Some logic only cares about one point of information. In a more general case all points should be iterated over."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsGhost"
					var Type = "Boolean"
					var Description = "Was this a ghost collision?"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OtherObject"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ContactPoint"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "Information about one point of contact in a collision. This is useful for evaluating info about the collision after it happened such as where the objects hit. WARNING: Do not hold onto this after an event is sent out."
			var Tags = Array
			{
				"Physics"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ComplexImpulse"
					var Type = "Real3"
					var Description = "The total impulse this object applied (only for more complicated logic). The impulse is a Vector3 of the values (normal, friction1, friction2)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "FrictionImpulse"
					var Type = "Real"
					var Description = "The total friction impulse that this object applied."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LocalPoint"
					var Type = "Real3"
					var Description = "The point in local space of myself in this collision."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NormalImpulse"
					var Type = "Real"
					var Description = "The total impulse that this object applied in the direction of the normal."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OtherLocalPoint"
					var Type = "Real3"
					var Description = "The point in local space of the other object in this collision."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Penetration"
					var Type = "Real"
					var Description = "The penetration of this contact point in the direction of the normal. Note: penetration is always positive and is not flipped for object A or object B."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RelativeVelocity"
					var Type = "Real"
					var Description = "The relative velocity of this point in the direction of the normal. The relative point velocity is defined as Dot(p1 - p0, n) where p1 and p0 are the velocities of the contact points in the collision of myself and the other object respectively. This value can be used to see how fast the objects are now separating. Also, in pre-collision this value can be used to approximate the impulse of the collision since the impulse values will not have been calculated yet in pre-collision."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldNormalTowardsOther"
					var Type = "Real3"
					var Description = "The world space normal that points from myself towards the other object."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldPoint"
					var Type = "Real3"
					var Description = "The point in world space of this contact point."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ConvexMesh"
			var BaseClass = "GenericPhysicsMesh"
			var Library = "PhysicsLibrary"
			var Description = "A convex mesh meant for use with dynamic rigid bodies. Computes efficient contact information compared to a regular physics mesh. This mesh also defines a volume which means mass properties can be computed."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Creates a ConvexMesh for run-time modifications."
					var ReturnType = "ConvexMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates a clone of this mesh for run-time modifications."
					var ReturnType = "ConvexMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ConvexMeshCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines the collision volume for a convex mesh ( ConvexMesh resource). This collider has a volume and hence is able to work with a RigidBody."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ConvexMesh"
					var Type = "ConvexMesh"
					var Description = "The convex mesh resource that defines the collision volume of this collider."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CustomAudioNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Uses a SoundBuffer to send audio data directly to the audio engine."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Channels"
					var Type = "Integer"
					var Description = "The number of audio channels that will be in the buffer."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinimumBufferSize"
					var Type = "Integer"
					var Description = "The minimum number of samples that should be sent when a NeedMoreSamples event is received."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SystemSampleRate"
					var Type = "Integer"
					var Description = "The sample rate currently being used by the audio system."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "SendBuffer"
					var Description = "Sends a buffer of audio samples to the audio system for output."
					var ReturnType = "Void"
					var Parameters = "(SoundBuffer buffer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "SoundBuffer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SendPartialBuffer"
					var Description = "Sends a partial buffer of audio samples to the audio system for output."
					var ReturnType = "Void"
					var Parameters = "(SoundBuffer buffer, Integer startAtIndex, Integer howManySamples)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "buffer"
							var Type = "SoundBuffer"
							var Description = ""
						}
						Parameter
						{
							var Name = "startAtIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "howManySamples"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CustomCollisionEventTracker"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Allows a user to send out collision events that do not originate from the physics system. This includes determining when to send start/persisted/end events. This is primarily intended for use with a swept character controller where you never actually come into contact with objects. The objects you would have hit can be added to this so that the same logic can be used for swept and non-swept collision."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddCollision"
					var Description = "Add a collision for this frame between ourself and the passed in collider."
					var ReturnType = "Void"
					var Parameters = "(Collider otherCollider, Real3 worldPoint, Real3 worldNormalTowardsOther)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "otherCollider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldNormalTowardsOther"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Collider"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "SendEvents"
					var Description = "Send out all of the events that have been queued up. This includes determining what should be started/persisted/ended events. These events are sent with the prefix that is passed in, e.g. if you pass in 'Collision' then CollisionStarted, CollisionPersisted, and CollisionEnded will be the event names."
					var ReturnType = "Void"
					var Parameters = "(String eventPrefix)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventPrefix"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CustomConstraintInfo"
			var BaseClass = "ReferenceCountedEventObject"
			var Library = "PhysicsLibrary"
			var Description = "Information to represent a constraint to be solved. The main information that needs to be set here is the Jacobian and error. A constraint will enforce that the relative velocities along the Jacobian are equal to zero (ignoring error correction or motors)."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Is this constraint currently active?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Angular0"
					var Type = "Real3"
					var Description = "Angular portion of objectA's Jacobian."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Angular1"
					var Type = "Real3"
					var Description = "Angular portion of objectB's Jacobian."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Baumgarte"
					var Type = "Real"
					var Description = "The baumgarte term used to correct error. This should typically be set in initialization (per constraint) and then left alone. Default value is 5."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Bias"
					var Type = "Real"
					var Description = "The bias is used to apply energy into the system. Typically, bias is combined with Error and Baumgarte to fix error. Bias is also used for motors and springs to drive the constraint."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EffectiveMass"
					var Type = "Real"
					var Description = "The effective mass of the constraint. This is typically set by calling SetJacobian."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Error"
					var Type = "Real"
					var Description = "The error of the constraint. This should typically be set via the SetError function."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Gamma"
					var Type = "Real"
					var Description = "Gamma is used to soften constraints. This should typically never be manually set. Instead, it is set when configuring the constraint to act like a spring."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Impulse"
					var Type = "Real"
					var Description = "The total accumulated impulse of this constraint. If you want to not use warm-starting then clear this value every frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Linear0"
					var Type = "Real3"
					var Description = "Linear portion of objectA's Jacobian."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Linear1"
					var Type = "Real3"
					var Description = "Linear portion of objectB's Jacobian."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxImpulse"
					var Type = "Real"
					var Description = "The max impulse magnitude allowed for the constraint."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinImpulse"
					var Type = "Real"
					var Description = "The min impulse magnitude allowed for the constraint."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Owner"
					var Type = "CustomJoint"
					var Description = "What joint currently owns this constraint."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SolvePosition"
					var Type = "Boolean"
					var Description = "Should this constraint solve position directly or use baumgarte correction? Toggling SolvePosition should be done before setting any other values (ideally in initialization). Setting a constraint to be a motor or a spring will turn off position correction as an error bias must be used to solve those scenarios."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ComputeMotor"
					var Description = "Sets this constraint as a motor (i.e. a constraint that drives movement along the Jacobian direction at a certain speed). The motor has a min and max impulse value that can be solved (typically -value, +value). If you set this as a motor, you should do so last. Motors should typically be their own constraint unlike springs."
					var ReturnType = "Void"
					var Parameters = "(Real targetSpeed, Real minImpulse, Real maxImpulse)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "targetSpeed"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "minImpulse"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxImpulse"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ComputeSpring"
					var Description = "Given the currently set mass and error, fix the constraint to be soft (i.e. solve the constraint like a spring). The spring fixes the constraint using the given frequency (oscillations per second) and damping ratio (0 is no damping, 1 is critical damping)."
					var ReturnType = "Void"
					var Parameters = "(Real frequencyHz, Real dampRatio)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frequencyHz"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "dampRatio"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DetachFromOwner"
					var Description = "Remove this constraint from whatever joint owns it. This is equivalent to \"this.Owner.RemoveConstraint(this)\"."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsOwned"
					var Description = "Is this constraint currently owned by a joint? (Equivalent to \"this.Owner != null\")."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetErrorAndBias"
					var Description = "Set the position error of the constraint. This also sets the bias of the constraint (used to actually correct the error). If you want to set this constraint as a motor you should not call this function (or call it first). If you want to set this as a spring then make sure you call this first."
					var ReturnType = "Void"
					var Parameters = "(Real error)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "error"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetJacobian"
					var Description = "Set the Jacobian of this constraint (and the effective mass)."
					var ReturnType = "Void"
					var Parameters = "(Real3 linear0, Real3 angular0, Real3 linear1, Real3 angular1)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "linear0"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "angular0"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "linear1"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "angular1"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CustomJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A customizable joint that can be configured in script. The user can create constraints belonging to this joint and set the required values to solve them. Some basic constraint understanding is required. To compute constraints you should listen to Events.ComputeCustomJointInfo."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ConstraintCount"
					var Type = "Integer"
					var Description = "Returns how many constraints this joint owns."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddConstraint"
					var Description = "Add a constraint to this joint. This will assert if a joint already owns this constraint."
					var ReturnType = "Void"
					var Parameters = "(CustomConstraintInfo constraint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "constraint"
							var Type = "CustomConstraintInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Constraint Add"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearConstraints"
					var Description = "Clear all constraints from this joint (so none will solve)."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateConstraint"
					var Description = "Create a constraint that is attached to this joint."
					var ReturnType = "CustomConstraintInfo"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetConstraint"
					var Description = "Returns the constraint at the given index. Will assert if the index is outside the constraint count range."
					var ReturnType = "CustomConstraintInfo"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveConstraint"
					var Description = "If the given constraint belongs to this joint then remove it from the constraints to solve."
					var ReturnType = "Void"
					var Parameters = "(CustomConstraintInfo constraint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "constraint"
							var Type = "CustomConstraintInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CustomJointEvent"
			var BaseClass = "Event"
			var Library = "PhysicsLibrary"
			var Description = "Sent by CustomJoint before solving constraints. Used to configure constraints before the physics system begins solving."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dt"
					var Type = "Real"
					var Description = "The current frame's delta time. Use to setup the constraint if necessary."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Owner"
					var Type = "CustomJoint"
					var Description = "The joint that sent this event."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CustomPhysicsEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "A physics effect that sends events out so users can apply custom logic for forces."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CustomPhysicsEffectEvent"
			var BaseClass = "Event"
			var Library = "PhysicsLibrary"
			var Description = "Event data for applying custom physics effects."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dt"
					var Type = "Real"
					var Description = "The timestep of the current physics frame (in seconds)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Effect"
					var Type = "CustomPhysicsEffect"
					var Description = "The effect that sent out this event."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RigidBody"
					var Type = "RigidBody"
					var Description = "The RigidBody to apply forces to."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "CylinderCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines the collision volume for a cylinder defined by a height and radius."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "AxisDirection"
					var Description = "The direction that the height is defined along. Allows the user to change whether the cylinder's height is along the x, y, or z axis."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Height"
					var Type = "Real"
					var Description = "The local space distance from the top of the cylinder to the bottom."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The local space radius of the cylinder."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldHeight"
					var Type = "Real"
					var Description = "The full height of the cylinder after scale is applied."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldRadius"
					var Type = "Real"
					var Description = "The radius of the cylinder after scale is applied."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DataResource"
			var BaseClass = "Resource"
			var Library = "EngineLibrary"
			var Description = "A resource that is stored in our serialization data format and is directly edited by the editor."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugArc"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "End"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Mid"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Start"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugBox"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Corners"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HalfExtents"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Rotation"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugCapsule"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "End"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Start"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugCircle"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Axis"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugCone"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Direction"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Length"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugCylinder"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "End"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Start"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugFrustum"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugLine"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BoxHeads"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DualHeads"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "End"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HeadSize"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Start"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugLineCross"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HalfExtents"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugObb"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Corners"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HalfExtents"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Rotation"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugSphere"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Colored"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugText"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Centered"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Rotation"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Text"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TextHeight"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebugTriangle"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OnTop"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Point0"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Point1"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Point2"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewAligned"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaleOffset"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DebuggerEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DelayNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a delay filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Delay"
					var Type = "Real"
					var Description = "The length of the delay, in seconds."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FeedbackPercent"
					var Type = "Real"
					var Description = "The percentage of output which is fed back into the filter as input, creating an echo-like effect."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WetPercent"
					var Type = "Real"
					var Description = "The percentage of the node's output which has the delay filter applied to it."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateWetPercent"
					var Description = "Interpolates the WetPercent property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real wetPercent, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "wetPercent"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DelegateParameter"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Type"
					var Type = "Type"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DelegateParameterRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "Delegate"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Delegate"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DelegateType"
			var BaseClass = "Type"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Parameters"
					var Type = "Delegate"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Return"
					var Type = "Type"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Signature"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DocumentResource"
			var BaseClass = "Resource"
			var Library = "EngineLibrary"
			var Description = "Resource that can be edited as text and is searchable."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DoubleInteger"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DoubleReal"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DragEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies drag or damping forces to slow down an object's linear and angular velocity. Drag is computed as a simple linear approximation of the drag force. Damping is a linear approximation of a drag acceleration. This means that damping affects all objects the same (mass independent)."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AngularDamping"
					var Type = "Real"
					var Description = "Angular damping coefficient for applying an angular drag acceleration (accel = -kw). Note: this affects objects the same regardless of mass."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AngularDrag"
					var Type = "Real"
					var Description = "The angular drag coefficient for applying an angular drag force (T = -kw)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LinearDamping"
					var Type = "Real"
					var Description = "Linear damping coefficient for applying a linear drag acceleration (accel = -bv). Note: this affects objects the same regardless of mass."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LinearDrag"
					var Type = "Real"
					var Description = "The linear drag coefficient for applying a linear drag force (F = -bv)."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "DynamicMotor"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Controls an object's movement using joints. This allows creating a physics based character controller that reacts to physics (joints, forces, collisions, etc...). The motor controls relative velocity with respect to a target object frame."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Should physics restrict the movement of this object?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxMoveImpulse"
					var Type = "Real"
					var Description = "What is the max impulse allowed for controlling movement."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveInDirection"
					var Description = "Attempts to move the body in the given direction."
					var ReturnType = "Void"
					var Parameters = "(Real3 direction, Real3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "direction"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetReferenceFrameToObject"
					var Description = "Compute the relative velocity with respect to a target object. Used to control movement on moving platforms."
					var ReturnType = "Void"
					var Parameters = "(Cog object)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "object"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetReferenceFrameToWorld"
					var Description = "Compute relative velocity with respect to the world. Used to signify that an absolute world speed is desired."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "EllipsoidCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines the collision volume for an ellipsoid (3 dimensional ellipse) defined by three radius values."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Radii"
					var Type = "Real3"
					var Description = "The x, y, and z radius of the ellipsoid."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldRadii"
					var Type = "Real3"
					var Description = "The radii of the ellipsoid after transform is applied (scale and rotation)."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Enum"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "EqualizerNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applied volume changes to specific frequency bands in the audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Band1Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 150 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Band2Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 600 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Band3Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 2500 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HighPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies above 5000 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LowPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies below 80 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateAllBands"
					var Description = "Sets the volume adjustment of all bands (the parameters in order are low pass, band 1, band 2, band 3, high pass) over the number of seconds passed in as the final parameter."
					var ReturnType = "Void"
					var Parameters = "(Real lowPass, Real band1, Real band2, Real band3, Real highPass, Real timeToInterpolate)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lowPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band2"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band3"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "highPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeToInterpolate"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ErrorEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Event"
			var BaseClass = "ThreadSafeId32Object"
			var Library = "MetaLibrary"
			var Description = "Base event class. All events types inherit from this class."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EventId"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Terminate"
					var Description = "Stops the event from being sent to any other connections."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Events"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid event"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "EventBundle"
			var BaseClass = "Object"
			var Library = "NetworkingLibrary"
			var Description = "Event Bundle Serialized event storage container."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Returns the game session."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddEvent"
					var Description = "Adds the event to back of the event bundle Returns true if successful, else false (an event of that type has already been added)"
					var ReturnType = "Boolean"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clears the event bundle."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid EventBundle Operation"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "GetEvents"
					var Description = "Returns all the events that have been added to the event bundle."
					var ReturnType = "EventRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveEvent"
					var Description = "Removes the event specified from the event bundle Returns true if successful, else false (an event of that type has already been added)"
					var ReturnType = "Boolean"
					var Parameters = "(Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveEvent"
					var Description = "Removes the event specified from the event bundle Returns true if successful, else false (an event of that type has already been added)"
					var ReturnType = "Boolean"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "EventData"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "EventHandler"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Events"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Connect"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnyHandle, String, delegate())"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "AnyHandle"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "delegate()"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Send"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(AnyHandle, String, EventData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "AnyHandle"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "EventData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Exception"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Message"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ExceptionEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ExecutableState"
			var BaseClass = "EventHandler"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CallingState"
					var Type = "ExecutableState"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ExecuteStatement"
					var Description = ""
					var ReturnType = "any"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ExpanderNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttackMillisec"
					var Type = "Real"
					var Description = "The time for the expander to ramp to full effect after the input reaches the threshold."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InputGainDecibels"
					var Type = "Real"
					var Description = "The volume adjustment applied to the audio input, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "KneeWidth"
					var Type = "Real"
					var Description = "The knee width of the expander, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OutputGainDecibels"
					var Type = "Real"
					var Description = "The volume adjustment applied to the expander output, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Ratio"
					var Type = "Real"
					var Description = "The ratio of the volume reduction applied by the expander."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReleaseMillisec"
					var Type = "Real"
					var Description = "The time for the expander to ramp from full effect to off after the input goes above the threshold."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ThresholdDecibels"
					var Type = "Real"
					var Description = "The threshold, in decibels, at which the volume of the input is affected by the expander."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FatalErrorEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Field"
			var BaseClass = "Property"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FieldRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "FieldRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Field"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FileMode"
			var BaseClass = "Enum"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Append"
					var Type = "FileMode"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Read"
					var Type = "FileMode"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Sequential"
					var Type = "FileMode"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ShareDelete"
					var Type = "FileMode"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ShareRead"
					var Type = "FileMode"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ShareWrite"
					var Type = "FileMode"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Write"
					var Type = "FileMode"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FilePath"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DirectorySeparator"
					var Type = "String"
					var Description = "Gets the character(s) used for separating directories and files. This value is often different depending on the operating system (generally either '/' or '\\')
"
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ExecutableDirectory"
					var Type = "String"
					var Description = "The directory the executable lives with in (exe, elf...). This will always include a directory separator at the end of the result.
"
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ExecutableFile"
					var Type = "String"
					var Description = "A path directly to the executable itself (exe, elf...).
"
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "TemporaryDirectory"
					var Type = "String"
					var Description = "Temporary files should be placed here. This will always include a directory separator at the end of the result.
"
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "UserDocumentsDirectory"
					var Type = "String"
					var Description = "User saved data that the user can backup or modify should be placed here (read/write/create permissions should be allowed). This will always include a directory separator at the end of the result.
"
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "UserLocalDirectory"
					var Type = "String"
					var Description = "Application saved information should be placed here (read/write/create permissions should be allowed). This will always include a directory separator at the end of the result.
"
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "WorkingDirectory"
					var Type = "String"
					var Description = "A directory that all relative paths start resolving from. In general the changing of the working directory is discouraged because it may affect assumptions of the host application. This will always include a directory separator at the end of the result.
"
					var ReadOnly = false
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddTrailingDirectorySeparator"
					var Description = "Pass in a directory path with or without the separator and this will add it at the end (if needed).
Example: ('Content\\Powerups') results in 'Content\\Powerups\\'
Example: ('Content\\Powerups\\') results in 'Content\\Powerups\\'
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ChangeExtension"
					var Description = "Changes the extension of a path (with file name at the end) to a new extension. If the file has no extension, then this will automatically add the extension to the end. The extension is allowed to contain a leading dot '.' character (or not). The path is also allowed to contain a trailing dot '.' character (or not).
Example: ('Content\\Player.png', 'jpg') results in 'Content\\Player.jpg'
Example: ('Content\\Player', 'jpg') results in 'Content\\Player.jpg'
Example: ('Content\\Player.', '.jpg') results in 'Content\\Player.jpg'
"
					var ReturnType = "String"
					var Parameters = "(String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectories"
					var Description = "Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result.
Example: ('Content', 'Powerups') results in 'Content\\Powerups\\'
Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\'
Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\'
Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\'
"
					var ReturnType = "String"
					var Parameters = "(String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectories"
					var Description = "Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result.
Example: ('Content', 'Powerups') results in 'Content\\Powerups\\'
Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\'
Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\'
Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\'
"
					var ReturnType = "String"
					var Parameters = "(String, String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectories"
					var Description = "Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result.
Example: ('Content', 'Powerups') results in 'Content\\Powerups\\'
Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\'
Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\'
Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\'
"
					var ReturnType = "String"
					var Parameters = "(String, String, String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectories"
					var Description = "Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result.
Example: ('Content', 'Powerups') results in 'Content\\Powerups\\'
Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\'
Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\'
Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\'
"
					var ReturnType = "String"
					var Parameters = "(String, String, String, String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectoriesAndFile"
					var Description = "Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator.
Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png'
"
					var ReturnType = "String"
					var Parameters = "(String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectoriesAndFile"
					var Description = "Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator.
Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png'
"
					var ReturnType = "String"
					var Parameters = "(String, String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectoriesAndFile"
					var Description = "Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator.
Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png'
"
					var ReturnType = "String"
					var Parameters = "(String, String, String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CombineDirectoriesAndFile"
					var Description = "Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator.
Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png'
Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png'
"
					var ReturnType = "String"
					var Parameters = "(String, String, String, String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetCanonicalizedPathFromAbsolutePath"
					var Description = "Changes all directory separators to be the current operating system directory separator, removes duplicate separators, and removes '..' and '.' from the paths. Canonicalized is only guaranteed to work on absolute paths. This behavior is operating system dependent and may call the related OS functions.
Example: ('C:/Sandbox//Engine/../Content/./Player.png') results in 'C:\\Sandbox\\Content\\Player.png'
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetComparablePathFromAbsolutePath"
					var Description = "First this normalizes the path, then if the operating system is case insensative, it will make the path all lowercase so that it compares.
Example: ('C:\\Sandbox\\Engine\\..\\Content\\.\\Player.png') results in 'c:\\sandbox\\content\\player.png'
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetDirectoryName"
					var Description = "If a file path is passed in, this will return the name of the parent directory. If a directory path is passed in (ending in a separator), this will return the name of the directory. A directory path without a trailing separator is abiguous with a file that has no extension. In this case, we always assume it is a file and therefore get the parent directory's name.
Example: ('Content\\Powerups\\Recharge.png') results in 'Powerups'
Example: ('Content\\Powerups\\') results in 'Powerups'
Example: ('Content\\Powerups') results in 'Content'
Example: ('Content') results in ''
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetDirectoryPath"
					var Description = "If a file path is passed in, this will return the parent directory. If a directory path is passed in (ending in a separator), this will return the directy back with no modifications. A directory path without a trailing separator is abiguous with a file that has no extension. This will always include a directory separator at the end of the result. In this case, we always assume it is a file and therefore get the parent directory's name.
Example: ('Content\\Powerups\\Recharge.png') results in 'Content\\Powerups\\'
Example: ('Content\\Powerups\\') results in 'Content\\Powerups\\'
Example: ('Content\\Powerups') results in 'Content\\'
Example: ('Content') results in ''
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetExtensionWithDot"
					var Description = "Returns only the extension of a file (everything after the last dot, including the dot). If the file has no extension then this will return an empty string.
Example: ('Content\\Player.png') results in '.png'
Example: ('Content\\Player.') results in ''
Example: ('Parent.Directory\\Log') results in ''
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetExtensionWithoutDot"
					var Description = "Returns only the extension of a file (everything after the last dot, not including the dot). If the file has no extension then this will return an empty string.
Example: ('Content\\Player.png') results in 'png'
Example: ('Content\\Player.') results in ''
Example: ('Parent.Directory\\Log') results in ''
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetFileNameWithExtension"
					var Description = "Returns only the file portion of a path (everything past the last separator including the extension).
Example: ('Content\\Player.png') results in 'Player.png'
Example: ('Content\\Powerups\\') results in ''
Example: ('Content\\Powerups') results in 'Powerups'
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GetFileNameWithoutExtension"
					var Description = "Returns only the file portion of a path (everything past the last separator excluding the extension).
Example: ('Content\\Player.png') results in 'Player'
Example: ('Content\\Powerups\\') results in ''
Example: ('Content\\Powerups') results in 'Powerups'
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "IsRelative"
					var Description = "Returns true if a path has no root (such as a volume/hard drive specifier, or unix like systems a beginning slash). Even a beginning slash that means 'relative to the current working directory volume' is still relative. Empty paths will return that they are relative.
Example: ('C:\\Sandbox\\Engine\\..\\Content\\.\\Player.png') results in 'false'
Example: ('Sandbox') results in 'true'
Example: ('Content\\Powerups\\Recharge.png') results in 'true'
Example: ('/usr/Content/Player.png') results in 'false'
"
					var ReturnType = "Boolean"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RemoveTrailingDirectorySeparator"
					var Description = "Pass in a directory path with or without the separator and this will remove it from the end (if needed).
Example: ('Content\\Powerups') results in 'Content\\Powerups'
Example: ('Content\\Powerups\\') results in 'Content\\Powerups'
"
					var ReturnType = "String"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FileStream"
			var BaseClass = "IStream"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Close"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FixedAngleJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "Locks the orientation of two objects together. Used when two objects should always rotate in unison. Typically not used by itself, but useful as a proof of concept for joints that use this functionality internally. Limits, motors, and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max angle on every axis that the objects must be between. Motor: A motor will attempt to drive the rotation on every axis forward. Spring: A spring will make the rotations on every axis at the bounds springy."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FlangerNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a flanger filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FeedbackPercent"
					var Type = "Real"
					var Description = "The percentage of output which is fed back into the filter as input."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxDelayMillisec"
					var Type = "Real"
					var Description = "The maximum delay reached by the modulation. It will oscillate between 0 and this value at the frequency set by the ModulationFrequency property."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ModulationFrequency"
					var Type = "Real"
					var Description = "The frequency of the oscillator which varies the modulation."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FlowEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a force to make an object move at a target speed in a given direction. This can also be used to pull the object towards the center of the flow (the axis in the flow direction centered at the effect). Used to model a river or a tractor beam."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttractSpeed"
					var Type = "Real"
					var Description = "The target speed for an object to be pulled towards the center of the flow."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AttractToFlowCenter"
					var Type = "Boolean"
					var Description = "Determines if the flow field will attract objects towards the center of the field. This can be used to create a tractor beam effect that will keep the object inside of the flow field."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FlowDirection"
					var Type = "Real3"
					var Description = "The direction that the field is flowing. This can be defined in world or local space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FlowSpeed"
					var Type = "Real"
					var Description = "The target speed of objects in the flow field."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalForce"
					var Type = "Boolean"
					var Description = "Determines if the flow direction is in the local space of the object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxAttractForce"
					var Type = "Real"
					var Description = "The max force that can be used to reach the target attract speed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxFlowForce"
					var Type = "Real"
					var Description = "The max force that can be used to reach the target flow speed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldFlowDirection"
					var Type = "Real3"
					var Description = "The direction that the field is flowing in world space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Font"
			var BaseClass = "Resource"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ForceEffect"
			var BaseClass = "BasicDirectionEffect"
			var Library = "PhysicsLibrary"
			var Description = "A force effect that is applied in a given direction (local or world space). This is used to create force regions that will push objects in a given direction. This can also be used on a rigid body to push an object in it's forward direction (e.g a missile) if applied locally. Note: this is always applied at the center of mass of the object. If a more rocket like effect is desired see ThrustEffect."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FrameRateSettings"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Settings for how the frame rate of the engine should be controlled."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FrameRate"
					var Type = "Integer"
					var Description = "How many frames per second the engine should be limited at."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LimitFrameRate"
					var Type = "Boolean"
					var Description = "If the engine should limit the frame rate."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VerticalSync"
					var Type = "Boolean"
					var Description = "If the frame rate should sync with the monitor's refresh rate, superseded by LimitFrameRate."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Frustum"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Plane"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAabb"
					var Description = ""
					var ReturnType = "Aabb"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Plane)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Plane"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Function"
			var BaseClass = "Member"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Type"
					var Type = "DelegateType"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateDelegate"
					var Description = ""
					var ReturnType = "any"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Invoke"
					var Description = ""
					var ReturnType = "any"
					var Parameters = "(any, Array[T])"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Array[T]"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "FunctionRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "FunctionRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Function"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GameEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "Event type used by the GameSession."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Game"
					var Type = "GameSession"
					var Description = "GameSession Object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Handled"
					var Type = "Boolean"
					var Description = "Has this event been handled? Used to for the engine to poll for Request Quit and other operations."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LevelName"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "Space related to his event."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GameSession"
			var BaseClass = "Cog"
			var Library = "EngineLibrary"
			var Description = "The GameSession manages all spaces and data for a a game."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AllSpaces"
					var Type = "SpaceMapValueRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Focused"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "FullScreen"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Resolution"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateNamedSpace"
					var Description = "Create a space from an archetype with the given name."
					var ReturnType = "Space"
					var Parameters = "(String name, Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateSpace"
					var Description = "Create a space in the game. Use the archetype's name."
					var ReturnType = "Space"
					var Parameters = "(Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindAllSpacesByName"
					var Description = ""
					var ReturnType = "SpaceMapValueRange"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindSpaceByName"
					var Description = "Find a named space."
					var ReturnType = "Space"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsEditorMode"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Quit"
					var Description = "Quit the game and exit the engine if not in editor."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RequestQuit"
					var Description = "Request to quit sending out the GameRequestQuit event."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Start"
					var Description = "Start the game."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Gamepad"
			var BaseClass = "EventObject"
			var Library = "EngineLibrary"
			var Description = "Game pad is a object for getting game pad input."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GamepadIndex"
					var Type = "Integer"
					var Description = "Index of this gamepad."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IsActive"
					var Type = "Boolean"
					var Description = "Is this controller turned on and plugged in."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LeftStick"
					var Type = "Real2"
					var Description = "Current offset [-1,1] from the center of the left stick."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LeftStickDelta"
					var Type = "Real2"
					var Description = "Change in the left stick this frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LeftTrigger"
					var Type = "Real"
					var Description = "Value of how much the Left Trigger is down. Range [0,1]."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RightStick"
					var Type = "Real2"
					var Description = "Current offset [-1,1] from the center of the right stick."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RightStickDelta"
					var Type = "Real2"
					var Description = "Change in the right stick this frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RightTrigger"
					var Type = "Real"
					var Description = "Value of how much the Right Trigger is down. Range [0,1]."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "IsButtonHeld"
					var Description = "Is the button currently being held down."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsButtonPressed"
					var Description = "Has the button just been pressed this frame."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsButtonReleased"
					var Description = "Is the button just been released."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TimeButtonHeld"
					var Description = "How long has this button been held down."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Vibrate"
					var Description = "Vibrate this controller for a given time. Speed is a value between zero and one."
					var ReturnType = "Void"
					var Parameters = "(Real time, Real LeftSpeed, Real RightSpeed)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "LeftSpeed"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "RightSpeed"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GamepadEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "Gamepad events are send when a game pad button state is changed."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Button"
					var Type = "Integer"
					var Description = "Button that was just pressed down or released up."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FlickDirection"
					var Type = "Real2"
					var Description = "The direction of the stick that was flicked (normalized)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FlickedStick"
					var Type = "FlickedStick"
					var Description = "When responding to the 'GamepadStickFlicked' event, this will be set to the stick that was flicked."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Gamepad"
					var Type = "Gamepad"
					var Description = "Gamepad that generated this event."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Gamepads"
			var BaseClass = "EventObject"
			var Library = "EngineLibrary"
			var Description = "Gamepads is a collection of gamepads."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxGamepadCount"
					var Type = "Integer"
					var Description = "Gets the maximum number of supported gamepads."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetGamePad"
					var Description = "Get the gamepad for a given index from [0, GamepadCount]."
					var ReturnType = "Gamepad"
					var Parameters = "(Integer gamepadIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "gamepadIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PauseVibration"
					var Description = "Pause Vibration on all gamepads."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ResumeVibration"
					var Description = "Resume vibration on all gamepads."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GearJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A gear connects two joints on two objects together. Either joint can be a prismatic or a revolute. A gear ratio is used to bind the two joints together. Limits, motors, and springs should not be used on this."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Constant"
					var Type = "Real"
					var Description = "The initial offset of the gear ratio."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointA"
					var Type = "Cog"
					var Description = "The joint connected to ObjectA that the gear operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointAPath"
					var Type = "CogPath"
					var Description = "The joint connected to ObjectA that the gear operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointB"
					var Type = "Cog"
					var Description = "The joint connected to ObjectB that the gear operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointBPath"
					var Type = "CogPath"
					var Description = "The joint connected to ObjectB that the gear operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Ratio"
					var Type = "Real"
					var Description = "The gear ratio that the two constraints are bound with."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GeneratedWaveNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Plays audio using the specified type of generated wave."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment that will be applied to the sound when it plays. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WaveFrequency"
					var Type = "Real"
					var Description = "The frequency of the generated sound wave. This value will have no effect if the Noise type is chosen."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WaveType"
					var Type = "SynthWaveType"
					var Description = "The type of sound wave used to generate the audio. Possible types are Sine, Square, Saw, Triangle, and Noise (randomly generated white noise)."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateWaveFrequency"
					var Description = "Interpolates the WaveFrequency property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. This method will have no effect if the Noise type is chosen."
					var ReturnType = "Void"
					var Parameters = "(Real frequency, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frequency"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Play"
					var Description = "Starts playing the generated audio."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Stop"
					var Description = "Stops playing the generated audio."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GenericPhysicsMesh"
			var BaseClass = "Resource"
			var Library = "PhysicsLibrary"
			var Description = "Base class of mesh type physics resources. Stores the actual mesh (no optimization structures) and information about the mesh such as mass and inertia."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Indices"
					var Type = "PhysicsMeshIndexData"
					var Description = "The index buffer data of this mesh."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Vertices"
					var Type = "PhysicsMeshVertexData"
					var Description = "The vertex buffer data of this mesh."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "UpdateAndNotifyIfModified"
					var Description = "Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more (some derived types may have a mid-phase, etc...)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Validate"
					var Description = "Check if the mesh is valid. Optionally throw a script exception if it is invalid."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean throwExceptionIfInvalid)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "throwExceptionIfInvalid"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Mesh"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GetterSetter"
			var BaseClass = "Property"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GetterSetterRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "GetterSetterRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "GetterSetter"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Graphical"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Base interface for components that require rendering."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GroupSortValue"
					var Type = "Integer"
					var Description = "Can be used by a RenderGroup to define draw order, from lowest to highest."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAabbCenter"
					var Type = "Real3"
					var Description = "Center of the bounding box defined in local space, world transform will be applied."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAabbHalfExtents"
					var Type = "Real3"
					var Description = "Half extents of the bounding box defined in local space, world transform will be applied."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Material"
					var Type = "Material"
					var Description = "The composition of shader fragments that determines how the graphical is rendered."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OverrideBoundingBox"
					var Type = "Boolean"
					var Description = "Manually set the bounding box that is used for frustum culling."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShaderInputs"
					var Type = "ShaderInputs"
					var Description = "List of shader inputs to be manually overridden only on this object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewCulling"
					var Type = "Boolean"
					var Description = "If the graphical should not be drawn when its bounding volume is outside of the view frustum."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VisibilityEvents"
					var Type = "Boolean"
					var Description = "If object receives events when entering/exiting the view of an active camera."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Visible"
					var Type = "Boolean"
					var Description = "If the graphical should be drawn."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldAabb"
					var Type = "Aabb"
					var Description = "The world space axis aligned bounding volume that is used for frustum culling."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GraphicalEvent"
			var BaseClass = "Event"
			var Library = "GraphicsLibrary"
			var Description = "Event for changes of visibility state."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ViewingObject"
					var Type = "Cog"
					var Description = "The viewing CameraViewport for EnterView/ExitView."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GraphicsSpace"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Core space component that manages all interactions between graphics related objects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "If graphics for this Space should be running."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RandomSeed"
					var Type = "Boolean"
					var Description = "If the random number generator used by graphics objects should be seeded randomly."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Seed"
					var Type = "Integer"
					var Description = "Value to seed the random number generator with."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GravityEffect"
			var BaseClass = "BasicDirectionEffect"
			var Library = "PhysicsLibrary"
			var Description = "A constant acceleration that is applied in the given direction (mass is ignored). This is useful for creating gravity (either on the entire world or in a region) that will push/pull objects in a given direction at a constant acceleration."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "GridDraw"
			var BaseClass = "Component"
			var Library = "EditorLibrary"
			var Description = "A component used for drawing a grid."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AlwaysDrawInEditor"
					var Type = "Boolean"
					var Description = "Always draw the grid in editor (not just when it's selected)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Axis"
					var Type = "AxisDirection"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CellSize"
					var Type = "Real"
					var Description = "The deltas in the grid (how far apart we draw grid lines)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DrawAxisOrigins"
					var Type = "Boolean"
					var Description = "Changes the line color to."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DrawInGame"
					var Type = "Boolean"
					var Description = "Draw the grid in the game."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FollowEditorCamera"
					var Type = "Boolean"
					var Description = "Move with the editor camera?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "GridColor"
					var Type = "Real4"
					var Description = "Color of grid lines."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "GridHighlight"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HalfCellOffset"
					var Type = "Boolean"
					var Description = "Is the grid offset by half a unit?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HighlightInterval"
					var Type = "Integer"
					var Description = "How often should cells be activated."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Lines"
					var Type = "Integer"
					var Description = "The number of lines to draw."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HeightMap"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "A common class that represents height map data."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Source"
					var Type = "HeightMapSource"
					var Description = "Get source for height map."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "UnitsPerPatch"
					var Type = "Real"
					var Description = "Gets/sets the number of units per patch."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HeightMapCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines collision for a height map."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Thickness"
					var Type = "Real"
					var Description = "How thick the surface of the height map is. Used to avoid tunneling problems."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ClearCachedEdgeAdjacency"
					var Description = "Clear the cached information used to avoid catching edges. Typically called internally by physics, but is exposed for manual triggering."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HeightMapEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "Used by any height map event."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HeightMapModel"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Generates a graphical mesh from every patch of height data in the HeightMap component."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HeightMapSource"
			var BaseClass = "Resource"
			var Library = "EngineLibrary"
			var Description = "HeightMapSource stores data needed for height maps. Data is stored on PatchData which are indexed by x,y. Each PatchData stores layers that represent different data. The primary layer is height and paint values but additional layers can be added to store data like foliage or custom game data."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Hierarchy"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Component that gives an game object the ability to have child objects and Contains a list of children."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Children"
					var Type = "HierarchyListRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HierarchyEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Child"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Parent"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HierarchySpline"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "A spline that builds its control points from all child cogs that have Transforms."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Closed"
					var Type = "Boolean"
					var Description = "Does the spline loop back on itself?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DebugDrawSpline"
					var Type = "Boolean"
					var Description = "Should the spline draw every frame? Mainly used for debugging purposes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Error"
					var Type = "Real"
					var Description = "The max number of units that a line segment is allowed to deviate from the curve."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Spline"
					var Type = "Spline"
					var Description = "The internal spline data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SplineColor"
					var Type = "Real4"
					var Description = "What color should that spline be drawn with."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SplineType"
					var Type = "SplineType"
					var Description = "The kind of spline (Linear, BSpline, CatmulRom). Determines how the control points affect the curve."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "HighPassNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a high pass filter to audio generated by its input SoundNodes (removes low frequencies)"
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CutoffFrequency"
					var Type = "Real"
					var Description = "Frequencies below this number in the node's input will be attenuated. Setting this value to 20.0 or lower will skip all filter calculations."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "IEncoding"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Ascii"
					var Type = "AsciiEncoding"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Utf8"
					var Type = "Utf8Encoding"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Read"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "(IStream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "IStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Rune, IStream)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Rune"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "IStream"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "IStream"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Capabilities"
					var Type = "StreamCapabilities"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "DoubleInteger"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "DoubleInteger"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Flush"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Read"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Array[T], Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Array[T]"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadAllText"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(IEncoding)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "IEncoding"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadAllText"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadByte"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadLine"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(IEncoding)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "IEncoding"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReadLine"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Seek"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(DoubleInteger, StreamOrigin)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleInteger"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StreamOrigin"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Array[T], Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Array[T]"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Array[T])"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Array[T]"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteByte"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Byte)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Byte"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteText"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(String, IEncoding)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "IEncoding"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteText"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "IgnoreSpaceEffects"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Allows a cog to ignore certain effect types (such as gravity or drag) that are being applied to the entire space (effects on Space or LevelSettings)."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "IgnoreBuoyancy"
					var Type = "Boolean"
					var Description = "Whether or not to ignore buoyancy effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreCustom"
					var Type = "Boolean"
					var Description = "Whether or not to ignore custom effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreDrag"
					var Type = "Boolean"
					var Description = "Whether or not to ignore drag effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreFlow"
					var Type = "Boolean"
					var Description = "Whether or not to ignore flow effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreForce"
					var Type = "Boolean"
					var Description = "Whether or not to ignore force effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreGravity"
					var Type = "Boolean"
					var Description = "Whether or not to ignore gravity effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnorePointForce"
					var Type = "Boolean"
					var Description = "Whether or not to ignore point force effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnorePointGravity"
					var Type = "Boolean"
					var Description = "Whether or not to ignore point gravity effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreThrust"
					var Type = "Boolean"
					var Description = "Whether or not to ignore thrust effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreTorque"
					var Type = "Boolean"
					var Description = "Whether or not to ignore torque effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreVortex"
					var Type = "Boolean"
					var Description = "Whether or not to ignore vortex effects."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IgnoreWind"
					var Type = "Boolean"
					var Description = "Whether or not to ignore wind effects."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetIgnoreState"
					var Description = "Should the given effect type be ignored?"
					var ReturnType = "Boolean"
					var Parameters = "(PhysicsEffectType effectType)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effectType"
							var Type = "PhysicsEffectType"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetIgnoreState"
					var Description = "Set if an effect type should be ignored."
					var ReturnType = "Void"
					var Parameters = "(PhysicsEffectType effectType, Boolean ignore)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "effectType"
							var Type = "PhysicsEffectType"
							var Description = ""
						}
						Parameter
						{
							var Name = "ignore"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "IndexBuffer"
			var BaseClass = "SafeId32"
			var Library = "GraphicsLibrary"
			var Description = "Indices used to define non-sequential primitive construction from vertices, such as shared vertices."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = "Number of vertex indices currently in buffer. Can be set manually to invoke vertex shading that number of times, with or without vertex data."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = "Add a vertex index to the buffer."
					var ReturnType = "Void"
					var Parameters = "(Integer value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clears all stored indices so that new ones can be added."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = "Returns the vertex index that is stored at the given index of this buffer."
					var ReturnType = "Integer"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "IndirectionType"
			var BaseClass = "Type"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ReferencedType"
					var Type = "BoundType"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "InputDeviceEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "An event to inform which input device is being used by the user."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Device"
					var Type = "InputDevice"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LastDevice"
					var Type = "InputDevice"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer"
					var Description = "The smallest (most negative) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer"
					var Description = "The negative value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer"
					var Description = "The largest (most positive) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer"
					var Description = "The positive value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Parse"
					var Description = "Attempt to convert the given StringRange to an Integer. If parsing fails 0 is returned."
					var ReturnType = "Integer"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Reinterpret"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer2"
					var Description = "The smallest (most negative) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer2"
					var Description = "The negative value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer2"
					var Description = "The largest (most positive) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer2"
					var Description = "The positive value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer2"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Integer2"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer2"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Integer2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer2x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer2x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer2x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer3"
					var Description = "The smallest (most negative) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer3"
					var Description = "The negative value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer3"
					var Description = "The largest (most positive) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer3"
					var Description = "The positive value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Integer3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Integer3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer3"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Integer3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer3x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer3x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer3x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M23"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Integer4"
					var Description = "The smallest (most negative) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Integer4"
					var Description = "The negative value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Integer4"
					var Description = "The largest (most positive) value that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Integer4"
					var Description = "The positive value closest to zero that can be represented by an Integer."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "WAxis"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Integer4"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Integer4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer4x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer4x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M32"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Integer4x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M23"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M32"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M33"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "IpAddress"
			var BaseClass = "SocketAddress"
			var Library = "MetaLibrary"
			var Description = "IPv4/IPv6 network host identifier Provided for convenience Note: This class is not slice-able, it has extra data."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Hash"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Host"
					var Type = "String"
					var Description = "Returns the valid IP address host as a numeric string, else String()"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InternetProtocol"
					var Type = "InternetProtocol"
					var Description = "Returns the valid IP address protocol version, else InternetProtocol::Unspecified."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsValid"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Port"
					var Type = "Integer"
					var Description = "Returns the valid IP address port, else 0."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PortString"
					var Type = "String"
					var Description = "Returns the valid IP address port as a numeric string, else String()"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "String"
					var Type = "String"
					var Description = "Returns the valid IP address as a numeric \"host:port\" string, else String()"
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = "Clears the IP address."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Joint"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Joints connect two objects together with one or more constraints. A constraint is a mathematical rule that restricts object movement, typically defined in terms of the position and velocities of the objects involved."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AutoSnaps"
					var Type = "Boolean"
					var Description = "Determines if this joint will automatically delete itself if any of its constraints reach the max impulse value. This will still send an event if it snaps."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CollideConnected"
					var Type = "Boolean"
					var Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxImpulse"
					var Type = "Real"
					var Description = "The maximum impulse (instantaneous force) that this joint can apply to correct itself."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SendsEvents"
					var Type = "Boolean"
					var Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetCog"
					var Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop."
					var ReturnType = "Cog"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetOtherObject"
					var Description = "If the passed in object is ObjectA, returns ObjectB. Provides easier logic for traversing across joints."
					var ReturnType = "Cog"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointConfigOverride"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Overrides a joint's configuration values of slop, linear/angular Baumgarte, and linear/angular error correction. Slop is the amount of error allowed before position correction takes effect. Baumgarte is used to correct error with a penalty impulse. Baumgarte is split into linear and angular portions because of stability. Error correction is only used when the joint is solved with post stabilization."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AngularBaumgarte"
					var Type = "Real"
					var Description = "The exponential constant for correcting angular error with a penalty impulse."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AngularErrorCorrection"
					var Type = "Real"
					var Description = "The max amount of error that can be corrected by the angular portion of any constraint in one frame (only for PostStabilization)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LinearBaumgarte"
					var Type = "Real"
					var Description = "The exponential constant for correcting linear error with a penalty impulse."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LinearErrorCorrection"
					var Type = "Real"
					var Description = "The max amount of error that can be corrected by the linear portion of any constraint in one frame (only for PostStabilization)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PositionCorrectionType"
					var Type = "ConstraintPositionCorrection"
					var Description = "The kind of position correction that this joint should use."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Slop"
					var Type = "Real"
					var Description = "The amount of error allowed before position correction takes effect."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointCreator"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "A helper class to create joints of various configurations. Each joint is configured from two points. Any other specific joint properties are calculated from these two points."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttachToCommonParent"
					var Type = "Boolean"
					var Description = "Should the cog of the joint be added as a child of the common parent of the two given cogs? Useful for putting the joint in the same hierarchy so that archetypes can be created."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AttachToWorld"
					var Type = "Boolean"
					var Description = "Used to create a connection to a dummy object. Instead of connecting to object B, the connection will be between object A and \"the world\"."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AutoSnaps"
					var Type = "Boolean"
					var Description = "Should the joint auto-snap when the force limit is reached?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OverrideLength"
					var Type = "Boolean"
					var Description = "Should the length of the joint be overridden or computed from the two points? Mainly used for StickJoint."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseCenter"
					var Type = "Boolean"
					var Description = "Should the center of each object be used instead of the given points?"
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddJointLimit"
					var Description = "Add a JointLimit to the given joint cog."
					var ReturnType = "JointLimit"
					var Parameters = "(Cog joint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "joint"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddJointMotor"
					var Description = "Add a JointMotor to the given joint cog."
					var ReturnType = "JointMotor"
					var Parameters = "(Cog joint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "joint"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddJointSpring"
					var Description = "Add a JointSpring to the given joint cog."
					var ReturnType = "JointSpring"
					var Parameters = "(Cog joint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "joint"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Create"
					var Description = "Create a joint (by component name) attached to the two given cogs."
					var ReturnType = "Cog"
					var Parameters = "(Cog objectA, Cog objectB, String jointName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "objectA"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectB"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "jointName"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateLocalPoints"
					var Description = "Create a joint (by component name) attached to the two given cogs."
					var ReturnType = "Cog"
					var Parameters = "(Cog objectA, Cog objectB, String jointName, Real3 localPointA, Real3 localPointB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "objectA"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectB"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "jointName"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPointA"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPointB"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateWorldPoints"
					var Description = "Create a joint (by component name) attached to the two given cogs. Both world points on the joint are set to the same world point value."
					var ReturnType = "Cog"
					var Parameters = "(Cog objectA, Cog objectB, String jointName, Real3 bothWorldPoints)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "objectA"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectB"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "jointName"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "bothWorldPoints"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateWorldPoints"
					var Description = "Create a joint (by component name) attached to the two given cogs."
					var ReturnType = "Cog"
					var Parameters = "(Cog objectA, Cog objectB, String jointName, Real3 worldPointA, Real3 worldPointB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "objectA"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectB"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "jointName"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPointA"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPointB"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointDebugDrawConfig"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Allows the user to override parameters for debug drawing of joints. Primarily used to debug draw from different object perspectives and to change the size of drawn data."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Whether or not this component is active."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Detail"
					var Type = "Real"
					var Description = "The amount of detail to use when drawing. For example, the detail on a RevoluteJoint will increase the number of lines used to draw the arc of a circle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectAPerspective"
					var Type = "Boolean"
					var Description = "If we draw the joint's debug info from the perspective of ObjectA. Typically used when ObjectA is marked as a static object and ObjectB has free movement."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectBPerspective"
					var Type = "Boolean"
					var Description = "If we draw the joint's debug info from the perspective of ObjectB. Typically used when ObjectB is marked as a static object and ObjectA has free movement."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Size"
					var Type = "Real"
					var Description = "A size modifier for the debug drawing. 1 is the base size."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointEvent"
			var BaseClass = "Event"
			var Library = "PhysicsLibrary"
			var Description = "Sent out when a joint reaches some condition. Currently sent out when a limit is reached or an impulse's limit is exceeded."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Joint"
					var Type = "Joint"
					var Description = "The Joint that triggered the event."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "JointCog"
					var Type = "Cog"
					var Description = "The Cog of the Joint that signaled the event."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ObjectA"
					var Type = "Cog"
					var Description = "ObjectA on the Joint."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ObjectB"
					var Type = "Cog"
					var Description = "ObjectB on the Joint."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointGraphEdge"
			var BaseClass = "BaseJointGraphEdge< Joint >"
			var Library = "PhysicsLibrary"
			var Description = "A bi-directional graph edge between a collider and a joint. Exposes convenience functions for iterating over the graph."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Joint"
					var Type = "Joint"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OtherObject"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Owner"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Valid"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointLimit"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Defines limit properties for a joint. Used to add a min/max bounds to a joint. When the joint is in between the min/max bounds, the \"limited\" portion will be ignored (The stick will not solve when it is in between the bounds, making it a rope). See each joint for a description of how it reacts to a limit."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this limit is currently active."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AtomIds"
					var Type = "Integer"
					var Description = "Signifies what atoms on the joint this affects. For internal use."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LowerLimit"
					var Type = "Real"
					var Description = "The lower bound for this limit."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UpperLimit"
					var Type = "Real"
					var Description = "The upper bound for this limit."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointMotor"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Defines motor properties for a joint. Used to add energy to a joint. A motor defines a desired speed to move at as well as a max impulse that can be applied to reach that speed in a timestep. See each joint for a description of how it reacts to a motor."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this motor is currently active."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AtomIds"
					var Type = "Integer"
					var Description = "Signifies what atoms on the joint this affects. For internal use."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxImpulse"
					var Type = "Real"
					var Description = "The maximum impulse that the motor can apply each frame to reach the target speed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Reverse"
					var Type = "Boolean"
					var Description = "Determines if this motor should move in reverse. This is a convenient way to reverse a motor without having to negate the speed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Speed"
					var Type = "Real"
					var Description = "The desired speed for this motor."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JointSpring"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Defines spring properties for a joint. Used to make a joint soft and therefore behave spring-like. A joint spring has a frequency in hertz at which to oscillate as well as a damping ratio. The ratio should vary from 0 to 1 where 0 is no damping and 1 is critical damping. See each joint for a description of how it reacts to a spring."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines if this spring is active."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AtomIds"
					var Type = "Integer"
					var Description = "Signifies what atoms on the joint this affects. For internal use."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DampingRatio"
					var Type = "Real"
					var Description = "The damping ratio of this spring. The value should range from 0 to 1 where 0 is no damping and 1 is critical damping."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FrequencyHz"
					var Type = "Real"
					var Description = "The oscillation frequency of the spring in Hertz (cycles per second)."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Joystick"
			var BaseClass = "EventObject"
			var Library = "EngineLibrary"
			var Description = "A Joystick is associated with a hardware joystick, and provides the ability to query axes and buttons."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AxisCount"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ButtonCount"
					var Type = "Integer"
					var Description = "Get the number of buttons or axes."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsActive"
					var Type = "Boolean"
					var Description = "Gets whether or not the joystick is active."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = "Get the name of the Joystick."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Calibrating"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "EndCalibration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxisIndex"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxisName"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxisValue"
					var Description = "Queries an axes and returns a value between [-1, 1] The valid range of axes is between 0 and 'GetMaxAxes' If the axis is not valid, then the value returned is 0."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxisValueByName"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetButtonValue"
					var Description = "Queries a button and returns true if it is down, false if it is up The valid range of buttons is between 0 and 'GetMaxButtons' If the button is not valid, then the value returned is false."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "LoadInputMapping"
					var Description = "Load an input mapping."
					var ReturnType = "Void"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SaveInputMapping"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StartCalibration"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "JoystickEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "Joystick events are sent when a game pad button state is changed."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Button"
					var Type = "Integer"
					var Description = "The button that was just pressed or released."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Joystick"
					var Type = "Joystick"
					var Description = "The joystick that generated this event."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Joysticks"
			var BaseClass = "EventObject"
			var Library = "EngineLibrary"
			var Description = "Joysticks is a collection of all joysticks available."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "JoystickCount"
					var Type = "Integer"
					var Description = "Get the number of joysticks."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Joysticks"
					var Type = "JoystickRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Keyboard"
			var BaseClass = "EventObject"
			var Library = "EngineLibrary"
			var Description = "Keyboard representing the physical keyboard."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetKeyName"
					var Description = "Gets a string name of a particular key."
					var ReturnType = "String"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "KeyIsDown"
					var Description = "Is the particular currently down."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "KeyIsPressed"
					var Description = "Was the key pressed this frame."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "KeyIsReleased"
					var Description = "Was the key released this frame."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "KeyIsUp"
					var Description = "Is the particular currently up."
					var ReturnType = "Boolean"
					var Parameters = "(Keys key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "Keys"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "KeyboardEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "Represents information about key state changes."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AltPressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CtrlPressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HandledEvent"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Key"
					var Type = "Keys"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Keyboard"
					var Type = "Keyboard"
					var Description = "Get the keyboard that generated this event."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OsKey"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShiftPressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpacePressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "State"
					var Type = "KeyState"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "KeyboardTextEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "Gives the actual key value being typed. For example, holding Shift + 'a' will give 'A'."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Character"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Level"
			var BaseClass = "Resource"
			var Library = "EngineLibrary"
			var Description = "A level is resource that stores a set of objects that can be loaded into a space. Level is different from most resource types in that it does not really store the level data on the object but always loads the data from the file system."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "LinearAxisJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "Legacy. A linear axis joint is used to keep an object locked on a plane that is defined by a normal. This was made to help make a dynamic character controller. Instead of locking translation along a plane, the constraint can be turned off with a motor attached to it which will drive movement in the direction of the plane normal. This can then be thought of as a \"move in direction\" constraint."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = "The axis in world space that is constrained."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "LinearParticleAnimator"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = "Basic Particle Animation Effects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dampening"
					var Type = "Real"
					var Description = "Velocity dampening."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Force"
					var Type = "Real3"
					var Description = "Constance force applied to particles."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Growth"
					var Type = "Real"
					var Description = "Rate of particle size growth."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RandomForce"
					var Type = "Real3"
					var Description = "Random force applied to particles."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Torque"
					var Type = "Real"
					var Description = "Force that applies spin."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Twist"
					var Type = "Real3"
					var Description = "Twist applies a twisting/tornado force to the particles."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "LowPassNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a low pass filter to audio generated by its input SoundNodes (removes high frequencies)"
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CutoffFrequency"
					var Type = "Real"
					var Description = "Frequencies above this number in the node's input will be attenuated. Setting this value to 20,000.00 or higher will skip all filter calculations."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MainConfig"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Main configuration component."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ApplicationName"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "BuildDate"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "BuildVersion"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ManipulatorJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "Legacy. A position joint that is designed to manipulate one object. The only difference between this and the position joint is that the manipulator always draws itself, draws differently, and configures the max impulse differently."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPoint"
					var Type = "Real3"
					var Description = "The local space point on the object that the joint is connected to."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TargetPoint"
					var Type = "Real3"
					var Description = "The point in world space that the object's point is being moved towards."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPoint"
					var Type = "Real3"
					var Description = "The world space point on the object that the joint is connected to."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MassOverride"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Takes a snap shot of the current mass and inertia and overrides the object's mass so it can be resized while keeping it's old mass."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Determines whether the RigidBody on this Cog will use the cached or actual mass and inertia."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AutoComputeCenterOfMass"
					var Type = "Boolean"
					var Description = "Should the center of mass be auto computed or overwritten (via script)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AutoComputeInertia"
					var Type = "Boolean"
					var Description = "Should the inertia tensor be auto computed or overwritten (via script)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InverseMass"
					var Type = "Real"
					var Description = "The cached inverse mass of this object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalCenterOfMass"
					var Type = "Real3"
					var Description = "The center of mass in local space to override with. When set, the center of mass will be locked to this value until AutoComputeCenterOfMass is set to true."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalInverseInertiaTensor"
					var Type = "Real3x3"
					var Description = "The inverse inertia tensor this object is saved with."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Mass"
					var Type = "Real"
					var Description = "Overrides the mass of this body. Inertia is updated as a ratio of the new mass to the old mass."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "RecomputeMass"
					var Description = "Takes a new snapshot of the current mass and inertia."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Material"
			var BaseClass = "DataResource"
			var Library = "GraphicsLibrary"
			var Description = "A composition of shader fragments that defines a shader program that is used when rendering Graphicals."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CompositionLabel"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ReferencedByList"
					var Type = "RenderGroupList"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SerializedList"
					var Type = "RenderGroupList"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates an anonymous copy that can be independently modified, destroyed when all references are gone."
					var ReturnType = "Material"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Math"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "E"
					var Type = "Real"
					var Description = "Euler's number."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Pi"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine"
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ACos"
					var Description = "The transcendental function arc-cosine Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine"
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ASin"
					var Description = "The transcendental function arc-sine Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan"
					var Description = "The transcendental function arc-tangent. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians."
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ATan2"
					var Description = "Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value."
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Abs"
					var Description = "Returns the absolute value of value. Performed component-wise."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AllNonZero"
					var Description = "Returns true if all values are true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Angle2D"
					var Description = "Computes the angle (in radians) about the z-axis between the vector and the x-axis."
					var ReturnType = "Real"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AngleBetween"
					var Description = "Returns the angle between two Quaternions in radians."
					var ReturnType = "Real"
					var Parameters = "(Quaternion, Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AngleBetween"
					var Description = "Returns the angle between two Real4s in radians."
					var ReturnType = "Real"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AngleBetween"
					var Description = "Returns the angle between two Real2s in radians."
					var ReturnType = "Real"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AngleBetween"
					var Description = "Returns the angle between two Real3s in radians."
					var ReturnType = "Real"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is true."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AnyNonZero"
					var Description = "Returns true if any value is not zero."
					var ReturnType = "Boolean"
					var Parameters = "(Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean3x2"
					var Parameters = "(Real3x2, Real3x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean4"
					var Parameters = "(Real4, Real4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean3x3"
					var Parameters = "(Real3x3, Real3x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean4x2"
					var Parameters = "(Real4x2, Real4x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean4x4"
					var Parameters = "(Real4x4, Real4x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean2"
					var Parameters = "(Real2, Real2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean2x2"
					var Parameters = "(Real2x2, Real2x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean3"
					var Parameters = "(Real3, Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean4x3"
					var Parameters = "(Real4x3, Real4x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean3x4"
					var Parameters = "(Real3x4, Real3x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean2x4"
					var Parameters = "(Real2x4, Real2x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other. Performed component-wise."
					var ReturnType = "Boolean2x3"
					var Parameters = "(Real2x3, Real2x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ApproximatelyEqual"
					var Description = "Checks if the two values are within epsilon distance from each other."
					var ReturnType = "Boolean"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "AxisAngle"
					var Description = "Generates the quaternion that rotates about the axis vector by the given radians."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Ceil"
					var Description = "Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x4, Integer3x4, Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4, Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4, Integer4x4, Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max."
					var ReturnType = "Real"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3, Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x2, Integer3x2, Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max."
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x3, Integer4x3, Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3, Integer3x3, Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2, Integer2x2, Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2, Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x2, Integer4x2, Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x3, Integer2x3, Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Clamp"
					var Description = "Limits the value between the provided min and max. Performed component-wise."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x4, Integer2x4, Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cos"
					var Description = "The transcendental function cosine. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cosh"
					var Description = "The hyperbolic cosine function. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input."
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CountBits"
					var Description = "Counts the number of bits set on the input. Performed component-wise."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cross"
					var Description = "2D cross product. Equivalent to Cross(Real3(0, 0, p0), Real3(p1.x, p1.y, 0))."
					var ReturnType = "Real2"
					var Parameters = "(Real, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cross"
					var Description = "2D cross product. Equivalent to Cross(Real3(p0.x, p0.y, 0), Real3(0, 0, p1))."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cross"
					var Description = "2D cross product. Equivalent to Cross(Real3(p0.x, p0.y, 0), Real3(p1.x, p1.y, 0))."
					var ReturnType = "Real"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Cross"
					var Description = "The vector cross product. Creates a new vector perpendicular to p0 and p1 using the right hand rule."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Determinant"
					var Description = "Computes the determinant of the given matrix"
					var ReturnType = "Real"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Determinant"
					var Description = "Computes the determinant of the given matrix"
					var ReturnType = "Real"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Determinant"
					var Description = "Computes the determinant of the given matrix"
					var ReturnType = "Real"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Distance"
					var Description = "Returns the distance between two points."
					var ReturnType = "Real"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Distance"
					var Description = "Returns the distance between two points."
					var ReturnType = "Real"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Distance"
					var Description = "Returns the distance between two points."
					var ReturnType = "Real"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "DistanceSq"
					var Description = "Returns the squared distance between two points."
					var ReturnType = "Real"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "DistanceSq"
					var Description = "Returns the squared distance between two points."
					var ReturnType = "Real"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "DistanceSq"
					var Description = "Returns the squared distance between two points."
					var ReturnType = "Real"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Dot"
					var Description = "The vector dot product"
					var ReturnType = "Real"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Dot"
					var Description = "The vector dot product"
					var ReturnType = "Real"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Dot"
					var Description = "The vector dot product"
					var ReturnType = "Real"
					var Parameters = "(Quaternion, Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Dot"
					var Description = "The vector dot product"
					var ReturnType = "Real"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Euler"
					var Description = "Generates the orientation from the given Euler angle vector"
					var ReturnType = "Quaternion"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp"
					var Description = "Returns the base-e exponentiation of value, which is e^value. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Exp2"
					var Description = "Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero)."
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FMod"
					var Description = "Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Floor"
					var Description = "Rounds value downward. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Frac"
					var Description = "Returns the fractional part of value, a value between 0 and 1. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateRotationMatrix2x2"
					var Description = "Generates a two-dimensional rotation matrix."
					var ReturnType = "Real2x2"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateRotationMatrix3x3"
					var Description = "Generates a three-dimensional rotation matrix."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateRotationMatrix3x3"
					var Description = "Generates a two-dimensional rotation matrix."
					var ReturnType = "Real3x3"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateRotationMatrix4x4"
					var Description = "Generates a three-dimensional rotation matrix."
					var ReturnType = "Real4x4"
					var Parameters = "(Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateScaleMatrix2x2"
					var Description = "Generates a two-dimensional scale matrix."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateScaleMatrix3x3"
					var Description = "Generates a three-dimensional scale matrix."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateScaleMatrix3x3"
					var Description = "Generates a two-dimensional scale matrix."
					var ReturnType = "Real3x3"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateScaleMatrix4x4"
					var Description = "Generates a three-dimensional scale matrix."
					var ReturnType = "Real4x4"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTransformMatrix2x2"
					var Description = "Generates a two-dimensional transform."
					var ReturnType = "Real2x2"
					var Parameters = "(Real, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTransformMatrix3x3"
					var Description = "Generates a three-dimensions transform."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTransformMatrix3x3"
					var Description = "Generates a three-dimensions transform."
					var ReturnType = "Real3x3"
					var Parameters = "(Quaternion, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTransformMatrix3x3"
					var Description = "Generates a two-dimensions transform."
					var ReturnType = "Real3x3"
					var Parameters = "(Real2, Real, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTransformMatrix4x4"
					var Description = "Generates a three-dimensional translation matrix."
					var ReturnType = "Real4x4"
					var Parameters = "(Real3, Quaternion, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTransformMatrix4x4"
					var Description = "Generates a three-dimensional translation matrix."
					var ReturnType = "Real4x4"
					var Parameters = "(Real3, Real3x3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTranslationMatrix3x3"
					var Description = "Generates a two-dimensional translation matrix."
					var ReturnType = "Real3x3"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "GenerateTranslationMatrix4x4"
					var Description = "Generates a three-dimensional translation matrix."
					var ReturnType = "Real4x4"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Invert"
					var Description = "Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible"
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Invert"
					var Description = "Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible"
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Invert"
					var Description = "Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible"
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Invert"
					var Description = "Returns the inverse rotation."
					var ReturnType = "Quaternion"
					var Parameters = "(Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Length"
					var Description = "The length of the vector."
					var ReturnType = "Real"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Length"
					var Description = "The length of the vector."
					var ReturnType = "Real"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Length"
					var Description = "The length of the vector."
					var ReturnType = "Real"
					var Parameters = "(Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Length"
					var Description = "The length of the vector."
					var ReturnType = "Real"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "LengthSq"
					var Description = "The squared length of the vector. Used to avoid a square root when possible."
					var ReturnType = "Real"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "LengthSq"
					var Description = "The squared length of the vector. Used to avoid a square root when possible."
					var ReturnType = "Real"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "LengthSq"
					var Description = "The squared length of the vector. Used to avoid a square root when possible."
					var ReturnType = "Real"
					var Parameters = "(Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "LengthSq"
					var Description = "The squared length of the vector. Used to avoid a square root when possible."
					var ReturnType = "Real"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end."
					var ReturnType = "Real"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Lerp"
					var Description = "Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log"
					var Description = "Base e logarithm. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log10"
					var Description = "Base 10 logarithm. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Log2"
					var Description = "Base 2 logarithm. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x4, Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4, Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x3, Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x2, Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3, Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x2, Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger."
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x4, Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x3, Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2, Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger."
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Max"
					var Description = "Returns whichever value is larger. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller."
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x2, Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4, Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x3, Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x4, Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller."
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x2, Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x4, Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3, Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2, Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x3, Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Min"
					var Description = "Returns whichever value is smaller. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2"
					var Parameters = "(Real2x3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3"
					var Parameters = "(Real3x3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x4, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4"
					var Parameters = "(Real4x3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x3, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x3, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4"
					var Parameters = "(Real4x2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x2, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3x3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x2, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3"
					var Parameters = "(Real3x4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x4, Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x4, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x4, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x2, Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x3, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x2, Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4x4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x4, Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4x3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3x4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x4, Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x3, Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x4, Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x3, Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x4, Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x3, Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4x2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x2, Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x4, Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x3, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4, Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3x2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3"
					var Parameters = "(Real3x2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x2, Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Creates a new rotation that represents rotating by parameter 2 and then parameter 1."
					var ReturnType = "Quaternion"
					var Parameters = "(Quaternion, Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Creates a new vector that represents parameter 2 being rotated by parameter 1."
					var ReturnType = "Real3"
					var Parameters = "(Quaternion, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x2, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x2, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2"
					var Parameters = "(Real2x2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x4, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x4, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2"
					var Parameters = "(Real2x4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3, Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x2, Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x3, Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x3, Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x2, Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2x2, Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2x4, Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x4, Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x4, Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2x3, Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x3, Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x3, Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x2, Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x2, Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2, Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4"
					var Parameters = "(Real4x4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x4, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x3, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x2, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x2, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x3, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Multiply"
					var Description = "Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x3, Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyNormal"
					var Description = "Multiplies the given vector as a vector (0 for the last component)"
					var ReturnType = "Real"
					var Parameters = "(Real2x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyNormal"
					var Description = "Multiplies the given vector as a vector (0 for the last component)"
					var ReturnType = "Real2"
					var Parameters = "(Real3x3, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyNormal"
					var Description = "Multiplies the given vector as a vector (0 for the last component)"
					var ReturnType = "Real3"
					var Parameters = "(Real4x4, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyPoint"
					var Description = "Multiplies the given vector as a point while performing the homogeneous division"
					var ReturnType = "Real2"
					var Parameters = "(Real3x3, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyPoint"
					var Description = "Multiplies the given vector as a point while performing the homogeneous division"
					var ReturnType = "Real"
					var Parameters = "(Real2x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyPoint"
					var Description = "Multiplies the given vector as a point while performing the homogeneous division"
					var ReturnType = "Real3"
					var Parameters = "(Real4x4, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyPointNoDivide"
					var Description = "Multiplies the given vector as a point without performing the homogeneous division"
					var ReturnType = "Real3"
					var Parameters = "(Real4x4, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyPointNoDivide"
					var Description = "Multiplies the given vector as a point without performing the homogeneous division"
					var ReturnType = "Real2"
					var Parameters = "(Real3x3, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "MultiplyPointNoDivide"
					var Description = "Multiplies the given vector as a point without performing the homogeneous division"
					var ReturnType = "Real"
					var Parameters = "(Real2x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Normalize"
					var Description = "Returns a vector that points in the same direction but has a length of 1."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Normalize"
					var Description = "Returns a vector that points in the same direction but has a length of 1."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Normalize"
					var Description = "Returns a vector that points in the same direction but has a length of 1."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Normalize"
					var Description = "Returns a unit quaternion that represents a pure rotation."
					var ReturnType = "Quaternion"
					var Parameters = "(Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent."
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Pow"
					var Description = "Returns base raised to the power of the exponent. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Project"
					var Description = "Projects the input vector onto the given normalized vector. Note: This function is legacy. Instead call ProjectOnVector."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ProjectOnPlane"
					var Description = "Projects the input vector onto plane defined by the given normal."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ProjectOnPlane"
					var Description = "Projects the input vector onto plane defined by the given normal."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ProjectOnPlane"
					var Description = "Projects the input vector onto plane defined by the given normal."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ProjectOnVector"
					var Description = "Projects the input vector onto the given normalized vector."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ProjectOnVector"
					var Description = "Projects the input vector onto the given normalized vector."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ProjectOnVector"
					var Description = "Projects the input vector onto the given normalized vector."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RSqrt"
					var Description = "Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReflectAcrossPlane"
					var Description = "Reflects the input vector across the plane defined by the given normal."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReflectAcrossPlane"
					var Description = "Reflects the input vector across the plane defined by the given normal."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReflectAcrossPlane"
					var Description = "Reflects the input vector across the plane defined by the given normal."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReflectAcrossVector"
					var Description = "Reflects the input vector across the given vector."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReflectAcrossVector"
					var Description = "Reflects the input vector across the given vector."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ReflectAcrossVector"
					var Description = "Reflects the input vector across the given vector."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Refract"
					var Description = "Calculates the refraction vector through a plane given a certain index of refraction."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Refract"
					var Description = "Calculates the refraction vector through a plane given a certain index of refraction."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Refract"
					var Description = "Calculates the refraction vector through a plane given a certain index of refraction."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RotateTowards"
					var Description = "Rotate a vector towards another vector changing at most maxRadians."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RotateTowards"
					var Description = "Rotate a quaternion towards another quaternion changing at most maxRadians."
					var ReturnType = "Quaternion"
					var Parameters = "(Quaternion, Quaternion, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RotateTowards"
					var Description = "Rotate a vector towards another vector changing at most maxRadians."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RotateVector"
					var Description = "Rotate a vector about an axis by the given radians."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RotationQuaternionBetween"
					var Description = "Generates the quaternion that rotates from parameter 1 to parameter 2."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Round"
					var Description = "Returns the integer value closest to value."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1"
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Saturate"
					var Description = "Limits the value between 0 and 1 Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1."
					var ReturnType = "Integer"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1."
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sign"
					var Description = "Returns the sign of the value as either 1 or -1. Performed component-wise."
					var ReturnType = "Integer3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SignedAngle"
					var Description = "Get the rotation angle between two vectors in radians."
					var ReturnType = "Real"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sin"
					var Description = "The transcendental function sine. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sinh"
					var Description = "The hyperbolic sine function. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Slerp"
					var Description = "Spherical linear interpolation. Used to interpolate between two vectors by the parameter t."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Slerp"
					var Description = "Spherical linear interpolation. Used to interpolate between two rotations by the parameter t."
					var ReturnType = "Quaternion"
					var Parameters = "(Quaternion, Quaternion, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Slerp"
					var Description = "Spherical linear interpolation. Used to interpolate between two vectors by the parameter t."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max."
					var ReturnType = "Real"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SmoothStep"
					var Description = "Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root"
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Sqrt"
					var Description = "Computes the square root Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned."
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Step"
					var Description = "If y < x then 0 is returned, otherwise 1 is returned. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tan"
					var Description = "The transcendental function tangent. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Tanh"
					var Description = "The hyperbolic tangent function. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToDegrees"
					var Description = "Converts the given radians to degrees. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToQuaternion"
					var Description = "Converts a rotation matrix into a quaternion."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToQuaternion"
					var Description = "Generates the orientation represented by the given facing, up, and right vectors."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToQuaternion"
					var Description = "Generates the orientation from the given Euler angles."
					var ReturnType = "Quaternion"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToQuaternion"
					var Description = "Generates the orientation represented by the given facing and up vectors."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToQuaternion"
					var Description = "Generates the quaternion that rotates about the axis vector by the given radians."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToQuaternion"
					var Description = "Generates the orientation from the given Euler angle vector"
					var ReturnType = "Quaternion"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToRadians"
					var Description = "Converts the given degrees to radians. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToReal3x3"
					var Description = "Generates the orientation represented by the given facing and up vectors."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToReal3x3"
					var Description = "Generates the three dimensional rotation matrix that rotates about 'axis' by 'radians'."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToReal3x3"
					var Description = "Converts a quaternion into a rotation matrix."
					var ReturnType = "Real3x3"
					var Parameters = "(Quaternion)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToReal3x3"
					var Description = "Generates the orientation from the given Euler angles."
					var ReturnType = "Real3x3"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ToReal3x3"
					var Description = "Generates the orientation represented by the given facing, up, and right vectors."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3, Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean2x2"
					var Parameters = "(Boolean2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real3x2"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean4x4"
					var Parameters = "(Boolean4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean2x4"
					var Parameters = "(Boolean4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean4x3"
					var Parameters = "(Boolean3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean4x2"
					var Parameters = "(Boolean2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean2x3"
					var Parameters = "(Boolean3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean3x3"
					var Parameters = "(Boolean3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean3x4"
					var Parameters = "(Boolean4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer2x2"
					var Parameters = "(Integer2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real4x2"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real2x4"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer4x2"
					var Parameters = "(Integer2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real4x3"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real2x3"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer3x4"
					var Parameters = "(Integer4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer2x4"
					var Parameters = "(Integer4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer3x2"
					var Parameters = "(Integer2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer4x4"
					var Parameters = "(Integer4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real3x4"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer4x3"
					var Parameters = "(Integer3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer3x3"
					var Parameters = "(Integer3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Integer2x3"
					var Parameters = "(Integer3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Transpose"
					var Description = "Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j]"
					var ReturnType = "Boolean3x2"
					var Parameters = "(Boolean2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Boolean2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero."
					var ReturnType = "Real"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x3"
					var Parameters = "(Real2x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real4x2"
					var Parameters = "(Real4x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real3x2"
					var Parameters = "(Real3x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc)."
					var ReturnType = "Real"
					var Parameters = "(Real, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2"
					var Parameters = "(Real2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x3"
					var Parameters = "(Real4x3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real3"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4"
					var Parameters = "(Real4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x2"
					var Parameters = "(Real2x2, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x2"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real2x4"
					var Parameters = "(Real2x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real2x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. Performed component-wise."
					var ReturnType = "Real3x4"
					var Parameters = "(Real3x4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real3x3"
					var Parameters = "(Real3x3, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3x3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Truncate"
					var Description = "Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise."
					var ReturnType = "Real4x4"
					var Parameters = "(Real4x4, Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4x4"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Member"
			var BaseClass = "ReflectionObject"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "IsStatic"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Library"
					var Type = "ZilchLibrary"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Owner"
					var Type = "BoundType"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Type"
					var Type = "Type"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MemberRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MemberRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Member"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Members"
			var BaseClass = "Enum"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Extension"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Inherited"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "InheritedInstance"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "InheritedInstanceStatic"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "InheritedStatic"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Instance"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "InstanceStatic"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Static"
					var Type = "Members"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MemoryLeakEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Mesh"
			var BaseClass = "Resource"
			var Library = "GraphicsLibrary"
			var Description = "Data that represents a mesh in the way that is intended to be used by graphics hardware."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Indices"
					var Type = "IndexBuffer"
					var Description = "Indices used to define non-sequential primitive construction from vertices, such as shared vertices."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PrimitiveType"
					var Type = "PrimitiveType"
					var Description = "The type of primitives to be made with the vertex data."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Vertices"
					var Type = "VertexBuffer"
					var Description = "Vertex data and attribute semantics for defining data that can be uploaded to the gpu."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Makes an anonymous Mesh resource that can be defined by script and uploaded to the gpu."
					var ReturnType = "Mesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Upload"
					var Description = "Upload vertex buffer and index buffer data to the gpu."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Upload"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MeshCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines the collision for a generic mesh from a collection of triangles ( PhysicsMesh resource). This collider type is not expected to have a dynamic or kinematic RigidBody."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DrawEdges"
					var Type = "Boolean"
					var Description = "Whether to debug draw the edges of each triangle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DrawFaceNormals"
					var Type = "Boolean"
					var Description = "Whether to debug draw the normals of each triangle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DrawFaces"
					var Type = "Boolean"
					var Description = "Whether to debug draw the faces of each triangle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PhysicsMesh"
					var Type = "PhysicsMesh"
					var Description = "The mesh resource used to define collision. This mesh is just a surface mesh of triangles (no volume is defined)."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MeshParticleEmitter"
			var BaseClass = "ParticleEmitterShared"
			var Library = "GraphicsLibrary"
			var Description = "Emits particles on a mesh surface."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "Mesh"
					var Description = "Mesh used for this Model."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MeshEmitMode"
					var Type = "MeshEmitMode"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NormalExtrude"
					var Type = "Real"
					var Description = "Moved the spawn position along the normal scaled by this amount."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MetaDropEvent"
			var BaseClass = "Event"
			var Library = "EditorLibrary"
			var Description = "MetaDropEvent for dropping MetaObjects."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Failed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Handled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MouseEvent"
					var Type = "MouseEvent"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "MouseOverObject"
					var Type = "AnyHandle"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "AnyHandle"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Result"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Testing"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewportMouseEvent"
					var Type = "ViewportMouseEvent"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MidiEvent"
			var BaseClass = "Event"
			var Library = "SoundLibrary"
			var Description = "Sent when a MIDI message is received from a connected device."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Channel"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MIDINumber"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Value"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Model"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Renders a mesh."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "Mesh"
					var Description = "Mesh that the graphical will render."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ModulationNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies either ring or amplitude modulation to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Frequency"
					var Type = "Real"
					var Description = "The frequency of the sine wave used for the modulation."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseAmplitudeModulation"
					var Type = "Boolean"
					var Description = "If this property is true, the node will apply amplitude modulation (multiply the audio input with a unipolar sine wave with values from 0.0 to 1.0). If false, the node will apply ring modulation (multiply the input with a bipolar sine wave with values from -1.0 to 1.0)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WetPercent"
					var Type = "Real"
					var Description = "The percentage of the input which should have the modulation applied to it."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Mouse"
			var BaseClass = "EventObject"
			var Library = "EngineLibrary"
			var Description = "Mouse object for Display System."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ClientPosition"
					var Type = "Real2"
					var Description = "The position of the mouse cursor relative to the application's top-left corner in pixels."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Cursor"
					var Type = "Cursor"
					var Description = "Set the cursor of the mouse."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CursorMovement"
					var Type = "Real2"
					var Description = "The movement of the mouse in pixels."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RawMovement"
					var Type = "Real2"
					var Description = "High precision raw movement of the mouse."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Trapped"
					var Type = "Boolean"
					var Description = "Trap the mouse preventing it from moving."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "IsButtonDown"
					var Description = "Is a mouse button currently down?"
					var ReturnType = "Boolean"
					var Parameters = "(MouseButtons button)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "button"
							var Type = "MouseButtons"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToggleTrapped"
					var Description = "Toggles if the mouse is currently trapped."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MouseCapture"
			var BaseClass = "Component"
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Capture"
					var Description = "Starts the mouse manipulation. All mouse events will now only go to the owner of this Component. Returns whether or not the manipulation can be started."
					var ReturnType = "Boolean"
					var Parameters = "(ViewportMouseEvent e)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "e"
							var Type = "ViewportMouseEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsCaptured"
					var Description = "Returns whether or not this has an active mouse capture."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReleaseCapture"
					var Description = "Releases the mouse manipulation."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MouseEvent"
			var BaseClass = "Event"
			var Library = "WidgetLibrary"
			var Description = "Mouse events for any every with the mouse."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AltPressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Button"
					var Type = "MouseButtons"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ButtonDown"
					var Type = "Boolean"
					var Description = "State of all the mouse buttons."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CtrlPressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HandledEvent"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Mouse"
					var Type = "Mouse"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Movement"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Position"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Scroll"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShiftPressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "IsButtonUp"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(MouseButtons button)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "button"
							var Type = "MouseButtons"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MultiConvexMesh"
			var BaseClass = "Resource"
			var Library = "PhysicsLibrary"
			var Description = "Represents a collection of convex meshes that was decomposed from a mesh."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Modified"
					var Type = "Boolean"
					var Description = "Is the resource currently modified?"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SubMeshes"
					var Type = "MultiConvexMeshSubMeshData"
					var Description = "A collection of sub-convex meshes."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Valid"
					var Type = "Boolean"
					var Description = "Is the resource correctly setup? Typically involves a mis-match in indices and vertices."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Vertices"
					var Type = "MultiConvexMeshVertexData"
					var Description = "The vertex buffer data of this mesh."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Creates a MultiConvexMesh for run-time modifications."
					var ReturnType = "MultiConvexMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates a clone of this mesh for run-time modifications."
					var ReturnType = "MultiConvexMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UpdateAndNotifyIfModified"
					var Description = "Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Validate"
					var Description = "Check if the mesh is valid. Optionally throw a script exception if it is invalid."
					var ReturnType = "Boolean"
					var Parameters = "(Boolean throwExceptionIfInvalid)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "throwExceptionIfInvalid"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Mesh"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MultiConvexMeshCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines a collection of sub-convex meshes. This allows a non-convex object to be broken up into several convex pieces for efficient collision detection and use with rigid bodies."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "MultiConvexMesh"
					var Description = "The MultiConvexMesh resource that defines collision."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MultiConvexMeshIndexData"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MultiConvexMeshIndexRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MultiConvexMeshPropertyViewInfo"
			var BaseClass = "EventObject"
			var Library = "EditorLibrary"
			var Description = "Structure bound to the property view for the main editor. Contains the different settings that the user can modify."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoComputeMethod"
					var Type = "MultiConvexMeshAutoComputeMethod"
					var Description = "What method of auto-computing should be used? Most likely 'pixel' is the mode that should be used."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AutoComputeMode"
					var Type = "MultiConvexMeshAutoComputeMode"
					var Description = "Should the auto-computed mesh be calculated from the alpha or the intensity of the sprite?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ClearColor"
					var Type = "Real4"
					var Description = "The clear color of the viewport used to render."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DrawMode"
					var Type = "MultiConvexMeshDrawMode"
					var Description = "How should the collection of meshes be drawn?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MeshThickness"
					var Type = "Real"
					var Description = "Since the mesh is on a 2d plane, they need some thickness for their z-depth. This controls how thick the meshes are."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OuterContourColor"
					var Type = "Real4"
					var Description = "The color to draw edges with."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SimplificationThreshold"
					var Type = "Real"
					var Description = "A threshold to control when vertices should be removed (simplified). This value is related to the area of a triangle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = "The sprite source used as a reference for drawing the mesh. Note: this is not always what's visible as the user can drag in archetypes to view as well."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SurfaceLevelThreshold"
					var Type = "Real"
					var Description = "When the sprite is sampled using the AutoComputeMode, what value should be used to determine where a surface is."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AutoCompute"
					var Description = "Resets the points of the mesh to an approximation for the current sprite."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MultiConvexMeshSubMeshData"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MultiConvexMeshSubMeshRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = "Create and add a new SubConvexMesh. Returns the new mesh for modification."
					var ReturnType = "SubConvexMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clears all sub-meshes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "SubConvexMesh"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAt"
					var Description = "Remove the sub-mesh at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer arrayIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "arrayIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MultiConvexMeshVertexData"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "MultiConvexMeshVertexRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "MultiPrimitive"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetChannel"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Channel Manages the replication of a set of properties on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Authority"
					var Type = "Authority"
					var Description = "Controls which peer has the authority to observe and replicate property changes (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ChangeFlag"
					var Type = "Boolean"
					var Description = "Manual change flag (checked upon manual change observation)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IsNapping"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsScheduled"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LastChangeTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net channel was last changed, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LastChangeTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net channel was last changed, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = "Net channel name."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetChannelType"
					var Type = "NetChannelType"
					var Description = "Operating net channel type."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetNetProperty"
					var Description = "[Client/Server] Returns the specified net property, else nullptr"
					var ReturnType = "NetProperty"
					var Parameters = "(Component component, String propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "HasNetProperty"
					var Description = "[Client/Server] Returns true if the net object has the specified net property, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Component component, String propertyName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "component"
							var Type = "Component"
							var Description = ""
						}
						Parameter
						{
							var Name = "propertyName"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReplicateNow"
					var Description = "Replicates net property changes immediately (only if changes are detected) Will also update nap state as configured Returns true if changes were replicated, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TakeNap"
					var Description = "Forces the net channel to start napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WakeUp"
					var Description = "Forces the net channel to stop napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetChannelConfig"
			var BaseClass = "DataResource"
			var Library = "NetworkingLibrary"
			var Description = "Network Channel Configuration Defines a configuration for the replication of a set of properties on the network."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcceptIncomingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should accept incoming changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AccurateTimestampOnChange"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AllowNapping"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AllowRelay"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AuthorityDefault"
					var Type = "Authority"
					var Description = "Controls which peer has the authority to observe and replicate property changes on each net channel by default (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AuthorityMode"
					var Type = "AuthorityMode"
					var Description = "Controls when net channels can modify their change authority (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AwakeDetectionInterval"
					var Type = "Integer"
					var Description = "Controls the frame interval in which awake net channels are observed for changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AwakeDuration"
					var Type = "Integer"
					var Description = "Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DetectOutgoingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should detect outgoing changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DetectionMode"
					var Type = "DetectionMode"
					var Description = "Controls how net channel changes are detected (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EventOnIncomingPropertyChange"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EventOnOutgoingPropertyChange"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NapDetectionInterval"
					var Type = "Integer"
					var Description = "Controls the frame interval in which napping net channels are observed for changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReliabilityMode"
					var Type = "ReliabilityMode"
					var Description = "Controls whether or not net channel changes will be retransmitted should they get lost over the network (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReplicateOnOffline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will be replicated when the net object goes offline If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReplicateOnOnline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will be replicated when the net object comes online If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SerializationMode"
					var Type = "SerializationMode"
					var Description = "Controls how net channels are serialized (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TransferMode"
					var Type = "TransferMode"
					var Description = "Controls how net channel changes are to be ordered and released once received (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably)"
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetChannelPropertyChange"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after an outgoing/incoming net channel property change is detected during a particular replication phase."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ChannelName"
					var Type = "String"
					var Description = "The changed net object."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ComponentName"
					var Type = "String"
					var Description = "The changed net channel."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Direction"
					var Type = "TransmissionDirection"
					var Description = "The replication phase."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = "The change direction."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PropertyName"
					var Type = "String"
					var Description = "The component which declared the changed net property."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ReplicationPhase"
					var Type = "ReplicationPhase"
					var Description = "The time this change occurred."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Timestamp"
					var Type = "Real"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetChannelType"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Channel Type Configures the replication of a set of properties on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcceptIncomingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should accept incoming changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AccurateTimestampOnChange"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AllowNapping"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AllowRelay"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AuthorityDefault"
					var Type = "Authority"
					var Description = "Controls which peer has the authority to observe and replicate property changes on each net channel by default (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AuthorityMode"
					var Type = "AuthorityMode"
					var Description = "Controls when net channels can modify their change authority (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online) (Cannot be modified at game runtime)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AwakeDetectionInterval"
					var Type = "Integer"
					var Description = "Controls the frame interval in which awake net channels are observed for changes (Cannot be modified at game runtime)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AwakeDuration"
					var Type = "Integer"
					var Description = "Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DetectOutgoingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should detect outgoing changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DetectionMode"
					var Type = "DetectionMode"
					var Description = "Controls how net channel changes are detected (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EventOnIncomingPropertyChange"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EventOnOutgoingPropertyChange"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = "Net channel type name."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NapDetectionInterval"
					var Type = "Integer"
					var Description = "Controls the frame interval in which napping net channels are observed for changes (Cannot be modified at game runtime)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReliabilityMode"
					var Type = "ReliabilityMode"
					var Description = "Controls whether or not net channel changes will be retransmitted should they get lost over the network (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReplicateOnOffline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will be replicated when the net object goes offline If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event (Cannot be modified at game runtime)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReplicateOnOnline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net channel will be replicated when the net object comes online If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event (Cannot be modified at game runtime)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SerializationMode"
					var Type = "SerializationMode"
					var Description = "Controls how net channels are serialized (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between) (Cannot be modified at game runtime)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TransferMode"
					var Type = "TransferMode"
					var Description = "Controls how net channel changes are to be ordered and released once received (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably) (Cannot be modified at game runtime)"
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ResetConfig"
					var Description = "Resets all configuration settings."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetConfig"
					var Description = "Sets all configuration settings according to the specified NetChannelConfig resource."
					var ReturnType = "Void"
					var Parameters = "(NetChannelConfig netChannelConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelConfig"
							var Type = "NetChannelConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetEventReceived"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched before a received net event is dispatched."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Destination"
					var Type = "Cog"
					var Description = "Network event received."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetEvent"
					var Type = "Event"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ReturnAllow"
					var Type = "Boolean"
					var Description = "Dispatch destination object (null if the net object could not be found locally)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetEventSent"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after a dispatched net event is sent."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Destination"
					var Type = "Cog"
					var Description = "Network event sent."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetEvent"
					var Type = "Event"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetGameStarted"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after fully joining or hosting a network game."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetHost"
			var BaseClass = "SafeId32"
			var Library = "NetworkingLibrary"
			var Description = "Describes a network host."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BasicHostInfo"
					var Type = "EventBundle"
					var Description = "Round trip time (from our peer to this host)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ExtraHostInfo"
					var Type = "EventBundle"
					var Description = "Basic host info (limited to 480 bytes)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IpAddress"
					var Type = "IpAddress"
					var Description = "Host's network residence."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Latency"
					var Type = "Integer"
					var Description = "Returns the estimated latency ((RTT/2)) in milliseconds from our peer to this host."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Network"
					var Type = "Network"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RoundTripTime"
					var Type = "Integer"
					var Description = "Returns the round-trip time (RTT) in milliseconds from our peer to this host."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetHostListUpdate"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when a host discovery operation update occurs."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Network"
					var Type = "Network"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetHostRecord"
			var BaseClass = "SafeId32"
			var Library = "NetworkingLibrary"
			var Description = "NetHostRecord A record that contains the basic information of a game server. After a certain lifetime records expire on the master server."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BasicHostInfo"
					var Type = "EventBundle"
					var Description = "The IpAddress associated with this record. This is who published it."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IpAddress"
					var Type = "IpAddress"
					var Description = "How long has this record been alive in seconds?"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Lifetime"
					var Type = "Real"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetHostRecordEvent"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when a NetHostRecord is discovered, Updated, or Expired."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "HostRecord"
					var Type = "NetHostRecord"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetHostUpdate"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched when a host discovery operation update occurs."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Host"
					var Type = "NetHost"
					var Description = "Operation target network."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Network"
					var Type = "Network"
					var Description = "Operation response time (from request to completion)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RefreshResult"
					var Type = "NetRefreshResult"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ResponseTime"
					var Type = "Real"
					var Description = "Whether or not the operation completed successfully."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetLevelStarted"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after fully loading and synchronizing a level in a net space."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LevelName"
					var Type = "String"
					var Description = "Network space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "Network game session."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetLinkConnected"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending or receiving a connect confirmation."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "TransmissionDirection"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetLinkDisconnected"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending or receiving a disconnect notice Their net peer ID is released and link is destroyed immediately after this."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "TransmissionDirection"
					var Description = "Bundled request event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "DisconnectReason"
					var Type = "DisconnectReason"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RequestBundle"
					var Type = "EventBundle"
					var Description = "Disconnect reason."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetObject"
			var BaseClass = "Component"
			var Library = "NetworkingLibrary"
			var Description = "Network Object Manages the replication of a single object on the network."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcceptIncomingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels on this net object may accept incoming changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AccurateTimestampOnChange"
					var Type = "Boolean"
					var Description = "Controls whether or not the net object will serialize an accurate timestamp value when changed (on any net channel), or will instead accept an estimated timestamp value (Enabling this will override the corresponding net channel type setting for all net channels added to this net object)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AccurateTimestampOnOffline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net object will serialize an accurate timestamp value when taken offline, or will instead accept an estimated timestamp value."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AccurateTimestampOnOnline"
					var Type = "Boolean"
					var Description = "Controls whether or not the net object will serialize an accurate timestamp value when brought online, or will instead accept an estimated timestamp value."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AllowNapping"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels on this net object may nap (perform change detection on longer intervals) if they haven't changed in a while."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AutomaticChannel"
					var Type = "NetChannelConfig"
					var Description = "Returns the automatic net channel configuration resource (assigned to net properties unless another channel is specified)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DetectOutgoingChanges"
					var Type = "Boolean"
					var Description = "Controls whether or not net channels on this net object may detect outgoing changes."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IsClient"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsClientAndMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsClientButNotMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsClientOrOffline"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsClientOrServer"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNapping"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotOwnedByAUser"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsOffline"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsOfflineAndMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsOfflineButNotMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsOnline"
					var Type = "Boolean"
					var Description = "[Client/Server] Family tree ID this net object belongs to (either as an ancestor or descendant)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsOwnedByAUser"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsServer"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsServerAndMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsServerButNotMine"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsServerOrOffline"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LastChangeTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net object was last changed, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LastChangeTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net object was last changed, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetObjectId"
					var Type = "Integer"
					var Description = "Returns the net object ID (set if the net object is live), else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetPropertyInfos"
					var Type = "NetPropertyInfos"
					var Description = "Automatic net channel configuration resource applied to net properties by default."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NetUserOwner"
					var Type = "Cog"
					var Description = "Returns the network user this object conceptually belongs to, else nullptr."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NetUserOwnerPeerId"
					var Type = "Integer"
					var Description = "Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetUserOwnerUserId"
					var Type = "Integer"
					var Description = "Returns the network user identifier of the user this object conceptually belongs to, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OfflineTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net object was taken offline, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OfflineTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net object was taken offline, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OnlineTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net object was brought online, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OnlineTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net object was brought online, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Role"
					var Type = "NetRole"
					var Description = "Returns our open peer's network role (client, server, offline), else Role::Unspecified."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DispatchBroadcast"
					var Description = "Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cog"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchLocal"
					var Description = "Dispatches the net event on the net object for the local peer."
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cog"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchLocalAndBroadcast"
					var Description = "Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cog"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchLocalAndRemote"
					var Description = "Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event, Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Cog"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchRemote"
					var Description = "Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only."
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event event, Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "Event"
							var Description = ""
						}
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Forget"
					var Description = "[Client] Forgets the online net object locally [Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetNetChannel"
					var Description = "[Client/Server] Returns the specified net channel, else nullptr"
					var ReturnType = "NetChannel"
					var Parameters = "(String netChannelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelName"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "HasNetChannel"
					var Description = "[Client/Server] Returns true if the net object has the specified net channel, else false"
					var ReturnType = "Boolean"
					var Parameters = "(String netChannelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netChannelName"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsOwnedByPeer"
					var Description = "Returns true if the net object is conceptually owned by a user added by the specified peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsOwnedByUser"
					var Description = "Returns true if the net object is conceptually owned by the specified user, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReplicateNow"
					var Description = "[Client/Server] Replicates all net channels' property changes immediately (only where changes are detected) Will also update nap state as configured Returns true if changes were replicated, else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SelectRemote"
					var Description = "[Client/Server] Selects the remote net object on the first opposite-role peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false"
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetNetUserOwnerDown"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetNetUserOwnerUp"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TakeNap"
					var Description = "Forces all net channels on this net object to start napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WakeUp"
					var Description = "Forces all net channels on this net object to stop napping immediately."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetObjectOffline"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched before the net object is taken offline."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEndOfLifespan"
					var Type = "Boolean"
					var Description = "Network object."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = "Network space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "Network game session."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetObjectOnline"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net object is brought online."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GameSession"
					var Type = "GameSession"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsStartOfLifespan"
					var Type = "Boolean"
					var Description = "Network object."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Object"
					var Type = "Cog"
					var Description = "Network space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Space"
					var Type = "Space"
					var Description = "Network game session."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeer"
			var BaseClass = "NetObject"
			var Library = "NetworkingLibrary"
			var Description = "Network Peer Acts as a host on the network Manages network object state and event replication."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BasicHostInfoTimeout"
					var Type = "Real"
					var Description = "[Client/Server] Determines the amount of time the client is willing to wait to get a host list from master server."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ExtraHostInfoTimeout"
					var Type = "Real"
					var Description = "[Client/Server] Determines the amount of time the client is willing to wait for"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FrameFillSkip"
					var Type = "Real"
					var Description = "Controls when to skip change replication for the current frame because of remaining outgoing bandwidth utilization ratio on any given link."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FrameFillWarning"
					var Type = "Real"
					var Description = "Controls when the user will be warned of their current frame's outgoing bandwidth utilization ratio on any given link."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HostPingInterval"
					var Type = "Real"
					var Description = "[Client/Server] Determines the amount of time the client will wait for extra host info from a server."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HostPortRangeEnd"
					var Type = "Integer"
					var Description = "Configures the inclusive range of ports used to host this game."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HostPortRangeStart"
					var Type = "Integer"
					var Description = "Configures the peer to use connection facilitation (NAT punchthrough) when establishing a connection over the internet."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InternetDiscoverable"
					var Type = "Boolean"
					var Description = "Configures the server peer to be discoverable on the local area network."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InternetHostListTimeout"
					var Type = "Real"
					var Description = "[Server] how much time has elapsed since it last published a record"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InternetHostPublishInterval"
					var Type = "Real"
					var Description = "Configures the inclusive range of ports used to host this game."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InternetHostRecordLifetime"
					var Type = "Real"
					var Description = "Ping managers need an id to be unique. We use this to prescribe unique ids."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InternetSameIpHostRecordLimit"
					var Type = "Integer"
					var Description = "Controls the lifetime of every host record stored on the master server."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Ipv4Address"
					var Type = "IpAddress"
					var Description = "Returns the peer's local IPv4 address, else IpAddress() Set if the peer is open with an IPv4 socket."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Ipv4Host"
					var Type = "String"
					var Description = "Returns the peer's local IPv4 address host as a numeric address string, else String()"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Ipv4Port"
					var Type = "Integer"
					var Description = "Returns the peer's local IPv4 address port, else String()"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Ipv6Address"
					var Type = "IpAddress"
					var Description = "Returns the peer's local IPv6 address, else IpAddress() Set if the peer is open with an IPv6 socket."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Ipv6Host"
					var Type = "String"
					var Description = "Returns the peer's local IPv6 address host as a numeric address string, else String()"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Ipv6Port"
					var Type = "Integer"
					var Description = "Returns the peer's local IPv6 address port, else String()"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsOpen"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LanDiscoverable"
					var Type = "Boolean"
					var Description = "[Client] Active cog initializer, determines replica stream context (used temporarily during net object creation)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LinkCount"
					var Type = "Integer"
					var Description = "[Client/Server] Returns the number of connected network links managed by this peer"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetObjectCount"
					var Type = "Integer"
					var Description = "Returns the number of net objects in this game session (but not including the net peer itself)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetPeerId"
					var Type = "Integer"
					var Description = "Returns the open peer's unique network identifier, else 0 [Server/Offline] This will always be zero [Client] This will be non-zero once connected to a server, else zero."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetSpaceCount"
					var Type = "Integer"
					var Description = "Returns the number of net spaces in this game session."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetUserCount"
					var Type = "Integer"
					var Description = "Returns the number of net users in this game session."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "UserCount"
					var Type = "Integer"
					var Description = "Returns the number of added network users."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Users"
					var Type = "NetUserRange"
					var Description = "Returns all added network users."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "UsersAddedByMyPeer"
					var Type = "NetUserRange"
					var Description = "Returns the network users added by our local peer."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddUser"
					var Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddUser"
					var Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddUser"
					var Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false."
					var ReturnType = "Boolean"
					var Parameters = "(EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CancelHostRequests"
					var Description = "Cancels all host discovery and refresh requests currently in progress (the operations will be considered unsuccessful) Listen to the NetHost event interface to handle the results."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearHostList"
					var Description = "Clears the given network's host list."
					var ReturnType = "Void"
					var Parameters = "(Network network)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearHostLists"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Close"
					var Description = "Closes the peer (safe to call multiple times)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ConnectLink"
					var Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(IpAddress ipAddress, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ConnectLink"
					var Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ConnectLink"
					var Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(IpAddress ipAddress, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectAllLinks"
					var Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected"
					var ReturnType = "Integer"
					var Parameters = "(EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectAllLinks"
					var Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected"
					var ReturnType = "Integer"
					var Parameters = "(Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectAllLinks"
					var Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected"
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(IpAddress ipAddress, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(IpAddress ipAddress, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Integer netPeerId, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Integer netPeerId, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DisconnectLink"
					var Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false"
					var ReturnType = "Boolean"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DiscoverHostList"
					var Description = "Discovers the given network's host list. Listen to the NetHost event interface to handle the results Returns true if the discovery was successfully started, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Network network, Boolean removeStaleHosts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "removeStaleHosts"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetHostByAddress"
					var Description = ""
					var ReturnType = "NetHost"
					var Parameters = "(IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetHostByAddress"
					var Description = ""
					var ReturnType = "NetHost"
					var Parameters = "(Network network, IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetHostByIndex"
					var Description = "Returns the first equivalent host found in the given network's host list, else nullptr."
					var ReturnType = "NetHost"
					var Parameters = "(Network network, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetHostList"
					var Description = "Returns the given network's host list."
					var ReturnType = "NetHostRange"
					var Parameters = "(Network network)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLinkCreationDirection"
					var Description = "[Client/Server] Returns the direction in which the link was created (which peer initiated the connection), else TransmissionDirection::Unspecified"
					var ReturnType = "TransmissionDirection"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLinkInternetProtocol"
					var Description = "[Client/Server] Returns the link's IP address protocol version, else InternetProtocol::Unspecified This IP address protocol will never change for the lifetime of this link"
					var ReturnType = "InternetProtocol"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLinkIpAddress"
					var Description = "[Client/Server] Returns the remote peer's IP address (as seen from our perspective), else IpAddress() For outgoing links this is the same IP address specified in our connect call This IP address will never change for the lifetime of this link"
					var ReturnType = "IpAddress"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLinkNetPeerId"
					var Description = "Returns the remote peer's unique network identifier, else 0 [Server] This will be non-zero if the client is connected, else zero [Client] This will always be zero."
					var ReturnType = "Integer"
					var Parameters = "(IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLinkState"
					var Description = "[Client/Server] Returns the link's specific state, else LinkState::Unspecified"
					var ReturnType = "LinkState"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLinkStatus"
					var Description = "[Client/Server] Returns the link's overall status, else LinkStatus::Unspecified"
					var ReturnType = "LinkStatus"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetNetObject"
					var Description = "Returns the live net object specified if it is known locally, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(Integer netObjectId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netObjectId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "NetPeer"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "GetNetSpace"
					var Description = "Returns the live net space specified if it is known locally, else nullptr."
					var ReturnType = "Space"
					var Parameters = "(Integer netObjectId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netObjectId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetOurIpAddressFromLink"
					var Description = "[Client/Server] Returns our peer's IP address (as seen from their perspective), else IpAddress() For incoming links this is the same IP address specified in their connect call (Available if the link is connected or incoming and attempting connection) It is absolutely possible that this does not match our local IP address"
					var ReturnType = "IpAddress"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetUser"
					var Description = "Returns the specified network user, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(Integer netUserId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netUserId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetUsersAddedByPeer"
					var Description = "Returns the network users added by the specified peer."
					var ReturnType = "NetUserRange"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Open"
					var Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(NetRole role)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "role"
							var Type = "NetRole"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Open"
					var Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(NetRole role, Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "role"
							var Type = "NetRole"
							var Description = ""
						}
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Open"
					var Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false."
					var ReturnType = "Boolean"
					var Parameters = "(NetRole role, Integer port, Integer retries)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "role"
							var Type = "NetRole"
							var Description = ""
						}
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "retries"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "OpenClient"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "OpenClient"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "OpenClient"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer port, Integer retries)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "retries"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "OpenOffline"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "OpenServer"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "OpenServer"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RefreshHost"
					var Description = "Refreshes the specified host in the given network's host list. Allowing discovery will enable the host to be discovered if it is not an already known host. Listen to the NetHost event interface to handle the results Returns true if the host was found and the refresh successfully started, else false (the host could not be found)"
					var ReturnType = "Boolean"
					var Parameters = "(Network network, IpAddress ipAddress, Boolean getExtraHostInfo, Boolean allowDiscovery, Boolean removeStaleHosts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
						Parameter
						{
							var Name = "getExtraHostInfo"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "allowDiscovery"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "removeStaleHosts"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RefreshHostList"
					var Description = "Refreshes all hosts in the given network's host list. Allowing discovery will enable new hosts to be discovered in the process of refreshing. Listen to the NetHost event interface to handle the results Returns true if the refresh was successfully started, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Network network, Boolean getExtraHostInfo, Boolean allowDiscovery, Boolean removeStaleHosts)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "network"
							var Type = "Network"
							var Description = ""
						}
						Parameter
						{
							var Name = "getExtraHostInfo"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "allowDiscovery"
							var Type = "Boolean"
							var Description = ""
						}
						Parameter
						{
							var Name = "removeStaleHosts"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, Event requestEvent)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestEvent"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveUser"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Cog cog, EventBundle requestBundle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "requestBundle"
							var Type = "EventBundle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SubscribeToMasterServer"
					var Description = "Subscribes to the master server located at the specified IP address All internet host discovery, record publishing, connection facilitation (NAT punchthrough) requests are performed on these master server subscriptions in the order they were subscribed."
					var ReturnType = "Void"
					var Parameters = "(IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UnsubscribeFromMasterServer"
					var Description = "Unsubscribes from the master server located at the specified IP address (if subscribed)"
					var ReturnType = "Void"
					var Parameters = "(IpAddress ipAddress)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "ipAddress"
							var Type = "IpAddress"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerClosed"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched before gracefully closing the net peer."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerOpened"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after successfully opening the net peer."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerReceivedConnectRequest"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a connect request If accepted, their net peer ID is assigned immediately after this Return true to accept the connect request, else false."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurIpAddress"
					var Type = "IpAddress"
					var Description = "Their pending user add requests following this connect request (within the same frame)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ReturnOurConnectResponse"
					var Type = "Boolean"
					var Description = "Our IP address (as seen from their perspective)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReturnOurResponseBundle"
					var Type = "EventBundle"
					var Description = "Return: Our connect response (accept the connect request?)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = "Their bundled request event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerReceivedConnectResponse"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a connect response If accepted, our net peer ID is set immediately before this and a connect confirmation is sent after this If denied, our net peer ID is cleared and link is destroyed immediately after this."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurIpAddress"
					var Type = "IpAddress"
					var Description = "Our pending user add requests following this connect request (within the same frame)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurNetPeerId"
					var Type = "Integer"
					var Description = "Their bundled response event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = "Our bundled request event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirConnectResponse"
					var Type = "ConnectResponse"
					var Description = "Our IP address (as seen from their perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirResponseBundle"
					var Type = "EventBundle"
					var Description = "Their connect response."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerReceivedUserAddRequest"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a net user add request."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ReturnOurAddResponse"
					var Type = "Boolean"
					var Description = "Their bundled request event data."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReturnOurResponseBundle"
					var Type = "EventBundle"
					var Description = "Return: Our add response (accept the add request?)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReturnTheirNetUser"
					var Type = "Cog"
					var Description = "Return: Our bundled response event data."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetUserId"
					var Type = "Integer"
					var Description = "Return: Their network user object (must have a NetUser component)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerReceivedUserAddResponse"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after receiving a net user add response."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurNetUserId"
					var Type = "Integer"
					var Description = "Their bundled response event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirAddResponse"
					var Type = "NetUserAddResponse"
					var Description = "Our bundled request event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirResponseBundle"
					var Type = "EventBundle"
					var Description = "Their add response."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerSentConnectRequest"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a connect request."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = "Our bundled request event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerSentConnectResponse"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a connect response If denied, their net peer ID is released and link is destroyed immediately after this."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurConnectResponse"
					var Type = "ConnectResponse"
					var Description = "Our IP address (as seen from their perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurIpAddress"
					var Type = "IpAddress"
					var Description = "Their pending user add requests following this connect request (within the same frame)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurResponseBundle"
					var Type = "EventBundle"
					var Description = "Our connect response."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Their net peer ID (set only if accepted)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirPendingUserAddRequestCount"
					var Type = "Integer"
					var Description = "Their bundled request event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerSentUserAddRequest"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a net user add request."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPeerSentUserAddResponse"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after sending a net user add response."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OurAddResponse"
					var Type = "NetUserAddResponse"
					var Description = "Their bundled request event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OurResponseBundle"
					var Type = "EventBundle"
					var Description = "Our add response."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirIpAddress"
					var Type = "IpAddress"
					var Description = "Their net peer ID."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetUser"
					var Type = "Cog"
					var Description = "Their net user ID (set only if accepted)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirNetUserId"
					var Type = "Integer"
					var Description = "Our bundled response event data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "TheirRequestBundle"
					var Type = "EventBundle"
					var Description = "Their IP address (as seen from our perspective)"
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetProperty"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Property Manages the replication of a single property on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LastChangeTimePassed"
					var Type = "Real"
					var Description = "Elapsed time passed since this net property was last changed, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LastChangeTimestamp"
					var Type = "Real"
					var Description = "Timestamp indicating when this net property was last changed, else 0."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = "Net property name."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetChannel"
					var Type = "NetChannel"
					var Description = "Operating net channel."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetPropertyType"
					var Type = "NetPropertyType"
					var Description = "Operating net property type."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPropertyConfig"
			var BaseClass = "DataResource"
			var Library = "NetworkingLibrary"
			var Description = "Network Property Configuration Defines a configuration for the replication of a single property on the network."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ActiveConvergenceWeight"
					var Type = "Real"
					var Description = "Event on convergence state change?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "BasicNetType"
					var Type = "BasicNetType"
					var Description = "Data."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ConvergenceInterval"
					var Type = "Integer"
					var Description = "Resting convergence duration handled every convergence interval."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdInteger"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdInteger2"
					var Type = "Integer2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdInteger3"
					var Type = "Integer3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdInteger4"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdQuaternion"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdReal"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdReal2"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdReal3"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DeltaThresholdReal4"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EventOnConvergenceStateChange"
					var Type = "Boolean"
					var Description = "Use convergence?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ExtrapolationLimit"
					var Type = "Real"
					var Description = "Sample time offset from now."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InterpolationCurve"
					var Type = "CurveType"
					var Description = "Use interpolation?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger2"
					var Type = "Integer2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger3"
					var Type = "Integer3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxInteger4"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxQuaternion"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal2"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal3"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMaxReal4"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger2"
					var Type = "Integer2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger3"
					var Type = "Integer3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinInteger4"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinQuaternion"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinReal"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinReal2"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinReal3"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "QuantizationRangeMinReal4"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RestingConvergenceDuration"
					var Type = "Real"
					var Description = "Active convergence weight applied every convergence interval."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SampleTimeOffset"
					var Type = "Real"
					var Description = "Interpolation curve type."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SerializationMode"
					var Type = "SerializationMode"
					var Description = "Delta threshold."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdDoubleInteger"
					var Type = "DoubleInteger"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdDoubleReal"
					var Type = "DoubleReal"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdInteger"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdInteger2"
					var Type = "Integer2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdInteger3"
					var Type = "Integer3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdInteger4"
					var Type = "Integer4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdQuaternion"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdReal"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdReal2"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdReal3"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapThresholdReal4"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseConvergence"
					var Type = "Boolean"
					var Description = "Extrapolation time limit."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseDeltaThreshold"
					var Type = "Boolean"
					var Description = "Target basic property type."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseHalfFloats"
					var Type = "Boolean"
					var Description = "Serialization mode."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseInterpolation"
					var Type = "Boolean"
					var Description = "Quantization range maximum."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseQuantization"
					var Type = "Boolean"
					var Description = "Use half floats?"
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPropertyInfo"
			var BaseClass = "SafeId32"
			var Library = "NetworkingLibrary"
			var Description = "Network Property Info Configures a network property."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Component"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetChannelConfig"
					var Type = "NetChannelConfig"
					var Description = "Network channel configuration resource."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NetPropertyConfig"
					var Type = "NetPropertyConfig"
					var Description = "Network property configuration resource."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Property"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetPropertyType"
			var BaseClass = "SafeId32Object"
			var Library = "NetworkingLibrary"
			var Description = "Network Property Type Configures the replication of a single property on the network."
			var Tags = Array
			{
				"Networking"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = "Net property type name."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ResetConfig"
					var Description = "Resets all configuration settings (Cannot be modified at game runtime)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetConfig"
					var Description = "Sets all configuration settings according to the specified NetPropertyConfig resource (Cannot be modified at game runtime)"
					var ReturnType = "Void"
					var Parameters = "(NetPropertyConfig netPropertyConfig)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPropertyConfig"
							var Type = "NetPropertyConfig"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetSpace"
			var BaseClass = "NetObject"
			var Library = "NetworkingLibrary"
			var Description = "Network Space Manages the replication of a single space on the network."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "NetObjectCount"
					var Type = "Integer"
					var Description = "Returns the number of net objects in this space (but not including the net space itself)"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetUserCount"
					var Type = "Integer"
					var Description = "Returns the number of net users in this space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetUser"
			var BaseClass = "NetObject"
			var Library = "NetworkingLibrary"
			var Description = "Network User Manages the replication of a single negotiated user on the network."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AddedByMyPeer"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetPeerId"
					var Type = "Integer"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NetUserId"
					var Type = "Integer"
					var Description = "Adding network peer identifier."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OwnedNetObjectCount"
					var Type = "Integer"
					var Description = "Returns the number of net objects owned by this user in all spaces."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OwnedNetObjects"
					var Type = "CogHashSetRange"
					var Description = "Returns all net objects owned by this user in all spaces."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddedByPeer"
					var Description = "Returns true if the user was added by the specified peer, else false."
					var ReturnType = "Boolean"
					var Parameters = "(Integer netPeerId)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "netPeerId"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindOwnedNetObjectByName"
					var Description = "Finds a net object with the given name owned by this user in any space, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindOwnedNetObjectByNameInSpace"
					var Description = "Finds a net object with the given name owned by this user in the specified space, else nullptr."
					var ReturnType = "Cog"
					var Parameters = "(String name, Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReleaseOwnedNetObjects"
					var Description = "[Server/Offline] Releases ownership of all net objects owned by this user in all spaces"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetUserAcquiredObjectOwnership"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net user acquires network ownership of a net object."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AcquiredObject"
					var Type = "Cog"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PreviousNetUserOwner"
					var Type = "Cog"
					var Description = "The object this user just acquired network ownership of."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetUserLostObjectOwnership"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net user loses network ownership of a net object."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CurrentNetUserOwner"
					var Type = "Cog"
					var Description = "The object this user just lost network ownership of."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LostObject"
					var Type = "Cog"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "NetUserOwnerChanged"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched after the net object changes network ownership."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CurrentNetUserOwner"
					var Type = "Cog"
					var Description = "The object's previous network user owner."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PreviousNetUserOwner"
					var Type = "Cog"
					var Description = "Data."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Null"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectEvent"
			var BaseClass = "Event"
			var Library = "MetaLibrary"
			var Description = "Simple event for general signals."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Source"
					var Type = "Object"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectLink"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Forms a link between two positions on two objects. ObjectLinks are used primarily by physics to represent joints, but can also be used by graphics, gameplay, etc... to represent some connection between two objects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The Point on Object A in local space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The Point on Object B in local space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectA"
					var Type = "Cog"
					var Description = "The first object that is being connected to. Set this to null to clear the link."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectAPath"
					var Type = "CogPath"
					var Description = "CogPath to object A."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectB"
					var Type = "Cog"
					var Description = "The second object that is being connected to. Set this to null to clear the link."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectBPath"
					var Type = "CogPath"
					var Description = "CogPath to object B."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The point on object A in world space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The point on object B in world space."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectLinkAnchor"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Component used to keep track of what ObjectLinks a cog has. This component is added dynamically whenever a ObjectLink is added to a cog that did not contain an ObjectLink before. This can be used to traverse across linked objects and find the entire \"island\" of ObjectLinks."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ObjectLinks"
					var Type = "ObjectLinkRange"
					var Description = "The range of object link edges connected to this anchor."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectLinkEdge"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "A directed edge between a cog and an object link."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ObjectLink"
					var Type = "ObjectLink"
					var Description = "The object link that this edge is connected to."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OtherCog"
					var Type = "Cog"
					var Description = "The other cog that the object link is connected to (the one not part of this edge)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SelfCog"
					var Type = "Cog"
					var Description = "The cog that this edge on the object link is connected to."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectLinkEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "An event sent when an object link changes one of its link edges."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EdgeId"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NewCog"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OldCog"
					var Type = "Cog"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectLinkPointChangedEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EdgeId"
					var Type = "Integer"
					var Description = "The index on the edge that is being overridden."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NewLocalPoint"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OldLocalPoint"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectStore"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Object cache is use to store objects at runtime."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ClearStore"
					var Description = "Clear the store."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Erase"
					var Description = "Attempts to remove an object from the store."
					var ReturnType = "Void"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetDirectoryPath"
					var Description = "Returns the directory path to the object store."
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsStored"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Restore"
					var Description = "Restore an object to the space."
					var ReturnType = "Cog"
					var Parameters = "(String name, Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid ObjectStore Restore"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RestoreOrArchetype"
					var Description = "Restore an object if it is not stored use the archetype to create it."
					var ReturnType = "Cog"
					var Parameters = "(String name, Archetype archetype, Space space)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
						Parameter
						{
							var Name = "space"
							var Type = "Space"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Store"
					var Description = "Store an object."
					var ReturnType = "StoreResult"
					var Parameters = "(String name, Cog object)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "object"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ObjectTransformGizmo"
			var BaseClass = "Component"
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Basis"
					var Type = "GizmoBasis"
					var Description = "Setters / Getters."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ObjectCount"
					var Type = "Integer"
					var Description = "Object getters."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Pivot"
					var Type = "GizmoPivot"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddObject"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnyHandle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "AnyHandle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearObjects"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetObjectAtIndex"
					var Description = ""
					var ReturnType = "AnyHandle"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveObject"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(AnyHandle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "AnyHandle"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetOperationQueue"
					var Description = "If set, this Gizmo will add operations for all modifications to cogs."
					var ReturnType = "Void"
					var Parameters = "(OperationQueue opQueue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "opQueue"
							var Type = "OperationQueue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToggleCoordinateMode"
					var Description = "Toggle between local / world."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "OpcodeEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Orientation"
			var BaseClass = "Component"
			var Library = "GameplayLibrary"
			var Description = "Defines a new basis for a desired right, up, and forward vector. Provides a bunch of helper functions to change between these spaces and to perform simple look-at behavior."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AbsoluteAngle"
					var Type = "Real"
					var Description = "Get the angle of the object about the up vector."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "DefaultOrientationBases"
					var Type = "OrientationBases"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "GlobalUp"
					var Type = "Real3"
					var Description = "The world-space up vector to use for LookAt operations that don't take an up vector."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalForward"
					var Type = "Real3"
					var Description = "The orientation's forward vector after having been transformed into local space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LocalOrientationBasis"
					var Type = "Quaternion"
					var Description = "A local-space basis that represents this orientation. If you build a basis from an up of (0, 1, 0), and a forward of (0, 0, -1) then this should result in the identity rotation."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalRight"
					var Type = "Real3"
					var Description = "The orientation's right vector after having been transformed into local space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LocalToOrientationRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an local space vector into orientation space. For example, this transforms LocalRight into OrientationRight."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LocalToWorldRotation"
					var Type = "Quaternion"
					var Description = "The rotation that transforms a vector from local space into world space. For example, this transforms LocalRight into WorldRight."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "LocalUp"
					var Type = "Real3"
					var Description = "The orientation's up vector after having been transformed into local space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OrientationForward"
					var Type = "Real3"
					var Description = "The forward vector in orientation space. This is always the vector (0, 0, -1) but is provided for clarity with transformations."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OrientationRight"
					var Type = "Real3"
					var Description = "The right vector in orientation space. This is always the vector (1, 0, 0) but is provided for clarity with transformations."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OrientationToLocalRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an orientation space vector into local space. For example, this transforms OrientationRight into LocalRight."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OrientationToWorldRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an orientation space vector into world space. For example, this transforms OrientationRight into WorldRight."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OrientationUp"
					var Type = "Real3"
					var Description = "The up vector in orientation space. This is always the vector (0, 1, 0) but is provided for clarity with transformations."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldForward"
					var Type = "Real3"
					var Description = "The orientation's forward vector after having been transformed into world space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldRight"
					var Type = "Real3"
					var Description = "The orientation's right vector after having been transformed into world space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldToLocalRotation"
					var Type = "Quaternion"
					var Description = "The rotation that transforms a vector from world space into local space. For example, this transforms WorldRight into LocalRight."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldToOrientationRotation"
					var Type = "Quaternion"
					var Description = "The rotation that takes an world space vector into orientation space. For example, this transforms WorldRight into OrientationRight."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldUp"
					var Type = "Real3"
					var Description = "The orientation's up vector after having been transformed into world space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ComputeSignedAngle"
					var Description = "Compute the rotation angle between two vectors (in radians)"
					var ReturnType = "Real"
					var Parameters = "(Real3 up, Real3 forward, Real3 newVector)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "up"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "forward"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "newVector"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DebugDrawBases"
					var Description = "Debug draws the current orientation bases in world space."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLookAtDirectionRotation"
					var Description = "Gets the forward to look in the given direction. Keeps the current world up."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3 lookDir)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLookAtDirectionWithUpRotation"
					var Description = "Same as GetLookAtDirectionRotation but allows the user to specify the up vector."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3 lookDir, Real3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLookAtPointRotation"
					var Description = "Get the rotation so that the forward will look at the given point. Keeps the current world up."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3 lookPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLookAtPointWithUpRotation"
					var Description = "Same as GetLookAtPointRotation but allows the user to specify the up vector."
					var ReturnType = "Quaternion"
					var Parameters = "(Real3 lookPoint, Real3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "LookAtDirection"
					var Description = "Sets the forward to look in the given direction. Keeps the current world up."
					var ReturnType = "Void"
					var Parameters = "(Real3 lookDir)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "LookAtDirectionWithUp"
					var Description = "Same as LookAtDirection but allows the user to specify the up vector."
					var ReturnType = "Void"
					var Parameters = "(Real3 lookDir, Real3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookDir"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "LookAtPoint"
					var Description = "Sets the forward to look at the given point. Keeps the current world up."
					var ReturnType = "Void"
					var Parameters = "(Real3 lookPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "LookAtPointWithUp"
					var Description = "Same as LookAtPoint but allows the user to specify the up vector."
					var ReturnType = "Void"
					var Parameters = "(Real3 lookPoint, Real3 up)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lookPoint"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetLocalLookAtRotation"
					var Description = "Set the transform's local rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward)"
					var ReturnType = "Void"
					var Parameters = "(Quaternion localLookAtRotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "localLookAtRotation"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldLookAtRotation"
					var Description = "Set the transform's world rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward)"
					var ReturnType = "Void"
					var Parameters = "(Quaternion worldLookAtRotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldLookAtRotation"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PanningNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Changes the left and right channel volumes of its input SoundNode's audio separately."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LeftVolume"
					var Type = "Real"
					var Description = "The volume multiplier applied to audio in the left channel."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RightVolume"
					var Type = "Real"
					var Description = "The volume multiplier applied to audio in the right channel."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SumToMono"
					var Type = "Boolean"
					var Description = "If this property is true, the audio will be combined into a single channel before being split between the right and left channels. If it is false and the audio has more than two channels, it will be combined into only two channels before being processed."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateLeftVolume"
					var Description = "Interpolates the LeftVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateRightVolume"
					var Description = "Interpolates the RightVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateVolumes"
					var Description = "Interpolates both left and right volume properties at once. The first parameter is the value to change the LeftVolume to, the second is the RightVolume, and the third is the number of seconds to use for the interpolation."
					var ReturnType = "Void"
					var Parameters = "(Real leftVolume, Real rightVolume, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "leftVolume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "rightVolume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParseEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleAnimator"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Particle Animator Interface. Particle Animators effect partices in the system."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleAttractor"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttractPosition"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxDistance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinDistance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PositionSpace"
					var Type = "SystemSpace"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Strength"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleCollisionHeightmap"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Friction"
					var Type = "Real"
					var Description = "How slippery or rough the particle is. When friction is 0, the object will be slippery. When friction is 1, it will completely stop in the direction tangential to the collision normal."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HeightMap"
					var Type = "CogPath"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Restitution"
					var Type = "Real"
					var Description = "How much the particle will bounce during a collision. Values should be in the range of [0, 1], where 0 is an in-elastic collision and 1 is a fully elastic collision (bouncy). If the value is greater than 1, the particle will gain energy and move faster after the bounce."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleCollisionPlane"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Friction"
					var Type = "Real"
					var Description = "How slippery or rough the particle is. When friction is 0, the object will be slippery. When friction is 1, it will completely stop in the direction tangential to the collision normal. Values should be in the range [0, 1]."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PlaneNormal"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PlanePosition"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PlaneSpace"
					var Type = "SystemSpace"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Restitution"
					var Type = "Real"
					var Description = "How much the particle will bounce during a collision. Values should be in the range of [0, 1], where 0 is an in-elastic collision and 1 is a fully elastic collision (bouncy). If the value is greater than 1, the particle will gain energy and move faster after the bounce."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleColorAnimator"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = "Linear interpolate colors across the particles lifetime."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxParticleSpeed"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimeGradient"
					var Type = "ColorGradient"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VelocityGradient"
					var Type = "ColorGradient"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleEmitter"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Particle emitters add new particles to the system and control where the particles will appear (sphere emitter, mesh emitter, etc)"
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleEmitterShared"
			var BaseClass = "ParticleEmitter"
			var Library = "GraphicsLibrary"
			var Description = "Particle Emitter Shared."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Is this emitter currently emitting particles?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitCount"
					var Type = "Integer"
					var Description = "Number of particles to emit per reset."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitDelay"
					var Type = "Real"
					var Description = "Time in seconds to delay the emission of particles from time of creation."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitRate"
					var Type = "Real"
					var Description = "Rate that particles spawn per second."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitRateSoftStartTime"
					var Type = "Real"
					var Description = "Slowly ramps up to EmitRate over this time."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitVariance"
					var Type = "Real"
					var Description = "How much the emit can vary per sample."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitterSize"
					var Type = "Real3"
					var Description = "Size of the emitter."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitterVelocityPercent"
					var Type = "Real"
					var Description = "How much of the objects velocity is added to the particles."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FastMovingEmitter"
					var Type = "Boolean"
					var Description = "Whether or not we attempt to emit along the vector between the previous position to the current position, which looks better for fast moving particle systems Note: Particle systems that teleport will emit along the teleport line."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Fill"
					var Type = "Real"
					var Description = "How much area of the emitter to used 0 to 1."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Lifetime"
					var Type = "Real"
					var Description = "How a particle's starting lifetime is."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LifetimeVariance"
					var Type = "Real"
					var Description = "Hom much lifetime can vary per particle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RandomSpin"
					var Type = "Boolean"
					var Description = "Each particle should start with random spin."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RandomVelocity"
					var Type = "Real3"
					var Description = "Random Velocity per particle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Size"
					var Type = "Real"
					var Description = "Size of each particle spawned."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SizeVariance"
					var Type = "Real"
					var Description = "How much the emit can vary per sample."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Spin"
					var Type = "Real"
					var Description = "Speed in rads per second of the particle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpinVariance"
					var Type = "Real"
					var Description = "How much spin speed can vary per particle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StartVelocity"
					var Type = "Real3"
					var Description = "Velocity of each particle at start."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TangentVelocity"
					var Type = "Real3"
					var Description = "Velocity of each particle in x horizontal tangent y vertical tangent and z outward tangent."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ResetCount"
					var Description = "Reset the number of particles to emit back to EmitCount."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleSystem"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "An interface for generating and managing particles of a generic definition using emitters and animators."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BoundingBoxSize"
					var Type = "Real"
					var Description = "Size of all sides of the bounding box used for frustum culling."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ChildSystem"
					var Type = "Boolean"
					var Description = "If set, particle emission will happen for each particle in a parent system."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PreviewInEditor"
					var Type = "Boolean"
					var Description = "If the particle system should run on frame update in the editor instead of logic update."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SystemSpace"
					var Type = "SystemSpace"
					var Description = "If particles are emitted into world space or if transform data remains reletive to the transform of the system object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WarmUpTime"
					var Type = "Real"
					var Description = "The amount of time to simulate the particle system on startup. This will be done on AllObjectsCreated, and will use the engines dt. This is good for when you want the particle effect to be in full bloom when you first see it. However, it can hurt performance at high values on startup."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AllParticles"
					var Description = "A list of all particles currently active in the system."
					var ReturnType = "ParticleListRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clear all current particles."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleTwister"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Axis"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxDistance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinDistance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Strength"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ParticleWander"
			var BaseClass = "ParticleAnimator"
			var Library = "GraphicsLibrary"
			var Description = "Particle animator that causes particle to wander or smoothly vary directions."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WanderAngle"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WanderAngleVariance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WanderStrength"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhyGunJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "Legacy. A physics gun joint is an experimental joint for picking up objects. This acts as a weld between an object and the world. Primarily an experiment for picking up objects as a player. Should be custom implemented in script with CustomJoint instead."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPoint"
					var Type = "Real3"
					var Description = "The local point on the object that should match the target point."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TargetPoint"
					var Type = "Real3"
					var Description = "The point in world space that the object's point should match."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TargetRotation"
					var Type = "Quaternion"
					var Description = "The world space rotation that the basis of the object should match. Used to set the desired rotation of the object in world space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPoint"
					var Type = "Real3"
					var Description = "The world point on the object that should match the target point."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldRotation"
					var Type = "Quaternion"
					var Description = "Used to set the world rotation basis of the object that should be matched to the target rotation."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsCar"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A controller for a high speed physics based car. The car is controlled with a steer, gas, and brake scalar. The car will raycast wheel positions to try to keep the wheels on the ground and then apply friction and normal forces to propel the car."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Whether or not the car will run any logic at all. If this is false wheels will not work, they will not behave as springs, drive, or anything else."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AntiLockBrakes"
					var Type = "Boolean"
					var Description = "Prevents the car from entering dynamic friction when applying brakes. If the brake would start to skid, the brake force is clamped to the max amount that will not slip."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Brake"
					var Type = "Real"
					var Description = "How much the brake is being pressed [0,1] where 1 is full brake."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DebugDraw"
					var Type = "Boolean"
					var Description = "Whether or not the car should debug draw."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Gas"
					var Type = "Real"
					var Description = "How much the gas is being pressed [-1,1] where -1 is full reverse."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "GripScalar"
					var Type = "Real"
					var Description = "Artificially increases the grip of the car (where 2 is twice the grip). The total grip scalar is computed as CarGripScalar * WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxSpeed"
					var Type = "Real"
					var Description = "The desired maximum speed of the car. Similar to a speed governor."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxTorque"
					var Type = "Real"
					var Description = "The maximum torque the engine can apply to try to reach the max speed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Steer"
					var Type = "Real"
					var Description = "How much the wheel is being steered. This is measured in radians about this object's y-axis."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TorqueGovernor"
					var Type = "Boolean"
					var Description = "Governs the max torque that the engine can apply. This is used to keep the wheels from spinning out (slipping) when too high of a torque is applied. If the tires would slip, the engine will apply the maximum torque for the tires to not slip."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WheelCogs"
					var Type = "CarWheelArray"
					var Description = "Read-only array of wheels belonging to this car."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WheelFrictionFrontRollCoef"
					var Type = "Real"
					var Description = "Coefficient used to apply the forward friction force closer to the car's center of mass. 1 applies the force at the wheel position, 0 applies the force at the point along the contact normal closest to the center of mass."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WheelFrictionSideRollCoef"
					var Type = "Real"
					var Description = "Coefficient used to apply the side friction force closer to the car's center of mass. 1 applies the force at the wheel position, 0 applies the force at the point along the contact normal closest to the center of mass."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "NumberOfWheelsInContact"
					var Description = "The number of wheels currently in contact with an object."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsCarWheel"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A wheel for a high speed physics based car. Each wheel contains properties to describe how to interact with the world (eg. spring forces, friction, etc...)."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Should this wheel calculate forces for the current PhysicsCar."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ContactNormal"
					var Type = "Real3"
					var Description = "The normal of the surface where the wheel is currently in contact. Will be the zero vector if there is no contact."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ContactPoint"
					var Type = "Real3"
					var Description = "The point in world space where the wheel is currently in contact. Will be the zero vector if there is no contact."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ContactedObject"
					var Type = "Cog"
					var Description = "The object that this wheel is currently in contact with."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "DampingCompressionRatio"
					var Type = "Real"
					var Description = "The damping ratio when the spring is compressing (0: no damping, 1 critical damping)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DampingRelaxationRatio"
					var Type = "Real"
					var Description = "The damping ratio when the spring is relaxing (0: no damping, 1 critical damping)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DriveFactor"
					var Type = "Real"
					var Description = "Used to alter the direction this wheel turns when the motor receives power. Typically set to 1 or -1. Useful to cause a wheel to temporarily rotate backwards without having to change its basis."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ForwardDynamicFriction"
					var Type = "Real"
					var Description = "Determines the force applied in the forward direction when the wheel is in dynamic friction and therefore slipping. (i.e. force = muK * Fnormal)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ForwardImpulse"
					var Type = "Real"
					var Description = "The forward impulse (drive force) being exerted by the wheel."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ForwardStaticFriction"
					var Type = "Real"
					var Description = "Used with Coulomb's friction to determine when the wheel will start slipping in the forward direction. (i.e. the friction is bound by muS * Fnormal)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FrequencyHz"
					var Type = "Real"
					var Description = "The frequency at which the spring of this wheel oscillates per second."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Grip"
					var Type = "Real"
					var Description = "A coefficient from 0 to 1 that represents how much grip the wheel has."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "GripScalar"
					var Type = "Real"
					var Description = "Artificially increases the grip of the car (where 2 is twice the grip). The total grip scalar is computed as CarGripScalar * WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Is2DWheel"
					var Type = "Boolean"
					var Description = "Does this wheel only operate in 2D? Ignores the side friction axis."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IsDriveWheel"
					var Type = "Boolean"
					var Description = "Drive wheels turn when the car body has gas pressed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IsInContact"
					var Type = "Boolean"
					var Description = "If the wheel is currently in contact with an object."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsSliding"
					var Type = "Boolean"
					var Description = "If the wheel is currently sliding. This means that the wheel is slipping from spinning too fast (using dynamic friction instead of static)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "MaxBrakeStrength"
					var Type = "Real"
					var Description = "The max force that this wheel can exert to break."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxSpringCompressionDistance"
					var Type = "Real"
					var Description = "The max distance that a spring can compress in one frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxSpringForce"
					var Type = "Real"
					var Description = "The maximum force that the wheel's spring can exert."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxSpringRelaxationDistance"
					var Type = "Real"
					var Description = "The max distance that a spring can relax in one frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "NormalImpulse"
					var Type = "Real"
					var Description = "The normal impulse (spring force) being exerted by the wheel."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PhysicsCarPath"
					var Type = "CogPath"
					var Description = "The path to the car that this is a wheel for."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PreRotation"
					var Type = "Quaternion"
					var Description = "Used to rotate the wheel before taking into account it's transform. Typically used to rotate a cylinder to align with a model."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The radius of the wheel."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Rotation"
					var Type = "Real"
					var Description = "The current rotation of the wheel in radians about it's axle."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RotationalVelocity"
					var Type = "Real"
					var Description = "The current rotational velocity of the wheel about it's axle."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SideDynamicFriction"
					var Type = "Real"
					var Description = "Same as ForwardDynamicFriction, but in the side direction. See SideStaticFriction for a why these are separated."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SideImpulse"
					var Type = "Real"
					var Description = "The side impulse (side friction) being exerted by the wheel."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SideStaticFriction"
					var Type = "Real"
					var Description = "Same as ForwardStaticFriction, but in the side direction. Forward and side friction are separated since the forward direction is rolling friction and the side direction is sliding friction."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpringLength"
					var Type = "Real"
					var Description = "The current length of the spring."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SpringMaxLength"
					var Type = "Real"
					var Description = "The maximum length of the spring of the wheel. If the wheel hits something further away than this length (plus the wheel radius) then that object will be ignored."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpringMinLength"
					var Type = "Real"
					var Description = "The minimum length of the spring of the wheel. If a wheel cast hits an object at a time before min but after start then the wheel will still collide with this object but the spring forces and visuals will be at the min spring length. This is useful for putting the starting raycast position inside of the object so as to avoid tunneling but still having the wheel only visually display where it should."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpringRestLength"
					var Type = "Real"
					var Description = "The rest length of the spring."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpringStartLength"
					var Type = "Real"
					var Description = "The t value to start the raycast at. This t value is 0 at the wheel position and travels in the direction of the wheel spring direction. This value is used to modify where the raycast actually starts relative to the start position."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SteerFactor"
					var Type = "Real"
					var Description = "How much this wheel steers. [0, 1] where 1 is the max steering of the car."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WheelLocalStartPosition"
					var Type = "Real3"
					var Description = "The local position on the car body that the wheel starts at (raycasts from)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldAngularVelocity"
					var Type = "Real3"
					var Description = "The axis that represents the world angular velocity of the wheel."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldAxleAxis"
					var Type = "Real3"
					var Description = "The current axis of the wheel's axle in world space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldForwardAxis"
					var Type = "Real3"
					var Description = "The current axis of the wheel's forward in world space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldLinearVelocity"
					var Type = "Real3"
					var Description = "The velocity of the center of the wheel while taking into account the car's velocity."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldSpringAxis"
					var Type = "Real3"
					var Description = "The current world-space spring axis of the wheel."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldWheelBasis"
					var Type = "Quaternion"
					var Description = "Determines what directions the forward, axle, and spring are on the wheel. The forward direction is taken from the x-axis of the basis. Likewise the axle is from the y-axis and the spring is from the z-axis. Use ToQuaternion to construct this."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsEffect"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "A common interface for all effects in physics. An effect is something that typically applies a force and can be attached to a collider, rigid body, region, or even a space. This effect is applied every frame according to the rules of the object it is attached to."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Enable/disable this effect."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DebugDrawEffect"
					var Type = "Boolean"
					var Description = "Should the effect debug draw."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EffectType"
					var Type = "PhysicsEffectType"
					var Description = "What kind of effect this is (e.g. ForceEffect, GravityEffect, etc...)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WakeUpOnChange"
					var Type = "Boolean"
					var Description = "Whether the object associated with this is woken up when any property is changed."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Toggle"
					var Description = "Toggles whether or not this effect is active."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsMaterial"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "Describes material properties of a collider mainly used during collision resolution."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Density"
					var Type = "Real"
					var Description = "Density is used to determine the mass of an object. Mass is computed as density * volume. Density can be set to exactly 0 to produce a massless object, however this should only be done with children objects to add collision without affecting mass."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Friction"
					var Type = "Real"
					var Description = "How slippery or rough the object is. When friction is 0 the object will be slippery. As friction increases, sliding objects will stop quicker. The friction of two object's are combined with the formula sqrt(a * b)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HighPriority"
					var Type = "Boolean"
					var Description = "If high priority is set, this object's restitution/friction will always be used unless the other material is also high priority. If both are high priority then the default combination logic will be used."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Restitution"
					var Type = "Real"
					var Description = "How much an object will bounce during a collision. Values should be in the range [0,1] where 0 is an inelastic collision and 1 is a fully elastic collision. Restitution is computed as the max of the two objects. Note: due to solving constraints with baumgarte, energy will not be perfectly conserved with a restitution 1."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Creates a PhysicsMaterial for run-time modifications."
					var ReturnType = "PhysicsMaterial"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates a clone of this material for run-time modifications."
					var ReturnType = "PhysicsMaterial"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UpdateAndNotifyIfModified"
					var Description = "After modifying this resource, notify anyone using it to update now instead of at the next physics update."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsMesh"
			var BaseClass = "GenericPhysicsMesh"
			var Library = "PhysicsLibrary"
			var Description = "A mesh used to represent static world geometry. All geometry is stored and tested as a collection of triangles."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Creates a PhysicsMesh for run-time modifications."
					var ReturnType = "PhysicsMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates a clone of this mesh for run-time modifications."
					var ReturnType = "PhysicsMesh"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsMeshIndexData"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "PhysicsMeshIndexRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsMeshVertexData"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "PhysicsMeshVertexRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsRaycastProvider"
			var BaseClass = "RaycastProvider"
			var Library = "PhysicsLibrary"
			var Description = "Provides the interface for casting through PhysicsSpaces."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "DynamicColliders"
					var Type = "Boolean"
					var Description = "Should dynamic colliders (those with rigid bodies) be selected?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MultiSelectKinematic"
					var Type = "Boolean"
					var Description = "Should multi-selection work with kinematic objects?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MultiSelectStatic"
					var Type = "Boolean"
					var Description = "Should multi-selection work with static objects?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SelectGhosts"
					var Type = "Boolean"
					var Description = "Should ghost colliders be selected?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StaticColliders"
					var Type = "Boolean"
					var Description = "Should static colliders (those without rigid bodies) be selected?"
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsSolverConfig"
			var BaseClass = "DataResource"
			var Library = "PhysicsLibrary"
			var Description = "Defines various configuration values used by physics to solve constraints. This resource defines a tiered set of properties that can be overriden global or per constraint type."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "PositionCorrectionType"
					var Type = "PhysicsSolverPositionCorrection"
					var Description = "What method should be used to fix errors in joints. Baumgarte fixes errors by adding extra velocity but results in a more spongy behavior. Post Stabilization fixes errors by directly modifying position but can behave worse in unsolvable configurations."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PositionIterationCount"
					var Type = "Integer"
					var Description = "The number of iterations used for position correction (if position correction is used)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SolverIterationCount"
					var Type = "Integer"
					var Description = "The number of iterations used in the constraint solver. Affects how stiff joints will be."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VelocityRestitutionThreshold"
					var Type = "Real"
					var Description = "To prevent numerical issues, restitution is only applied if the relative velocity between the two objects is above this value."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PhysicsSpace"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "The PhysicsSpace is an \"instance\" of a world. This world manages and stores all of the other physical components of this world. PhysicSpaces act independently of each other."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AllowSleep"
					var Type = "Boolean"
					var Description = "Determines if anything in the space is allowed to fall sleep."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CollisionTable"
					var Type = "CollisionTable"
					var Description = "The collision table resource used to filter collisions in this space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Deterministic"
					var Type = "Boolean"
					var Description = "Performs extra work to help enforce determinism in the simulation."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DynamicBroadphaseType"
					var Type = "String"
					var Description = "What kind of broadphase is used for dynamic objects (those with RigidBodies)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Mode2D"
					var Type = "Boolean"
					var Description = "The default 2D mode for this space. If a RigidBody is set to InheritFromSpace then it will use this value."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PhysicsSolverConfig"
					var Type = "PhysicsSolverConfig"
					var Description = "The resource that controls how physics solves things. Mostly related to how collision is resolved."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StaticBroadphaseType"
					var Type = "String"
					var Description = "What kind of broadphase is used for static objects (those without RigidBodies)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SubStepCount"
					var Type = "Integer"
					var Description = "The number of iterations the physics space will take every frame. Used to achieve higher accuracy and increase visual results."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddHierarchyPairFilter"
					var Description = "Adds a filter to ignore collision between both hierarchies passed in. See AddPairFilter for more info."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddPairFilter"
					var Description = "Filters two cogs to not resolve collisions with each other. This is a runtime only feature and will not be saved."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastAabb"
					var Description = "Finds all colliders in the space that an Aabb hits using the given filter. This returns up to maxCount number of objects."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Aabb aabb, Integer maxCount, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxCount"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastCollider"
					var Description = "Finds all colliders in the space that another collider hits using the given filter. The test collider's position can be offset to test at a different location. This returns up to maxCount number of objects."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Real3 offset, Collider testCollider, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "offset"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "testCollider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Collider Cast"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "CastFrustum"
					var Description = "Finds all colliders in the space that a Frustum hits using the given filter. This returns up to maxCount number of objects."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Frustum frustum, Integer maxCount, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "frustum"
							var Type = "Frustum"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxCount"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastRay"
					var Description = "Finds all colliders in the space that a ray hits using the given filter. This returns up to maxCount number of objects."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Ray worldRay, Integer maxCount, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxCount"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastRay"
					var Description = "Finds all colliders in the space that a ray hits. This returns up to maxCount number of objects. A default CastFilter will be used."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Ray worldRay, Integer maxCount)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxCount"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastRayFirst"
					var Description = "Finds the first collider that a ray hits using the given filter."
					var ReturnType = "CastResult"
					var Parameters = "(Ray worldRay, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "Ray"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastRayFirst"
					var Description = "Finds the first collider that a ray hits. A default CastFilter will be used."
					var ReturnType = "CastResult"
					var Parameters = "(Ray worldRay)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldRay"
							var Type = "Ray"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastSegment"
					var Description = "Finds all colliders in the space that a line segment hits using the given filter. This returns up to maxCount number of objects."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Segment segment, Integer maxCount, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "segment"
							var Type = "Segment"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxCount"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastSegment"
					var Description = "Finds all colliders in the space that a line segment hits. This returns up to maxCount number of objects. A default CastFilter will be used."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Segment segment, Integer maxCount)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "segment"
							var Type = "Segment"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxCount"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CastSphere"
					var Description = "Finds all colliders in the space that a Sphere hits using the given filter. This returns up to maxCount number of objects."
					var ReturnType = "CastResultsRange"
					var Parameters = "(Sphere sphere, Integer maxCount, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sphere"
							var Type = "Sphere"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxCount"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateJoint"
					var Description = "Creates a joint by name (e.g. StickJoint) between two cogs. The world points of the joint are both set to worldPoint."
					var ReturnType = "Cog"
					var Parameters = "(Cog cog0, Cog cog1, String jointName, Real3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog0"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "jointName"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid object(s) in joint connection"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchWithinAabb"
					var Description = "Dispatches an event to all objects within the given aabb."
					var ReturnType = "Void"
					var Parameters = "(Aabb aabb, String eventName, Event toSend)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "aabb"
							var Type = "Aabb"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventName"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "toSend"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DispatchWithinSphere"
					var Description = "Dispatches an event to all objects within the given sphere."
					var ReturnType = "Void"
					var Parameters = "(Sphere sphere, String eventName, Event toSend)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sphere"
							var Type = "Sphere"
							var Description = ""
						}
						Parameter
						{
							var Name = "eventName"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "toSend"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FlushPhysicsQueue"
					var Description = "Forces all queued computations in physics to be updated now. Should only be used for debugging."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveHierarchyPairFilter"
					var Description = "Removes the filters between both hierarchies. See RemovePairFilter for more info."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemovePairFilter"
					var Description = "Removes the filter between two cogs allowing collisions to be computed as normal."
					var ReturnType = "Void"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SweepCollider"
					var Description = "Performs a swept cast with a collider's shape and a given velocity. Returns a range of all objects the collider could've hit within 'dt' time."
					var ReturnType = "SweepResultRange"
					var Parameters = "(Collider collider, Real3 velocity, Real dt, CastFilter filter)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "collider"
							var Type = "Collider"
							var Description = ""
						}
						Parameter
						{
							var Name = "velocity"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "dt"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "filter"
							var Type = "CastFilter"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WhyAreTheyNotColliding"
					var Description = "Returns a debug string stating why physics does or doesn't think these two objects should be colliding."
					var ReturnType = "String"
					var Parameters = "(Cog cog1, Cog cog2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cog1"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "cog2"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PitchNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Changes the pitch and speed of audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "The pitch adjustment applied to the node's input. A value of 0 will not affect the sound's pitch; 1 will raise the pitch by an octave and speed up the sound, and -1 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "The pitch adjustment, in semitones (or half-steps), applied to the node's input. A value of 0 will not affect the sound's pitch; 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitchRatio, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitchRatio"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitchSemitones, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitchSemitones"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Plane"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Data"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Distance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Normal"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Real3, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PluginEvent"
			var BaseClass = "EventData"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PointForceEffect"
			var BaseClass = "BasicPointEffect"
			var Library = "PhysicsLibrary"
			var Description = "A force effect with a direction and strength based upon the distance from a central point. The direction of the force will always point away from the effect center, but the strength will vary depending on the min/max distance and strength values. Positive strength values point away from the effect center. Useful to make planetary force field like effects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PointGravityEffect"
			var BaseClass = "BasicPointEffect"
			var Library = "PhysicsLibrary"
			var Description = "A force effect that pulls an object towards a central point. This effect is nearly identical to PointForceEffect with two exceptions. 1. An acceleration is applied instead of a force (mass is ignored). 2. A positive strength value will pull objects toward the center of the effect. This is useful to make planetary gravity or other similar effects."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PositionJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "Represents a ball and socket joint. A position joint constrains the two anchor points on each object to be equal. Limits, motors, and springs typically should not be used. Add on definitions: Limit: A limit will provide a min/max translation on every axis (x,y,z) that the objects must be between. Motor: A motor will attempt to drive the translation in the positive direction on every axis. Spring: A spring will make the translation on every axis springy at the bounds."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PreSolveBlock"
			var BaseClass = "CollisionFilterBlock"
			var Library = "PhysicsLibrary"
			var Description = "CollisionFilterBlock for sending out an event before collision is solved. Allows modifying object state before collision responses have been calculated."
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PreSolveEvent"
			var BaseClass = "BaseCollisionEvent"
			var Library = "PhysicsLibrary"
			var Description = "Event sent out when a CollisionFilter contains a PreSolveBlock. This event is sent out after collision detection but before collision resolution. This can be used to alter the state of the two objects in a collision before they're resolved (e.g. turn one from static to dynamic). Warning: Do not delete objects or do any other significant changes as this may destabilize the system."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PrismaticJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A prismatic joint sometimes called a slider) is used to create something similar to a piston. This joint fixes all degrees of rotation and leaves one linear axis free. Therefore, the bodies will rotate with each other and move with each other, except for one axis where they can move freely. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = "The locally defined axis on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = "The locally defined axis on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = "The axis in world space that is being rotated about . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PrismaticJoint2d"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A prismatic joint is used to create something similar to a piston. This is the 2d version of PrismaticJoint. This joint is used in 2d mode for increased performance and stability. The slider axis is projected onto the z axis (the z component is ignored) so that the objects can be arbitrarily far apart. The x and y rotations are also ignored since the objects are only allowed to rotate about the z axis. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = "The locally defined axis on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = "The locally defined axis on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = "The axis in world space that is being rotated about . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ProcessClass"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "StandardError"
					var Type = "FileStream"
					var Description = "The stream where standard error is re-directed to. Null if not re-directed"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "StandardInput"
					var Type = "FileStream"
					var Description = "The stream where standard input is re-directed to. Null if not re-directed"
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "StandardOutput"
					var Type = "FileStream"
					var Description = "The stream where standard output is re-directed to. Null if not re-directed"
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Close"
					var Description = "Closes the wrapper around the process, does not close the process launched."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsRunning"
					var Description = "Returns true if the process is still running, false otherwise."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Start"
					var Description = "Begins the execution of another process using the given parameters. "
					var ReturnType = "Void"
					var Parameters = "(ProcessStartInfo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "ProcessStartInfo"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Terminate"
					var Description = "Attempts to manually shut down the process. This is not safe for the other process or what it's handling."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WaitForClose"
					var Description = "Waits for a process to close, this will block until the process closes."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ProcessStartInfo"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ApplicationName"
					var Type = "String"
					var Description = "Name of the application to execute. No quoting of this string is necessary."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Arguments"
					var Type = "String"
					var Description = "Arguments to pass to the application."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RedirectStandardError"
					var Type = "Boolean"
					var Description = "Whether or not we should redirect the Standard Error of the process for capturing."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RedirectStandardInput"
					var Type = "Boolean"
					var Description = "Whether or not we should redirect the Standard Input of the process for writing."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RedirectStandardOutput"
					var Type = "Boolean"
					var Description = "Whether or not we should redirect the Standard Output of the process for capturing."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SearchPath"
					var Type = "Boolean"
					var Description = "Whether or not we should search the path for the application."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShowWindow"
					var Type = "Boolean"
					var Description = "Whether or not the window of the launched application should be shown."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorkingDirectory"
					var Type = "String"
					var Description = "The working directory for the process to start with. No quoting of this string is necessary."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Property"
			var BaseClass = "Member"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Getter"
					var Type = "Function"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Setter"
					var Type = "Function"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetValue"
					var Description = ""
					var ReturnType = "any"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetValue"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PropertyRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "PropertyRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Property"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "PulleyJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A PulleyJoint turns two StickJoints into a pulley via a pulley ratio. A PulleyJoint connects the two free objects of two different stick joints. These two objects will then be bound to move together via the formula \"length0 + ratio * length1 = 0\". Limits, motors and springs should not be used on a pulley."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "JointA"
					var Type = "Cog"
					var Description = "The joint connected to ObjectA that the pulley operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointAPath"
					var Type = "CogPath"
					var Description = "The joint connected to ObjectA that the pulley operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointB"
					var Type = "Cog"
					var Description = "The joint connected to ObjectB that the pulley operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "JointBPath"
					var Type = "CogPath"
					var Description = "The joint connected to ObjectB that the pulley operates on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Ratio"
					var Type = "Real"
					var Description = "The ratio between the two stick joints. The ratio is used in the formula \"length0 + ratio * length1 = 0\"."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Quaternion"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Identity"
					var Type = "Quaternion"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Random"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxInteger"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Seed"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BellCurve"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "BellCurve"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "BellCurve"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Real, Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Boolean"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CoinFlip"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DieRoll"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DoubleRange"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "(DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DoubleReal"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Integer"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Probability"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Quaternion"
					var Description = ""
					var ReturnType = "Quaternion"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Range"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RangeExclusiveMax"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RangeInclusiveMax"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Real"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Real2"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Real3"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Rotation"
					var Description = ""
					var ReturnType = "Quaternion"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UnitReal2"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UnitReal3"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Variance"
					var Description = ""
					var ReturnType = "Integer"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Variance"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Real, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Variance"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "(DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RandomContext"
			var BaseClass = "Component"
			var Library = "GameplayLibrary"
			var Description = "A random object that contains its own unique random state apart from all other instances of this class."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "MaxInt"
					var Type = "Integer"
					var Description = "The max integer value that can be returned."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RandomSeed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Seed"
					var Type = "Integer"
					var Description = "Seeds the the random number generator."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "BellCurve"
					var Description = "Samples a bell curve with standard normal distribution in the range [0,1] This is equivalent to a Gaussian distribution with standard deviation of 1."
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "BellCurveDistribution"
					var Description = "Samples a bell curve in the range [center - range, center + range] with the given standard deviation. Around 68% will lie within the 1st standard deviation."
					var ReturnType = "Real"
					var Parameters = "(Real center, Real range, Real standardDeviation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "center"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "range"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "standardDeviation"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "BellCurveRange"
					var Description = "Samples a bell curve with in the range [center - range, center + range] This uses a standard deviation of 1."
					var ReturnType = "Real"
					var Parameters = "(Real center, Real range)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "center"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "range"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Bool"
					var Description = "Returns a random bool value."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CoinFlip"
					var Description = "Returns true if the coin flips heads."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DieRoll"
					var Description = "Randomly rolls a number in the range [1, sides]."
					var ReturnType = "Integer"
					var Parameters = "(Integer sides)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sides"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid die roll"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "DoubleRange"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "(DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DoubleReal"
					var Description = "Returns a random double real in the range [0,1]."
					var ReturnType = "DoubleReal"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DoubleRealVariance"
					var Description = ""
					var ReturnType = "DoubleReal"
					var Parameters = "(DoubleReal, DoubleReal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "DoubleReal"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Float"
					var Description = "Returns a random float in the range [0,1]."
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FloatVariance"
					var Description = "Returns a float in the range [base - variance, base + variance]."
					var ReturnType = "Real"
					var Parameters = "(Real base, Real variance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "base"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "variance"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Int"
					var Description = "Returns a random int in the range of [0, MaxInt]."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IntVariance"
					var Description = "Int in the range [base - variance, base + variance]."
					var ReturnType = "Integer"
					var Parameters = "(Integer base, Integer variance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "base"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "variance"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid variance"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Probability"
					var Description = "Takes a given probability that we get a true value."
					var ReturnType = "Boolean"
					var Parameters = "(Real probOfTrue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "probOfTrue"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Quaternion"
					var Description = "Random unit length quaternion. This is also a unit quaternion."
					var ReturnType = "Quaternion"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Range"
					var Description = "A random float in the range [min,max]."
					var ReturnType = "Real"
					var Parameters = "(Real min, Real max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "min"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RangeExclusiveMax"
					var Description = "Int in the range [min, max)"
					var ReturnType = "Integer"
					var Parameters = "(Integer min, Integer max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "min"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid range"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RangeInclusiveMax"
					var Description = "Int in the range [min, max]."
					var ReturnType = "Integer"
					var Parameters = "(Integer min, Integer max)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "min"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "max"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid range"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Real"
					var Description = "Returns a random real in the range [0,1]."
					var ReturnType = "Real"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RealVariance"
					var Description = "Returns a real in the range [base - variance, base + variance]."
					var ReturnType = "Real"
					var Parameters = "(Real base, Real variance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "base"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "variance"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Rotation"
					var Description = "Random rotation quaternion. This is the same as calling Quaternion()"
					var ReturnType = "Quaternion"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UnitVector2"
					var Description = "Generates a unit length Vec2."
					var ReturnType = "Real2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UnitVector3"
					var Description = "Generates a unit length Vec3."
					var ReturnType = "Real3"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Vector2"
					var Description = "Randomly generates a Vec2 with its length between min and max."
					var ReturnType = "Real2"
					var Parameters = "(Real minLength, Real maxLength)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "minLength"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxLength"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Vector3"
					var Description = "Randomly generates a Vec3 with its length between min and max."
					var ReturnType = "Real3"
					var Parameters = "(Real minLength, Real maxLength)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "minLength"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxLength"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Ray"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Direction"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Start"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetPoint"
					var Description = "Returns the point at the given t-value."
					var ReturnType = "Real3"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetTValue"
					var Description = "Returns the t-value that would result in the given point projected onto the ray."
					var ReturnType = "Real"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Reactive"
			var BaseClass = "Component"
			var Library = "GameplayLibrary"
			var Description = "Reactive component allows the object to react to mouse events. Uses the collision volume of the collider on this composition for picking."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "Is the reactive component active."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ReactiveSpace"
			var BaseClass = "Component"
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Over"
					var Type = "Cog"
					var Description = "The object we're currently hovering over."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real"
					var Description = "The smallest (most negative) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real"
					var Description = "The negative value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real"
					var Description = "The largest (most positive) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real"
					var Description = "The positive value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Parse"
					var Description = "Attempt to convert the given StringRange to a Real. If parsing fails 0 is returned."
					var ReturnType = "Real"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Reinterpret"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real2"
					var Description = "The smallest (most negative) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real2"
					var Description = "The negative value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real2"
					var Description = "The largest (most positive) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real2"
					var Description = "The positive value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Real2"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real2"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Real2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real2x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real2x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real2x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real3"
					var Description = "The smallest (most negative) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real3"
					var Description = "The negative value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real3"
					var Description = "The largest (most positive) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real3"
					var Description = "The positive value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real3"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Real3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real3x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real3x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real3x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M23"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "NegativeMin"
					var Type = "Real4"
					var Description = "The smallest (most negative) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "NegativeValueClosestToZero"
					var Type = "Real4"
					var Description = "The negative value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveMax"
					var Type = "Real4"
					var Description = "The largest (most positive) value that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "PositiveValueClosestToZero"
					var Type = "Real4"
					var Description = "The positive value closest to zero that can be represented by a Real."
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "WAxis"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "XAxis"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "YAxis"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "ZAxis"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Zero"
					var Type = "Real4"
					var Description = "The zero vector (a vector containing all zeroes)."
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxis"
					var Description = "Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc..."
					var ReturnType = "Real4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real4x2"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real4x3"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M32"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real3"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Real4x4"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountX"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CountY"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "M00"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M01"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M02"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M03"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M10"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M11"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M12"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M13"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M20"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M21"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M22"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M23"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M30"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M31"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M32"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "M33"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Real4"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetByIndex"
					var Description = ""
					var ReturnType = "Real"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetByIndex"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer, Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RecordingNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Records audio generated by its input SoundNodes into a WAV file."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FileName"
					var Type = "String"
					var Description = "The name of the output file that will be created, including the full path. Do not include the file extension."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "When true, recording is paused, and can be resumed by setting to false."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StreamToDisk"
					var Type = "Boolean"
					var Description = "When false, audio data will be saved in a buffer and written to the file when StopRecording is called. When true, data will be written to the file constantly during every update frame, and nothing will be saved."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "StartRecording"
					var Description = "Starts writing all audio input to a file."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StopRecording"
					var Description = "Stops writing data and closes the file."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ReflectionObject"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Region"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "Regions are used to make PhysicsEffects affect a region of space. Any effects attached to a Cog with a Region will apply to all objects in contact with this region."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WakeUpOnEffectChange"
					var Type = "Boolean"
					var Description = "Determines if all objects in the region should be woken up when an effect is changed. Used to make sure that changes in effects will be applied to an object event if it is asleep."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "DispatchEvent"
					var Description = "Dispatches an event to all objects in this region."
					var ReturnType = "Void"
					var Parameters = "(String eventId, Event toSend)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "toSend"
							var Type = "Event"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RegisterCppNetProperties"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "Dispatched while adding C++ component net properties to a NetObject."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RelativeVelocityJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A relative velocity joint defines what the desired relative velocity on three world axes should be between two objects. Relative velocity is defined as v2 - v1. This joint has not been tested with motors or limits in any way."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetAxis"
					var Description = "One of 3 axes to constrain movement on."
					var ReturnType = "Real3"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAxisActive"
					var Description = "Whether or not the given axis index is active."
					var ReturnType = "Boolean"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetMaxImpulse"
					var Description = "The max impulse for the given axis index."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetSpeed"
					var Description = "The desired relative speed for the given axis index."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetAxis"
					var Description = "One of 3 axes to constrain movement on."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Real3 axis)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "axis"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetAxisActive"
					var Description = "Whether or not the given axis index is active."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Boolean active)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "active"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetMaxImpulse"
					var Description = "The the max impulse for the given axis index."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Real maxImpulse)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxImpulse"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetSpeed"
					var Description = "The desired relative speed for the given axis index."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Real speed)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "speed"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RenderGroup"
			var BaseClass = "DataResource"
			var Library = "GraphicsLibrary"
			var Description = "How Materials are categorized, determines which graphicals are drawn in a render pass."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GraphicalSortMethod"
					var Type = "GraphicalSortMethod"
					var Description = "Determines the order that graphicals will be drawn when processed as this RenderGroup."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ReferencedByList"
					var Type = "MaterialList"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SerializedList"
					var Type = "MaterialList"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Resource"
			var BaseClass = "EventObject"
			var Library = "EngineLibrary"
			var Description = "Base Resource class."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ResourceTable"
			var BaseClass = "DataResource"
			var Library = "EngineLibrary"
			var Description = "A table of resources (or strings) that can be indexed, searched by name, or sampled randomly. The table can be randomly sampled to return an entry into the table."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "ResourceTableEntryRange"
					var Description = "Range to iterate over all entries."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = "How many items are stored in the table."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "MaxWeight"
					var Type = "Real"
					var Description = "The maximum probability weight value that can be stored in the table. Setting this will clamp all weight values."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ResourceType"
					var Type = "String"
					var Description = "The kind of resource contained in this table. This is either a resource type or \"String\"."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddOrError"
					var Description = "Add the given entry. If another entry with the same name exists then an error is thrown."
					var ReturnType = "Void"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Add"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "AddOrIgnore"
					var Description = "Add the given entry. If another entry with the same name exists then no operation is performed."
					var ReturnType = "Boolean"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddOrOverwrite"
					var Description = "Add the given entry. If another entry with the same name exists then it is overwritten."
					var ReturnType = "Boolean"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clear all items in the table."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Contains"
					var Description = "Returns if the given key is contained."
					var ReturnType = "Boolean"
					var Parameters = "(String key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Creates a ResourceTable for run-time modifications."
					var ReturnType = "ResourceTable"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "ForceRebuild"
					var Description = "Force rebuild the weighted probability table."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Entry Type"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = "Access an item at the given index."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = "Hash-Set interface. Gets the item with the same name as the entry."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = "Hash-Map interface. Gets via the provided key."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(String key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetOrDefault"
					var Description = "Returns the entry associated with the given key. If no entry matches the key then the provided default is returned."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(String key, ResourceTableEntry defaultValue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "defaultValue"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetOrError"
					var Description = "Returns the entry associated with the given key. If no entry matches the key then an exception is thrown."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(String key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid key"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "GetOrNull"
					var Description = "Returns the entry associated with the given key. If no entry matches then null is returned."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(String key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAt"
					var Description = "Removes the item at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveOrError"
					var Description = "Removes the entry associated with the given key. If no entry matches an exception is thrown."
					var ReturnType = "Void"
					var Parameters = "(String key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Remove"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveOrIgnore"
					var Description = "Removes the entry associated with the given key. If no entry matches then no operation is performed."
					var ReturnType = "Boolean"
					var Parameters = "(String key)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RuntimeClone"
					var Description = "Creates a clone of this table for run-time modifications."
					var ReturnType = "ResourceTable"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Sample"
					var Description = "Samples the table to return a random entry. Takes two (different) random floats from [0,1) in order to sample. Returns an empty string if the table is empty."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "(Real random1, Real random2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "random1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "random2"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SampleIndex"
					var Description = "Samples the table to return a random index into the table. Takes two (different) random floats from [0,1) in order to sample."
					var ReturnType = "Integer"
					var Parameters = "(Real random1, Real random2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "random1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "random2"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = "Access an item at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer index, ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Index"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid Set"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = "Hash-Set interface. Sets the item with the same name as the entry."
					var ReturnType = "Void"
					var Parameters = "(ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = "Hash-Map interface. Sets via the provided key."
					var ReturnType = "Void"
					var Parameters = "(String key, ResourceTableEntry entry)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "key"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "entry"
							var Type = "ResourceTableEntry"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ResourceTableEntry"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "An entry from a resource table. The resource type of this entry must match the resource type of the table to add/set. If the value is set via string then the type will be implicitly set to string, otherwise the type must be set via the Resource property."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Resource"
					var Type = "Resource"
					var Description = "The resource value of this entry. Returns null if the underlying type is not a resource. Changes this entry's type to the given resource's type on Set."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ResourceType"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Value"
					var Type = "String"
					var Description = "The string value of this entry. Changes this entry's type to String on Set."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Weight"
					var Type = "Real"
					var Description = "The weight value used to determine how likely this item is to be sampled. Note: Weights must be positive. Negative weights will be clamped to 0."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = "Creates a new entry with the same values."
					var ReturnType = "ResourceTableEntry"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Add"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid key"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid Index"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid Set"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid Remove"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ReverbNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Applies a simple reverb filter to audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Length"
					var Type = "Real"
					var Description = "The length of the reverb tail, in seconds. The default value is 0.1."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WetPercent"
					var Type = "Real"
					var Description = "The percentage of the node's output which has the reverb filter applied to it. Setting this property to 0 will stop all reverb calculations. The default value is 50.0."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateWetPercent"
					var Description = "Interpolates the WetPercent property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real percent, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "percent"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RevoluteJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A revolute joint is used to create a wheel or a hinge. A revolute joint bring the two locally defined axes together and allows free rotation only on that axis. This axis is also where the motor is applied. The two axes that are orthogonal to the motor axis have their rotation locked (objects rotate together unless on the motor axis). Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Zero is defined by the location of the primary axis on the FrameOfreference object. Motor: A motor will drive the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FrameOfReference"
					var Type = "JointFrameOfReference"
					var Description = "Should the default basis of the constraint be object A or B? This determines which object's world axis is used when constructing the basis for the constraint. In the case of a dynamic and static object, the static object is generally the better choice. As a general rule of thumb, it should be the heavier/most important object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldBasis"
					var Type = "Quaternion"
					var Description = "The basis of the joint in world-space. This basis will come object specified by FrameOfReference. The basis is constructed such that the x-axis is the primary axis while the z-axis is the hinge axis."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldFrame"
					var Description = "Legacy. Used to set the entire frame in world space for this joint. The x and y axes are used as a basis for limiting the joint. The x axis is at angle 0 and the y axis is at angle 90. The z axis is the axis of rotational freedom."
					var ReturnType = "Void"
					var Parameters = "(Quaternion rot)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rot"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RevoluteJoint2d"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A revolute joint is used to create a wheel or a hinge. This is the 2d version of RevoluteJoint. This joint is used in 2d mode for increased performance and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate about. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetLocalBasisA"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReturnType = "Quaternion"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetLocalBasisB"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReturnType = "Quaternion"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetLocalBasisA"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Quaternion angle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angle"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetLocalBasisB"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Quaternion angle)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angle"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RigidBody"
			var BaseClass = "Component"
			var Library = "PhysicsLibrary"
			var Description = "RigidBody defines the inertia (mass, velocity, etc...) of a rigid object. Any PhysicsEffects attached to a RigidBody without a region will be applied to the center of mass of this body."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ActiveBody"
					var Type = "RigidBody"
					var Description = "If this is a static body then the active body (the one force/velocity should be applied to or calculated from) is the nearest parent body up the hierarchy that is not static. If one isn't found then this returns the current rigid body (this)."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "AllowSleep"
					var Type = "Boolean"
					var Description = "Sleeping happens when an object has not \"moved\" (small enough linear + angular velocity) for long enough. If this happens then the physics engine stops updating this object (integration, collision detection, etc...) until an awake object hits it. Sleeping is purely an optimization. Sometimes it is not desirable for a body to ever fall asleep (such as a player)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AngularVelocity"
					var Type = "Real3"
					var Description = "The angular velocity (radians per second) of this body in world space. Objects will rotate about this axis using the right-hand rule. Max bounds are around 1e+10, after this the angular velocity will be capped."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Asleep"
					var Type = "Boolean"
					var Description = "Whether or not this object is currently asleep. Setting this to true will force the object asleep even if this causes invalid behavior (objects floating)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DynamicState"
					var Type = "RigidBodyDynamicState"
					var Description = "How this rigid body handles dynamics. Is it a regular rigid body (dynamic)? Does it not move (static)? Does the user want to manually move it and have objects properly collide with it (kinematic)? Note: Static vs. static does not check for collision."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Force"
					var Type = "Real3"
					var Description = "The total accumulated force (in world space) that is being applied to the center of mass of this rigid body this frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalInverseInertiaTensor"
					var Type = "Real3x3"
					var Description = "The inverse inertia tensor in local space of this body. The local space inertia tensor doesn't change when the object rotates but is not typically useful for any calculations other than computing the world-space inverse inertia tensor."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Mass"
					var Type = "Real"
					var Description = "The current mass of the rigid body. This includes all child colliders belonging to this body."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Mode2D"
					var Type = "Mode2DStates"
					var Description = "Used to make an object act as if it were 2D. This is done by locking it to the current z-plane and only allowing rotation about the world's z-axis. Objects can be set to always be 2D or 3D, or this can be deferred to the PhysicsSpace's Mode2D."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RotationLocked"
					var Type = "Boolean"
					var Description = "Makes physics unable to rotate this object. Manual rotations can still be applied."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Torque"
					var Type = "Real3"
					var Description = "The total accumulated torque (in world space) that is being applied to the center of mass of this rigid body this frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Velocity"
					var Type = "Real3"
					var Description = "The velocity (units per second) of this body in world space. Max bounds are around 1e+10, after this the velocity will be capped."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldCenterOfMass"
					var Type = "Real3"
					var Description = "The position of the center of mass in world space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldInverseInertiaTensor"
					var Type = "Real3x3"
					var Description = "The inverse inertia tensor in world space of this body. Describes how hard it is to rotate an object about the world-space axes. Useful to convert any torque into an angular velocity."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ApplyAngularImpulse"
					var Description = "Applies an angular impulse through the center of mass (world space). Only results in a change of angular velocity."
					var ReturnType = "Void"
					var Parameters = "(Real3 angular)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angular"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyAngularVelocity"
					var Description = "Adds to the current angular velocity. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Real3 angular)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angular"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyForce"
					var Description = "Applies a force through the center of mass of the body. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Real3 force)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "force"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyForceAtOffsetVector"
					var Description = "Applies a force at an offset from the center of mass (world space). Results in a force and torque to the center of mass."
					var ReturnType = "Void"
					var Parameters = "(Real3 force, Real3 worldOffset)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "force"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldOffset"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyForceAtPoint"
					var Description = "Applies a force at a world point (world space). Results in a force and torque to the center of mass."
					var ReturnType = "Void"
					var Parameters = "(Real3 force, Real3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "force"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyImpulseAtOffsetVector"
					var Description = "Applies an impulse at on offset from the center of mass (world space). Results in a change in linear and angular velocity."
					var ReturnType = "Void"
					var Parameters = "(Real3 impulse, Real3 worldOffset)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "impulse"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldOffset"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyImpulseAtPoint"
					var Description = "Applies an impulse at a world point (world space). Results in a change to linear and angular velocity."
					var ReturnType = "Void"
					var Parameters = "(Real3 impulse, Real3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "impulse"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyLinearImpulse"
					var Description = "Applies a linear impulse through the center of mass (world space). Only results in a change of linear velocity."
					var ReturnType = "Void"
					var Parameters = "(Real3 linear)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "linear"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyLinearVelocity"
					var Description = "Adds to the current linear velocity. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Real3 linear)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "linear"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyTorque"
					var Description = "Applies a torque through the center of mass of the body. (world space)"
					var ReturnType = "Void"
					var Parameters = "(Real3 torque)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "torque"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ApplyVelocityAtPoint"
					var Description = "Applies a velocity at a world space point on the object. Results in a change to linear and angular velocity."
					var ReturnType = "Void"
					var Parameters = "(Real3 velocity, Real3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "velocity"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ForceAsleep"
					var Description = "Forces the object asleep. Warning: calling this function could create gameplay flaws if used incorrectly, use at your own risk (and sparingly)."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ForceAwake"
					var Description = "Forces the object awake. Will reset the sleep timer."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetPointVelocity"
					var Description = "Computes the linear point velocity of world-space point."
					var ReturnType = "Real3"
					var Parameters = "(Real3 worldPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RotateGizmo"
			var BaseClass = "Component"
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ChangeInRotation"
					var Type = "Real"
					var Description = "Resultant rotation change for an on-going gizmo drag."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapAngle"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Snapping"
					var Type = "Boolean"
					var Description = "Snapping."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Rune"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Value"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "RuneIterator"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "RuneIterator"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ByteIndex"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Rune"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OriginalString"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Decrement"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Equals"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(RuneIterator)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "RuneIterator"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Increment"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ScaleGizmo"
			var BaseClass = "Component"
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ChangeInScale"
					var Type = "Real3"
					var Description = "Resultant scale change for an on-going gizmo drag."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ScalingDir"
					var Type = "Real3"
					var Description = "Denotes if the scale is increasing."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapDistance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapMode"
					var Type = "GizmoSnapMode"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Snapping"
					var Type = "Boolean"
					var Description = "Snapping."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Segment"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "End"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Start"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetPoint"
					var Description = "Returns the point at the given t-value."
					var ReturnType = "Real3"
					var Parameters = "(Real)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetTValue"
					var Description = "Returns the t-value that would result in the given point projected onto the segment."
					var ReturnType = "Real"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SelectionIcon"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Utility selection behavior for objects in the editor."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Material"
					var Type = "Material"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "OverrideSelections"
					var Type = "Boolean"
					var Description = "If collider/graphical or other selection logic should be disabled and only selectable via this icon."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShaderInputs"
					var Type = "ShaderInputs"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = "Sprite based image to use for icon, will not animate."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScale"
					var Type = "Real"
					var Description = "Scalar for how big the icon should appear in the viewport."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VisibilityEvents"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Visible"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SendableEvent"
			var BaseClass = "Event"
			var Library = "NetworkingLibrary"
			var Description = "This event can be sent over the network."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SimpleAnimation"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Plays a single animation on Initialize."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Animation"
					var Type = "Animation"
					var Description = "Animation getter/setter."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PlayMode"
					var Type = "AnimationPlayMode"
					var Description = "Play mode getter/setter."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ChainAnimation"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CrossBlend"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, Real transitionTime, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "transitionTime"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DirectBlend"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, Real transitionTime, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "transitionTime"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlayIsolatedAnimation"
					var Description = ""
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, Cog rootBone, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "rootBone"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlaySingle"
					var Description = "Play animations directly."
					var ReturnType = "AnimationNode"
					var Parameters = "(Animation animation, AnimationPlayMode playMode)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "animation"
							var Type = "Animation"
							var Description = ""
						}
						Parameter
						{
							var Name = "playMode"
							var Type = "AnimationPlayMode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SimpleGizmoBase"
			var BaseClass = "Component"
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Color"
					var Type = "Real4"
					var Description = "Display colors."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DrawOnTop"
					var Type = "Boolean"
					var Description = "Whether or not to draw on top of all objects regardless of depth."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HoverColor"
					var Type = "Real4"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MouseInput"
					var Type = "Boolean"
					var Description = "Whether or not this Gizmo should receive mouse input."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PickingPriority"
					var Type = "Integer"
					var Description = "Used to manually determine which Gizmo gets selected when the mouse is over multiple Gizmos. Higher priority will get picked first."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseParentAsViewScaleOrigin"
					var Type = "Boolean"
					var Description = "If enabled, the gizmo will scale around it's parent."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ViewScaled"
					var Type = "Boolean"
					var Description = "If enabled, the size of the gizmo will stay the same regardless of how far away the camera is."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SimpleSound"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Plays a specified SoundCue, either when created or when the Play method is called."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Cue"
					var Type = "SoundCue"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "IsPlaying"
					var Type = "Boolean"
					var Description = "Will be true if the SoundCue is currently being played."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this Property to true will pause a currently playing SoundCue. Setting it to false will resume playback."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Positional"
					var Type = "Boolean"
					var Description = "If this property is true the SoundCue will be played positionally (heard at a specific location by SoundListeners) through the SoundEmitter component on the same object. If false, the SoundCue will be played through the SoundSpace, and will NOT be affected by any SoundEmitter settings."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StartPlaying"
					var Type = "Boolean"
					var Description = "If this property is true the SoundCue will begin playing as soon as the object is created."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Play"
					var Description = "Begins playing the SoundCue chosen in the Cue property and returns the resulting SoundInstance. If already playing it will be stopped and re-started."
					var ReturnType = "SoundInstance"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Stop"
					var Description = "Stops a currently playing SoundInstance if it exists."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Skeleton"
			var BaseClass = "Component"
			var Library = "GraphicsLibrary"
			var Description = "Stores a map of Bones so that SkinnedModels can collect transform matrices for mesh skinning."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SkinnedModel"
			var BaseClass = "Graphical"
			var Library = "GraphicsLibrary"
			var Description = "Renders a mesh using the transform hierarchy of a Skeleton to apply skinning."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Mesh"
					var Type = "Mesh"
					var Description = "Mesh that the graphical will render."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SkeletonPath"
					var Type = "CogPath"
					var Description = "Path to an object with a Skeleton component that will be used for skinning."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Sound"
			var BaseClass = "Resource"
			var Library = "SoundLibrary"
			var Description = "The resource for a single audio file."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Channels"
					var Type = "Integer"
					var Description = "The number of audio channels in the file."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Length"
					var Type = "Real"
					var Description = "The length of the audio file, in seconds."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SampleCount"
					var Type = "Integer"
					var Description = "The total number of audio samples in the file."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SampleRate"
					var Type = "Integer"
					var Description = "The samples per second rate used by the audio file."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundAttenuator"
			var BaseClass = "DataResource"
			var Library = "SoundLibrary"
			var Description = "Decreases a positional sound's volume as the SoundEmitter gets further away from a SoundListener."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "FalloffCurve"
					var Type = "SampleCurve"
					var Description = "The SampleCurve resource to use as the attenuation's falloff curve. It will be normalized and stretched to fit between the StartDistance and StopDistance values."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FalloffCurveType"
					var Type = "FalloffCurveType"
					var Description = "The type of curve used to reduce the sound's volume over distance. The default is a logarithmic curve which mimics the real world (volume drops quickly at the start, then slowly). Other options are Linear, Squared (slow then linear), Sine (linear then slow), SquareRoot (quick then linear), or Custom."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LowPassCutoffFreq"
					var Type = "Real"
					var Description = "The lowest cutoff frequency of the low pass filter, reached at the StopDistance. The cutoff frequency will be interpolated logarithmically from 15000.00 (a value with very little effect on the sound) to the LowPassCutoffFreq between the LowPassStartDistance and the StopDistance."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LowPassStartDistance"
					var Type = "Real"
					var Description = "The distance at which the low pass filter begins to take effect."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinAttenuatedVolume"
					var Type = "Real"
					var Description = "The lowest volume that the attenuation will reach. If set above 0, the sound will continue to be heard at all distances."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StartDistance"
					var Type = "Real"
					var Description = "The distance from a SoundListener at which the sound's volume begins attenuating. At shorter distances the volume will not be changed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StopDistance"
					var Type = "Real"
					var Description = "The distance at which the attenuation reaches the minimum volume. No volume changes will happen past this distance."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseLowPassFilter"
					var Type = "Boolean"
					var Description = "If true, a low pass filter will be applied to the sound after reaching a specified distance, mimicking the way sound is muffled with distance in real life. The filter begins at the LowPassStartDistance and interpolates its cutoff frequency logarithmically until the StopDistance. The filter will not change past the StopDistance."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundBuffer"
			var BaseClass = "ReferenceCountedObject"
			var Library = "SoundLibrary"
			var Description = "Used with a CustomAudioNode to play audio data directly."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SampleCount"
					var Type = "Integer"
					var Description = "The number of samples currently in the buffer."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddSampleToBuffer"
					var Description = "Adds a new audio sample to the end of the buffer."
					var ReturnType = "Void"
					var Parameters = "(Real sample)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sample"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetSampleAtIndex"
					var Description = "Returns the sample at a specific index from the beginning of the buffer."
					var ReturnType = "Real"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Reset"
					var Description = "Removes all data from the buffer and resets it."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundBuilder"
			var BaseClass = "BuilderComponent"
			var Library = "ContentMetaLibrary"
			var Description = "Sound builder loads wave data and compresses into an engine loadable format (ogg, etc)"
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AudioChannels"
					var Type = "Integer"
					var Description = "The number of audio channels in the file."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Compressed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CompressionQuality"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FileLength"
					var Type = "Real"
					var Description = "The length of the audio file, in seconds."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SampleRate"
					var Type = "Integer"
					var Description = "The sample rate (samples per second) of the audio file."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SavedFormat"
					var Type = "AudioFileFormats"
					var Description = "The audio format that the file has been saved in. WAV files that are compressed or are in a format which can't be processed by the audio engine will be saved in OGG format."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Streamed"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundCue"
			var BaseClass = "DataResource"
			var Library = "SoundLibrary"
			var Description = "Settings and Sounds for playing audio files."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Attenuator"
					var Type = "SoundAttenuator"
					var Description = "If a SoundAttenuator resource is selected, it will be applied to reduce the sound's volume with distance when played through a SoundEmitter. If DefaultNoAttenuation is selected on the SoundCue and a different SoundAttenuator is selected on the SoundEmitter, the SoundEmitter's settings will be applied. If DefaultNoAttenuation is selected on both the sound will not be attenuated."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "BeatsPerMinute"
					var Type = "Real"
					var Description = "The speed of the music, using beats per minute."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "DecibelVariation"
					var Type = "Real"
					var Description = "Sets how much the Decibels will be randomized every time the SoundCue plays. If Decibels is 0, and DecibelVariation is 4, the volume adjustment will be chosen randomly between -4 and 4."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "This property affects both the pitch and speed of the sound played by the SoundCue. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PitchVariation"
					var Type = "Real"
					var Description = "Sets how much the pitch will be randomized every time the SoundCue plays. If Pitch is 0, and PitchVariation is 0.3, the pitch of the sound will be chosen randomly between -0.3 and 0.3."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PlayMode"
					var Type = "SoundPlayMode"
					var Description = "If Single is chosen the SoundInstance created by the SoundCue will be played once and will stop when it reaches its EndTime. If Looping is chosen the SoundInstance will play continuously until either it is stopped or its Looping property is set to false."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SelectMode"
					var Type = "SoundSelectMode"
					var Description = "If Random is chosen the SoundCue will randomly choose which SoundEntry to play. If Sequential is chosen it will play the SoundEntries in order."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SemitoneVariation"
					var Type = "Real"
					var Description = "Sets how much the pitch will be randomized every time the SoundCue plays. If Semitones is 0, and SemitoneVariation is 5, the pitch of the sound will be chosen randomly between -5 and 5."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "This property, specified in semitones (or half-steps), affects both the pitch and speed of the sound played by the SoundCue. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShowMusicOptions"
					var Type = "Boolean"
					var Description = "If true, the music options will be shown. If false, they will be hidden."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SoundTags"
					var Type = "SoundTags"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Sounds"
					var Type = "Sounds"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimeSigBeats"
					var Type = "Real"
					var Description = "The top number of the music's time signature (beats per measure)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimeSigValue"
					var Type = "Real"
					var Description = "The bottom number of the music's time signature (which type of note has the beat)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseDecibelVariation"
					var Type = "Boolean"
					var Description = "If false, the VolumeVariation value will be used to randomize the volume. If true, the DecibelVariation field will be shown and will be used for randomization."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseSemitoneVariation"
					var Type = "Boolean"
					var Description = "If false, the PitchVariation value will be used to randomize the volume. If true, the SemitoneVariation field will be shown and will be used for randomization."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment that will be applied to the sound when it plays. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VolumeVariation"
					var Type = "Real"
					var Description = "Sets how much the Volume will be randomized every time the SoundCue plays. If Volume is 1, and VolumeVariation is 0.5, the volume adjustment will be chosen randomly between 0.5 and 1.5."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddSoundEntry"
					var Description = "Adds a new SoundEntry to this SoundCue."
					var ReturnType = "Void"
					var Parameters = "(Sound sound, Real weight)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "sound"
							var Type = "Sound"
							var Description = ""
						}
						Parameter
						{
							var Name = "weight"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddSoundTagEntry"
					var Description = "Adds a new SoundTagEntry to this SoundCue."
					var ReturnType = "Void"
					var Parameters = "(SoundTag soundTag)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "soundTag"
							var Type = "SoundTag"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlayCueOnNode"
					var Description = "Plays this SoundCue using a specified SoundNode as the output and returns the resulting SoundInstance."
					var ReturnType = "SoundInstance"
					var Parameters = "(SoundNode outputNode, Boolean startPaused)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "outputNode"
							var Type = "SoundNode"
							var Description = ""
						}
						Parameter
						{
							var Name = "startPaused"
							var Type = "Boolean"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Preview"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StopPreview"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundEmitter"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Allows 3D positioning of sounds relative to SoundListeners."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Attenuator"
					var Type = "SoundAttenuator"
					var Description = "If a SoundAttenuator resource other than DefaultNoAttenuation is selected it will be applied to SoundCues without their own SoundAttenuator resource. If a SoundCue has attenuation settings those will always be used. If neither has settings, the sound will not be attenuated."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, applied to all sounds played through this SoundEmitter. A value of 0 does nothing, 6 will double the volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Directional"
					var Type = "Boolean"
					var Description = "When true, the audio output of the SoundEmitter will be limited by the EmitAngle, so that sound in front of the object will be louder than sound behind it. Within the EmitAngle the sound will be at full volume. The volume interpolates logarithmically until it reaches the RearVolume value directly behind the object."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EmitAngle"
					var Type = "Real"
					var Description = "The angle of full volume sound for a directional SoundEmitter. An angle of 90, for example, will be centered at the object's front, extending 45 degrees to the left and right."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode to use for attaching other nodes to the input of the SoundEmitter."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsPlaying"
					var Type = "Boolean"
					var Description = "This property will be true if there are SoundInstances currently associated with this SoundEmitter, even if they are paused or otherwise not audible."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OutputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode to use for attaching other nodes to the output of the SoundEmitter."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this property to true pauses all sounds currently playing through the SoundEmitter. Setting it to false will resume playback."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "This property affects both the pitch and speed of all sounds played through this SoundEmitter. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down. The Pitch property is linked to the Semitones property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RearVolume"
					var Type = "Real"
					var Description = "The volume of sound heard directly behind a directional SoundEmitter. It will only reach this value in a small area, since volume is interpolated from the edge of the EmitAngle. To make the volume as quiet as possible behind the object, use a small EmitAngle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "This property, specified in semitones (or half-steps), affects both the pitch and speed of all sounds played through this SoundEmitter.. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment applied to all sounds played through this SoundEmitter. A value of 1 does nothing, 2 will double the volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlayCue"
					var Description = "Plays the SoundCue passed into the function and returns the resulting SoundInstance."
					var ReturnType = "SoundInstance"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlayCuePaused"
					var Description = "Plays the SoundCue passed into the function and returns the resulting SoundInstance, which starts off paused."
					var ReturnType = "SoundInstance"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundEntry"
			var BaseClass = "Object"
			var Library = "SoundLibrary"
			var Description = "Stores Sounds and associated properties to be used by a SoundCue."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CrossFadeLoopTail"
					var Type = "Boolean"
					var Description = "If false, the loop tail will be added to the audio and will fade out over the specified time. If true, the audio will be cross-faded, so the beginning of the loop will fade in as the tail fades out."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EndTime"
					var Type = "Real"
					var Description = "The time (in seconds) at which the Sound will stop playing. Defaults to the length of the audio file."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LoopEndTime"
					var Type = "Real"
					var Description = "The time (in seconds) from the beginning of the audio file at which a looping SoundInstance jumps back to the LoopStartTime. If it stops looping while playing it will continue to the EndTime and then stop."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LoopStartTime"
					var Type = "Real"
					var Description = "The time (in seconds) from the beginning of the audio file that a looping SoundInstance will jump back to after it reaches the LoopEndTime. The Sound will still start at the StartTime when it is played, but after it begins looping it will start at the LoopStartTime."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LoopTailLength"
					var Type = "Real"
					var Description = "The length (in seconds) of the tail, from the LoopEndTime, which will continue to play after the Sound jumps back to the LoopStartTime. The loop tail will fade out smoothly."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Sound"
					var Type = "Sound"
					var Description = "The Sound resource that will be played by this SoundEntry."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StartTime"
					var Type = "Real"
					var Description = "The time (in seconds) at which the Sound will start playing. A value of 0 will start the Sound at the beginning of the audio file."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Weight"
					var Type = "Real"
					var Description = "The weighted randomization value for this particular SoundEntry to be chosen to play. The values of all SoundEntries are considered: two SoundEntries with weights of 1 and 1 will each play 50 percent of the time, as will weights of 10 and 10."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Preview"
					var Description = "Preview this sound with no SoundCue settings."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StopPreview"
					var Description = "Stop previewing this sound."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundEvent"
			var BaseClass = "Event"
			var Library = "SoundLibrary"
			var Description = "Sent for various audio-related events."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundInstance"
			var BaseClass = "ReferenceCountedEventObject"
			var Library = "SoundLibrary"
			var Description = "The object associated with a currently playing sound."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CustomEventTime"
					var Type = "Real"
					var Description = "The time (in seconds from the beginning of the file) to get a MusicCustomTime event."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment (in decibels) of the SoundInstance, initially set by the SoundCue's Decibels property. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EndTime"
					var Type = "Real"
					var Description = "The time in seconds from the beginning of the file that the instance will stop."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FileLength"
					var Type = "Real"
					var Description = "The length of the entire audio file, in seconds."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsPlaying"
					var Type = "Boolean"
					var Description = "This Property will be true while the SoundInstance is playing, then will become false when its sound has stopped."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Looping"
					var Type = "Boolean"
					var Description = "When this Property is true the SoundInstance will loop indefinitely. If changed to false while a SoundInstance is looping the SoundInstance will continue playing to its EndTime and then stop."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this Property to true will pause a currently playing SoundInstance. Setting it to false will resume playback."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "The pitch adjustment of the SoundInstance, initially set by the SoundCue's Pitch property. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "The pitch adjustment, in semitones (or half-steps), of the SoundInstance, initially set by the SoundCue's Semitones property. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SoundName"
					var Type = "String"
					var Description = "The name of the Sound being played by this SoundInstance."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "SoundNode"
					var Type = "SoundNode"
					var Description = "The SoundNode associated with this SoundInstance."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Time"
					var Type = "Real"
					var Description = "This property tells you to the current playback position, in seconds from the beginning of the file, and allows you to tell the instance to change its playback position to a different time. Be aware that the time will not be precisely accurate. If the Sound resource used to play the SoundInstance has Streamed selected, you cannot set the playback position."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment of the SoundInstance, initially set by the SoundCue's Volume property. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other)."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the SoundInstance's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the SoundInstance's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the SoundInstance's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitchSemitones, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitchSemitones"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the SoundInstance's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Stop"
					var Description = "Stops the playback of this SoundInstance. It cannot be re-started."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundInstanceEvent"
			var BaseClass = "Event"
			var Library = "SoundLibrary"
			var Description = "Sent for various SoundInstance-related events."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SoundInstance"
					var Type = "SoundInstance"
					var Description = "The SoundInstance associated with this event."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundListener"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Uses the object's position to \"hear\" all SoundEmitters in the SoundSpace."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Active"
					var Type = "Boolean"
					var Description = "If this property is set to false the SoundListener will not produce any sound. All audio in the SoundSpace will continue to be processed, so this is not the same as pausing the sounds."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SoundNode"
					var Type = "SoundNode"
					var Description = "The SoundNode associated with this SoundListener."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundNode"
			var BaseClass = "ReferenceCountedEventObject"
			var Library = "SoundLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoCollapse"
					var Type = "Boolean"
					var Description = "If true, this node will automatically remove itself from the graph when its last input node is removed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "BypassPercent"
					var Type = "Real"
					var Description = "The percentage of output (0 to 100) that should skip whatever processing the node does."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HasInputs"
					var Type = "Boolean"
					var Description = "Will be true if this node has any input nodes."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "HasOutputs"
					var Type = "Boolean"
					var Description = "Will be true if this node has any output nodes."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "InputCount"
					var Type = "Integer"
					var Description = "The number of input nodes that are currently attached to this node."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OutputCount"
					var Type = "Integer"
					var Description = "The number of output nodes that are currently attached to this node."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddInputNode"
					var Description = "Adds the passed in node to this node's inputs."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InsertNodeAfter"
					var Description = "Inserts the passed in node after this node in the signal path, placing it between this node and any nodes which were connected to this node's output."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InsertNodeBefore"
					var Description = "Inserts the passed in node before this node in the signal path, placing it between this node and any nodes which were connected to this node as inputs."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAllInputs"
					var Description = "Removes the connections between this node and all of its input nodes."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAllOutputs"
					var Description = "Removes the connections between this node and all of its output nodes, disconnecting this node from the graph. If this node has no inputs it will be deleted when no longer referenced."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveAndAttachInputsToOutputs"
					var Description = "Removes this node from the graph by disconnecting it from all inputs and outputs and attaching the input nodes to the output nodes, keeping the rest of the graph intact. This node will be deleted when it is no longer referenced."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RemoveInputNode"
					var Description = "Removes the node passed in as a parameter from this node's inputs."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReplaceWith"
					var Description = "Replaces this node in the graph with the node passed in as a parameter. This node will be deleted when it is no longer referenced."
					var ReturnType = "Void"
					var Parameters = "(SoundNode node)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "node"
							var Type = "SoundNode"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundSpace"
			var BaseClass = "Component"
			var Library = "SoundLibrary"
			var Description = "Sound functionality associated with a Space."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, applied to all sounds in the space. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode which is the ultimate output of all sounds in this space."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OutputNode"
					var Type = "SoundNode"
					var Description = "The SoundNode which can be used to attach other nodes which should process all audio in the SoundSpace."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PauseWithTimeSpace"
					var Type = "Boolean"
					var Description = "If true, the audio of the space will pause when the space is paused."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this Property to true will pause all audio in the space. Setting it to false will resume all audio."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Pitch"
					var Type = "Real"
					var Description = "The pitch adjustment applied to all sounds in the space. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PitchWithTimeSpace"
					var Type = "Boolean"
					var Description = "If true, the audio in the SoundSpace will be pitched according to the TimeScale of the Space(if time slows down the audio will slow down and lower in pitch, if it speeds up the audio will speed up and raise in pitch)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Semitones"
					var Type = "Real"
					var Description = "The pitch adjustment, in semitones (or half-steps), applied to all sounds in the space. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound,."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment applied to all sounds in the space. A value of 1 does nothing, 2 will double the volume, 0.5 will halve it."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the SoundSpace's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolatePitch"
					var Description = "Interpolates the SoundSpace's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateSemitones"
					var Description = "Interpolates the SoundSpace's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real pitch, Real time)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "pitch"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "time"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the SoundSpace's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real value, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlayCue"
					var Description = "Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance."
					var ReturnType = "SoundInstance"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "PlayCuePaused"
					var Description = "Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance, which starts off paused."
					var ReturnType = "SoundInstance"
					var Parameters = "(SoundCue cue)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "cue"
							var Type = "SoundCue"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundTag"
			var BaseClass = "DataResource"
			var Library = "SoundLibrary"
			var Description = "Controls settings on all tagged SoundInstances."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CompressorAttack"
					var Type = "Real"
					var Description = "The time, in milliseconds, for the filter to ramp to full effect after the input reaches the threshold."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CompressorKneeWidth"
					var Type = "Real"
					var Description = "The knee width of the filter, in decibels."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CompressorRatio"
					var Type = "Real"
					var Description = "The ratio of the compression applied by the filter."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CompressorRelease"
					var Type = "Real"
					var Description = "The time, in milliseconds, for the filter to ramp from full effect to off after the input drops below the threshold."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CompressorThreshold"
					var Type = "Real"
					var Description = "The threshold, in decibels, at which the volume is affected by the filter."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, applied to all tagged instances."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EQBand1Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 150 Hz. Positive values will boost these frequencies while negative values will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EQBand2Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 600 Hz. Positive values will boost these frequencies while negative values will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EQBand3Gain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies within the band centered at 2500 Hz. Positive values will boost these frequencies while negative values will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EQHighPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies above 5000 Hz. Positive values will boost these frequencies while negative values will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "EQLowPassGain"
					var Type = "Real"
					var Description = "The volume adjustment applied to frequencies below 80 Hz. Positive values will boost these frequencies while negative values will reduce them."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InstanceCount"
					var Type = "Integer"
					var Description = "The number of SoundInstances currently associated with this SoundTag."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "InstanceLimit"
					var Type = "Real"
					var Description = "If this value is greater than zero, SoundCues with this SoundTag will only play if the number of tagged SoundInstances is less than this number."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Instances"
					var Type = "SoundInstanceRange"
					var Description = "This allows you to get all currently tagged SoundInstances. Using a foreach loop, you can access any SoundInstance functionality on each of the tagged instances."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "Setting this property to true will pause all tagged instances. Setting it to false will resume playback."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TagForDucking"
					var Type = "SoundTag"
					var Description = "If this property is not null, the selected SoundTag will be used to trigger this SoundTag's compressor."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseCompressor"
					var Type = "Boolean"
					var Description = "If true, the SoundTag's compressor settings will be applied to the tagged SoundInstances."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UseEqualizer"
					var Type = "Boolean"
					var Description = "If true, the SoundTag's equalizer settings will be applied to the tagged SoundInstances."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment applied to all tagged instances."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "EQSetAllBands"
					var Description = "Sets all equalizer band gain values at once. The parameters are in order from the lowest band to the highest. The last parameter is the number of seconds to interpolate the values over."
					var ReturnType = "Void"
					var Parameters = "(Real lowPass, Real band1, Real band2, Real band3, Real highPass, Real timeToInterpolate)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "lowPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band1"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band2"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "band3"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "highPass"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "timeToInterpolate"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the SoundTag's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real decibels, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "decibels"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the SoundTag's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real value, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StopSounds"
					var Description = "Stops all currently tagged SoundInstances."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TagSound"
					var Description = "Adds a new SoundInstance to this SoundTag."
					var ReturnType = "Void"
					var Parameters = "(SoundInstance instance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "instance"
							var Type = "SoundInstance"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "UnTagSound"
					var Description = "Removes a SoundInstance from this SoundTag."
					var ReturnType = "Void"
					var Parameters = "(SoundInstance instance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "instance"
							var Type = "SoundInstance"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SoundTagEntry"
			var BaseClass = "Object"
			var Library = "SoundLibrary"
			var Description = "Stores a SoundTag which will be applied to all SoundInstances created by this SoundCue."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SoundTag"
					var Type = "SoundTag"
					var Description = "This SoundTag will be added to all SoundInstances created by the SoundCue."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Space"
			var BaseClass = "Cog"
			var Library = "EngineLibrary"
			var Description = "A space is a near boundless, three-dimensional extent in which objects and events occur and have relative position, direction, and time. Essentially a world of objects that exist together. Used to divide objects between UI, World, Editor, and others. The two most Common spaces are the 'World' for the game world and the 'Ui' for the HUD and menus."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AllObjects"
					var Type = "SpaceRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "AllRootObjects"
					var Type = "HierarchyListRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "CurrentLevel"
					var Type = "Level"
					var Description = "Last level loaded."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEditorMode"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ObjectCount"
					var Type = "Integer"
					var Description = "Number of objects in the space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddObjectsFromLevel"
					var Description = "Add all objects from a level."
					var ReturnType = "Level"
					var Parameters = "(Level levelName)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "levelName"
							var Type = "Level"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Create"
					var Description = "Create an object in the space."
					var ReturnType = "Cog"
					var Parameters = "(Archetype archetype)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateAtPosition"
					var Description = "Create a object at a position in the space."
					var ReturnType = "Cog"
					var Parameters = "(Archetype archetype, Real3 position)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
						Parameter
						{
							var Name = "position"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Space"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "CreateLink"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(Archetype archetype, Cog objectA, Cog objectB)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "archetype"
							var Type = "Archetype"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectA"
							var Type = "Cog"
							var Description = ""
						}
						Parameter
						{
							var Name = "objectB"
							var Type = "Cog"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DestroyAll"
					var Description = "Destroy all objects in space."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "DestroyAllFromLevel"
					var Description = "Destroy all objects created from level."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindAllObjectsByName"
					var Description = "Find an object in the space with a given name."
					var ReturnType = "CogNameRange"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindFirstObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindFirstRootObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindLastObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindLastRootObjectByName"
					var Description = ""
					var ReturnType = "Cog"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindObjectByName"
					var Description = "Find an object in the space with a given name."
					var ReturnType = "Cog"
					var Parameters = "(String name)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetModified"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "LoadLevel"
					var Description = "Load new level replace the current level."
					var ReturnType = "Void"
					var Parameters = "(Level level)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "level"
							var Type = "Level"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Space"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "MarkModified"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "MarkNotModified"
					var Description = "Clears all modifications on this Cog. Does not clear LocalModificationOverride properties."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ReloadLevel"
					var Description = "Reload the current level."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Sphere"
			var BaseClass = ""
			var Library = "GeometryLibrary"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Center"
					var Type = "Real3"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SurfaceArea"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Expand"
					var Description = ""
					var ReturnType = "Sphere"
					var Parameters = "(Sphere, Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Sphere"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Overlap"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Sphere)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Sphere"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SphereCollider"
			var BaseClass = "Collider"
			var Library = "PhysicsLibrary"
			var Description = "Defines the collision volume for a sphere defined by a radius."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Radius"
					var Type = "Real"
					var Description = "The radius of the sphere in local space (before transform is applied)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldRadius"
					var Type = "Real"
					var Description = "The radius of the sphere after transform is applied (scale)."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SphericalParticleEmitter"
			var BaseClass = "ParticleEmitterShared"
			var Library = "GraphicsLibrary"
			var Description = "Emits particles inside a sphere."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Spline"
			var BaseClass = "ReferenceCountedObject"
			var Library = "EngineLibrary"
			var Description = "A spline built from control points. Bakes out the curve using an error term (distance from actual spline). Provides an interface to sample the curve at a given arc-length distance in order to provide constant speed interpolation."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BakedPoints"
					var Type = "SplineBakedPoints"
					var Description = "The read-only curve points baked out to line segments using the provided error."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Closed"
					var Type = "Boolean"
					var Description = "Does the spline loop back on itself?"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ControlPoints"
					var Type = "SplineControlPoints"
					var Description = "The control points used to bake out the curve."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Error"
					var Type = "Real"
					var Description = "The max number of units that a line segment is allowed to deviate from the curve."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SplineType"
					var Type = "SplineType"
					var Description = "The kind of spline (Linear, BSpline, CatmulRom). Determines how the control points affect the curve."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TotalDistance"
					var Type = "Real"
					var Description = "The total arc-length of the curve. Use to normalize the curve if you wish."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clone"
					var Description = "Create a new copy of this spline."
					var ReturnType = "Spline"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Create"
					var Description = "Create a new instance of a spline."
					var ReturnType = "Spline"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "DebugDraw"
					var Description = "Draw the baked points of the curve with the provided color."
					var ReturnType = "Void"
					var Parameters = "(Real4 color)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "color"
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ForceRebuild"
					var Description = "Forcibly rebuild the baked points from the control points."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RebuildIfModified"
					var Description = "Rebuild the baked points from the control points if they have changed. Should not need to be manually called unless the user wants to control the timing when the points are baked."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SampleDistance"
					var Description = "Samples the curve at a given arc-length distance."
					var ReturnType = "SplineSampleData"
					var Parameters = "(Real distance)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "distance"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SplineBakedPoint"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Data for a spline's baked point."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WorldPosition"
					var Type = "Real3"
					var Description = "The world position of a baked point."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SplineBakedPoints"
			var BaseClass = "SafeId32Object"
			var Library = "EngineLibrary"
			var Description = "Read-only baked points for the Spline class. Will auto-recompute if the control points have changed."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "SplineBakedPoint"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SplineControlPoint"
			var BaseClass = ""
			var Library = "EngineLibrary"
			var Description = "Data for a spline's control point."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "WorldPosition"
					var Type = "Real3"
					var Description = "The world position of a control point."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SplineControlPoints"
			var BaseClass = "SafeId32Object"
			var Library = "EngineLibrary"
			var Description = "Control points for the Spline class. Modifying this will cause the spline to be marked as modified to rebuild the baked curve when needed."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = "The number of control points contained."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Add"
					var Description = "Add a new point to the end of the array."
					var ReturnType = "Void"
					var Parameters = "(SplineControlPoint controlPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "controlPoint"
							var Type = "SplineControlPoint"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Clear"
					var Description = "Clear all control points."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = "Get the control point at the given index."
					var ReturnType = "SplineControlPoint"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = "Sets the control point at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer index, SplineControlPoint value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "SplineControlPoint"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid index"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SplineParticleAnimator"
			var BaseClass = "ParticleAnimator"
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoCalculateLifetime"
					var Type = "Boolean"
					var Description = "If checked, the lifetime on the SplineParticleEmitter will be updated to the time it would take to travel the entire path at the current speed."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Helix"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HelixOffset"
					var Type = "Real"
					var Description = "Offset in radians for where the helix starts."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HelixRadius"
					var Type = "Real"
					var Description = "The radius of the helix."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HelixWaveLength"
					var Type = "Real"
					var Description = "How fast the helix rotates in radians / second."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Mode"
					var Type = "SplineAnimatorMode"
					var Description = "The current animate mode."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Speed"
					var Type = "Real"
					var Description = "The speed at which the particles move in meters / second."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpringDampingRatio"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpringFrequencyHz"
					var Type = "Real"
					var Description = "Spring properties."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Sprite"
			var BaseClass = "BaseSprite"
			var Library = "GraphicsLibrary"
			var Description = "A generated quad that addresses atlased image data for effiecient frame-based animations and batched rendering."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AnimationActive"
					var Type = "Boolean"
					var Description = "If the Sprite animation should be playing on logic update, paused if false."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AnimationSpeed"
					var Type = "Real"
					var Description = "Scalar to the amount of time passed used to advance frames of animation."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CurrentFrame"
					var Type = "Integer"
					var Description = "Index of the frame the animation is currently on."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FlipX"
					var Type = "Boolean"
					var Description = "Flips the X axis of the Sprite's image (left/right)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FlipY"
					var Type = "Boolean"
					var Description = "Flips the Y axis of the Sprite's image (top/bottom)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = "The resource defining one or more image sequences used for frame-based animation."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StartFrame"
					var Type = "Integer"
					var Description = "Index of the frame to start the animation on when the object is initialized, 0-based."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SpriteParticleSystem"
			var BaseClass = "ParticleSystem"
			var Library = "GraphicsLibrary"
			var Description = "A particle system that uses sprites to represent each particle."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "BeamBaseScale"
					var Type = "Real"
					var Description = "How much to scale particles along their direction of movement."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "BeamVelocityScale"
					var Type = "Real"
					var Description = "How much additional scale to add to particles by how fast they are moving."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "GeometryMode"
					var Type = "SpriteParticleGeometryMode"
					var Description = "How the geometry of the particles are generated."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ParticleAnimation"
					var Type = "SpriteParticleAnimationMode"
					var Description = "How the sprite's animation should be used."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ParticleSort"
					var Type = "SpriteParticleSortMode"
					var Description = "How particles should be sorted with each other, determines draw order between particles."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SpriteSource"
					var Type = "SpriteSource"
					var Description = "The sprite definition to use for each particle."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VertexColor"
					var Type = "Real4"
					var Description = "Color attribute of the generated vertices accessible in the vertex shader, value is multiplied with the particle color."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SpriteSource"
			var BaseClass = "Resource"
			var Library = "GraphicsLibrary"
			var Description = ""
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Fill"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FrameCount"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FrameRate"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Looping"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PixelsPerUnit"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetOrigin"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetSize"
					var Description = ""
					var ReturnType = "Real2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SpriteText"
			var BaseClass = "BaseSprite"
			var Library = "GraphicsLibrary"
			var Description = "Text that is rendered from a texture atlas in the same way that Sprites are."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Font"
					var Type = "Font"
					var Description = "Font used to display the text."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FontSize"
					var Type = "Integer"
					var Description = "Size that the font will be rastered at to a texture atlas."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "PixelsPerUnit"
					var Type = "Real"
					var Description = "Number of pixels of the font size that map to one world space unit."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Text"
					var Type = "String"
					var Description = "Text to display."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TextAlign"
					var Type = "TextAlign"
					var Description = "How to position the text about the objects origin."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "GetCharacterPosition"
					var Description = "Get the position in world space of a character by index."
					var ReturnType = "Real3"
					var Parameters = "(Integer characterIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "characterIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "MeasureGivenText"
					var Description = "Get the effective size in world space that the SpriteText would be if this was its text."
					var ReturnType = "Real2"
					var Parameters = "(String text)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "text"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "MeasureText"
					var Description = "Get the effective size in world space of the current text."
					var ReturnType = "Real2"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "StickJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A stick joint is used to simulate a rope or a stick. This joint forces a constant distance between the anchor points on the objects. If there is no limit, this behaves as a stick. If there is a limit, then this behaves as a rope. Motors and springs are also applied to the axis of the rope. Add on definitions: Limit: A limit will provide a min/max distance that the anchors can be between. Motor: A motor will push/pull the objects in the direction of the rope. The motor will not have any effect unless a limit or spring is present. Spring: A spring will make the rope behave spring-like at its boundaries."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Length"
					var Type = "Real"
					var Description = "The desired length between the anchor points of object A and B."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "StreamCapabilities"
			var BaseClass = "Enum"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "GetCount"
					var Type = "StreamCapabilities"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "None"
					var Type = "StreamCapabilities"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Read"
					var Type = "StreamCapabilities"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Seek"
					var Type = "StreamCapabilities"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "SetCount"
					var Type = "StreamCapabilities"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Write"
					var Type = "StreamCapabilities"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "StreamOrigin"
			var BaseClass = "Enum"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Current"
					var Type = "StreamOrigin"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "End"
					var Type = "StreamOrigin"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
				Property
				{
					var Name = "Start"
					var Type = "StreamOrigin"
					var Description = ""
					var ReadOnly = true
					var Static = true
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "String"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "StringRange"
					var Description = "Converts the string into a string range."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Begin"
					var Type = "RuneIterator"
					var Description = "Returns the RuneIterator at the start of this string."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "ByteCount"
					var Type = "Integer"
					var Description = "Returns the number of bytes in the string."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Count"
					var Type = "Integer"
					var Description = "Returns the number of bytes in the string."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Empty"
					var Type = "Boolean"
					var Description = "Returns true if the string is emtpy."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "End"
					var Type = "RuneIterator"
					var Description = "Returns the RuneIterator at the end (one past the last Rune) of this string."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = "Returns true if the string is not empty."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Compare"
					var Description = "Compares the two strings and returns an integer to denote their relative sort order."
					var ReturnType = "Integer"
					var Parameters = "(String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CompareTo"
					var Description = "Compares this string to the given string and returns an integer to denote their relative sort order."
					var ReturnType = "Integer"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ComputeRuneCount"
					var Description = "Compute the number of runes in the string."
					var ReturnType = "Integer"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Concatenate"
					var Description = "Combines the two strings into a new string."
					var ReturnType = "String"
					var Parameters = "(String, String)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Concatenate"
					var Description = "Combines the two string ranges into a new string."
					var ReturnType = "String"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Contains"
					var Description = "Returns if the string Contains the specified substring."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "EndsWith"
					var Description = "Returns if the string ends with the specified substring."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindFirstOf"
					var Description = "Returns a StringRange that Contains the first occurrence of given StringRange."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindLastOf"
					var Description = "Returns a StringRange that Contains the last occurrence of given StringRange."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindRangeExclusive"
					var Description = "Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring excludes 'startRange' and 'endRange'."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindRangeInclusive"
					var Description = "Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring includes 'startRange' and 'endRange'."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any, any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any, any, any, any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any, any, any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FormatC"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(String, any, any, any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "FromChar"
					var Description = "Constructs a string from the ascii index of a character."
					var ReturnType = "String"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Get"
					var Description = ""
					var ReturnType = "Rune"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsNullOrEmpty"
					var Description = "Returns if the given string is null or empty."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "IsNullOrWhitespace"
					var Description = "Returns if the given string is null, empty, or all whitespace."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Join"
					var Description = "Concatenates the given strings with the given separator string."
					var ReturnType = "String"
					var Parameters = "(StringRange, StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Join"
					var Description = "Concatenates the given strings with the given separator string."
					var ReturnType = "String"
					var Parameters = "(StringRange, StringRange, StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Join"
					var Description = "Concatenates the given strings with the given separator string."
					var ReturnType = "String"
					var Parameters = "(StringRange, StringRange, StringRange, StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "Replace"
					var Description = "Returns a new string with all occurances of a substrings replaced with another substring."
					var ReturnType = "String"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RuneIteratorFromByteIndex"
					var Description = "Finds the iterator from a byte index. WARNING: Strings are UTF8 and constructing an iterator from bytes indices can make an iterator in the middle of a rune."
					var ReturnType = "RuneIterator"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RuneIteratorFromRuneIndex"
					var Description = "Finds the iterator from a rune index. WARNING: this may be slow as finding an iterator from rune index requires a linear search."
					var ReturnType = "RuneIterator"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Split"
					var Description = "Splits the string, according to the separator string, into a range of substrings."
					var ReturnType = "StringSplitRange"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StartsWith"
					var Description = "Returns if the string starts with the specified substring."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SubString"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "(RuneIterator, RuneIterator)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "RuneIterator"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "RuneIterator"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SubStringBytes"
					var Description = "Constructs a substring based upon a number of bytes. WARNING: strings are UTF8 so indexing by bytes could produce unexpected results on non-ascii strings."
					var ReturnType = "StringRange"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SubStringFromRuneIndices"
					var Description = "Creates a substring from start and end indices. WARNING: this may be slow as finding an index for a UTF8 string requires a linear search."
					var ReturnType = "String"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToLower"
					var Description = "Returns a copy of the string that has been converted to lowercase."
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToUpper"
					var Description = "Returns a copy of the string that has been converted to uppercase."
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Trim"
					var Description = "Trims all leading and trailing whitespace."
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TrimEnd"
					var Description = "Trims all trailing whitespace."
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TrimStart"
					var Description = "Trims all leading whitespace."
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "StringBuilder"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToString"
					var Description = ""
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Write"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "WriteLine"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(any)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "any"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "StringRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "StringRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Begin"
					var Type = "RuneIterator"
					var Description = "Returns the RuneIterator at the start of this range."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "Rune"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Empty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "End"
					var Type = "RuneIterator"
					var Description = "Returns the RuneIterator at the end (one past the last Rune) of this range."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OriginalString"
					var Type = "String"
					var Description = "Returns the entire string that this range was constructed from."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Compare"
					var Description = "Compares the two string ranges and returns an integer to denote their relative sort order."
					var ReturnType = "Integer"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "CompareTo"
					var Description = "Returns if this string range is equal to the given range."
					var ReturnType = "Integer"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Contains"
					var Description = "Returns if the string Contains the specified substring."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "EndsWith"
					var Description = "Returns if the string ends with the specified substring."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindFirstOf"
					var Description = "Returns a StringRange that Contains the first occurrence of given StringRange."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindLastOf"
					var Description = "Returns a StringRange that Contains the last occurrence of given StringRange."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindRangeExclusive"
					var Description = "Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring excludes 'startRange' and 'endRange'."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "FindRangeInclusive"
					var Description = "Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring includes 'startRange' and 'endRange'."
					var ReturnType = "StringRange"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Replace"
					var Description = "Returns a new string with all occurances of a substrings replaced with another substring."
					var ReturnType = "String"
					var Parameters = "(StringRange, StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RuneIteratorFromByteIndex"
					var Description = "Finds the iterator from a byte index. WARNING: Strings are UTF8 and constructing an iterator from bytes indices can make an iterator in the middle of a rune."
					var ReturnType = "RuneIterator"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RuneIteratorFromRuneIndex"
					var Description = "Finds the iterator from a rune index (the 'character' index). WARNING: this may be slow as finding an iterator from rune index requires a linear search."
					var ReturnType = "RuneIterator"
					var Parameters = "(Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Split"
					var Description = "Splits the string, according to the separator string, into a range of substrings."
					var ReturnType = "StringSplitRange"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "StartsWith"
					var Description = "Returns if the string ends with the specified substring."
					var ReturnType = "Boolean"
					var Parameters = "(StringRange)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "StringRange"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SubString"
					var Description = "Constructs a StringRange from the given begin and end iterators."
					var ReturnType = "StringRange"
					var Parameters = "(RuneIterator, RuneIterator)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "RuneIterator"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "RuneIterator"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SubStringBytes"
					var Description = "Constructs a substring based upon a number of bytes. WARNING: strings are UTF8 so indexing by bytes could produce unexpected results on non-ascii strings."
					var ReturnType = "StringRange"
					var Parameters = "(Integer, Integer)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = ""
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToLower"
					var Description = "Returns a copy of the string that has been converted to lowercase."
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToString"
					var Description = "Returns a new string of the current range."
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToUpper"
					var Description = "Returns a copy of the string that has been converted to uppercase."
					var ReturnType = "String"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Trim"
					var Description = "Trims all leading and trailing whitespace."
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TrimEnd"
					var Description = "Trims all trailing whitespace."
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TrimStart"
					var Description = "Trims all leading whitespace."
					var ReturnType = "StringRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "StringSplitRange"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "All"
					var Type = "StringSplitRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Current"
					var Type = "StringRange"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsNotEmpty"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "MoveNext"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SubConvexMesh"
			var BaseClass = "SafeId32Object"
			var Library = "PhysicsLibrary"
			var Description = "Contains the indices of a convex mesh. The triangle indices are the primary method to configure this (required for mass computations). The regular indices are used for debug drawing and to reduce intersection tests by removing duplicate points. If left empty, Indices will be auto-filled from the triangle indices."
			var Tags = Array
			{
				"Physics"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Indices"
					var Type = "MultiConvexMeshIndexData"
					var Description = "The vertex indices on the main mesh used to generate the convex hull."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Mesh"
					var Type = "MultiConvexMesh"
					var Description = "The MultiConvexMesh that owns this sub-mesh."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TriangleIndices"
					var Type = "MultiConvexMeshIndexData"
					var Description = "The vertex indices on the main mesh used to generate triangle indices for computing mass information and debug drawing. More indices are needed for determining triangles than for generating the convex mesh."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Valid"
					var Type = "Boolean"
					var Description = "Is this sub-mesh incorrectly configured. Typically means that the indices don't point to valid vertices. Also the number of triangle indices could be incorrect (multiple of 3)."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "SweepResult"
			var BaseClass = ""
			var Library = "PhysicsLibrary"
			var Description = "Cast result from performing a sweep test."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "OtherCollider"
					var Type = "Collider"
					var Description = "The other collider being hit."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OtherObject"
					var Type = "Cog"
					var Description = "The other cog being hit."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Penetration"
					var Type = "Real"
					var Description = "The amount of overlap with this object. Will typically be zero unless the objects start in contact."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Time"
					var Type = "Real"
					var Description = "The time of impact that this collision first happens."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldNormalTowardsOther"
					var Type = "Real3"
					var Description = "The contact normal pointing from the sweeping object towards the other object."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldNormalTowardsSelf"
					var Type = "Real3"
					var Description = "The contact normal pointing from the other object towards the sweeping object."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldPoint"
					var Type = "Real3"
					var Description = "The point of intersection in world-space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TcpSocket"
			var BaseClass = "EventObject"
			var Library = "NetworkingLibrary"
			var Description = "Manages all the client/server/peer connections."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ConnectionCount"
					var Type = "Integer"
					var Description = "Get the number of connections we have."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IncomingConnectionCount"
					var Type = "Integer"
					var Description = "Get the number of incoming connections."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "OutgoingConnectionCount"
					var Type = "Integer"
					var Description = "Get the number of outgoing connections."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Close"
					var Description = "Close all activity (whether listening or connected to a server)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "CloseConnection"
					var Description = ""
					var ReturnType = "Void"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Connect"
					var Description = "Attempt to connect to a host on the given port."
					var ReturnType = "Void"
					var Parameters = "(String host, Integer port)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "host"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsConnected"
					var Description = "Check if we are currently connected to anyone."
					var ReturnType = "Boolean"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Listen"
					var Description = "Listen for incoming connections."
					var ReturnType = "Boolean"
					var Parameters = "(Integer port, Integer maxConnections)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxConnections"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Listen"
					var Description = "Listen for incoming connections."
					var ReturnType = "Boolean"
					var Parameters = "(Integer port, Integer maxConnections, TcpSocketBind bindTo)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "port"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "maxConnections"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "bindTo"
							var Type = "TcpSocketBind"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SendTo"
					var Description = "Send an event to a specific connection index."
					var ReturnType = "Void"
					var Parameters = "(String eventId, SendableEvent event, Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SendToAll"
					var Description = "Send an event to all connections."
					var ReturnType = "Void"
					var Parameters = "(String eventId, SendableEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SendToAllAndSelf"
					var Description = "Send an event to all connections and dispatch on self."
					var ReturnType = "Void"
					var Parameters = "(String eventId, SendableEvent event)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SendToAllExcept"
					var Description = "Send an event to all connections except a particular connection index."
					var ReturnType = "Void"
					var Parameters = "(String eventId, SendableEvent event, Integer exceptIndex)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "eventId"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "event"
							var Type = "SendableEvent"
							var Description = ""
						}
						Parameter
						{
							var Name = "exceptIndex"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TextBlock"
			var BaseClass = "DocumentResource"
			var Library = "EngineLibrary"
			var Description = "A Text resource is a generic resource for simple text data for game logic."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Text"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TextEditorConfig"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AutoCompleteOnEnter"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CodeFolding"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ColorScheme"
					var Type = "String"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ConfidentAutoCompleteOnSymbols"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "FontSize"
					var Type = "Integer"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "KeywordAndTypeCompletion"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LineNumbers"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalWordCompletion"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShowWhiteSpace"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TabWidth"
					var Type = "TabWidth"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Texture"
			var BaseClass = "Resource"
			var Library = "GraphicsLibrary"
			var Description = "Data that represents a texture in the way that is intended to be used by graphics hardware."
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AddressingX"
					var Type = "TextureAddressing"
					var Description = "How to treat uv coordinates outside of [0, 1] along the Texture's width."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "AddressingY"
					var Type = "TextureAddressing"
					var Description = "How to treat uv coordinates outside of [0, 1] along the Texture's height."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Anisotropy"
					var Type = "TextureAnisotropy"
					var Description = "Max ratio of anisotropy that filtering will account for at oblique viewing angles."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CompareFunc"
					var Type = "TextureCompareFunc"
					var Description = "Which method of comparison should be used if CompareMode is set to Enable."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "CompareMode"
					var Type = "TextureCompareMode"
					var Description = "If sampling in hardware should perform comparison instead of fetching. Requires using SamplerShadow2d in the shader."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Compression"
					var Type = "TextureCompression"
					var Description = "Block compression method being used. Requires pre-processing, cannot be set for runtime Textures."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Filtering"
					var Type = "TextureFiltering"
					var Description = "How samples should be blended under minification/magnification."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Format"
					var Type = "TextureFormat"
					var Description = "Memory format of the stored pixel data. Set on Upload() for runtime Textures."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Height"
					var Type = "Integer"
					var Description = "Height of the Texture in pixels. Set on Upload() for runtime Textures."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "MipMapping"
					var Type = "TextureMipMapping"
					var Description = "If downsampled versions of the texture (mip maps) should be generated. PreGenerated is not valid for runtime Textures."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Size"
					var Type = "Integer2"
					var Description = "Width and height (x, y) of the Texture in pixels. Set on Upload() for runtime Textures."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Type"
					var Type = "TextureType"
					var Description = "The type of texture data being represented."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Width"
					var Type = "Integer"
					var Description = "Width of the Texture in pixels. Set on Upload() for runtime Textures."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "CreateRuntime"
					var Description = "Makes an anonymous Texture resource that can be defined by script and uploaded to the gpu."
					var ReturnType = "Texture"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = true
				}
				Method
				{
					var Name = "SubUpload"
					var Description = "Uploads the given texture data, overwriting a sub region of the texture data that is already on the gpu."
					var ReturnType = "Void"
					var Parameters = "(TextureData textureData, Integer xOffset, Integer yOffset)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "textureData"
							var Type = "TextureData"
							var Description = ""
						}
						Parameter
						{
							var Name = "xOffset"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "yOffset"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Error"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Upload"
					var Description = "Uploads the given texture data to the gpu, configured with the current settings of this Texture."
					var ReturnType = "Void"
					var Parameters = "(TextureData textureData)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "textureData"
							var Type = "TextureData"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Error"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TextureData"
			var BaseClass = ""
			var Library = "GraphicsLibrary"
			var Description = "Modifiable texture data that can be used to upload to a runtime Texture resource. All formats use one interface for get/set, all values are converted to/from floats and unused channels are ignored. Integer formats are represented in the normalized range [0, 1]."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Format"
					var Type = "TextureFormat"
					var Description = "Memory format of the stored pixel data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Height"
					var Type = "Integer"
					var Description = "Height of the texture data in pixels."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "PixelCount"
					var Type = "Integer"
					var Description = "Total number of pixels in texture data."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Width"
					var Type = "Integer"
					var Description = "Width of the texture data in pixels."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Get"
					var Description = "Returns the pixel values at the given index."
					var ReturnType = "Real4"
					var Parameters = "(Integer index)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Error"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Get"
					var Description = "Returns the pixel values at the given index."
					var ReturnType = "Real4"
					var Parameters = "(Integer x, Integer y)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "x"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "y"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = "Sets the pixel values at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer index, Real4 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "index"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Error"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "Set"
					var Description = "Sets the pixel values at the given index."
					var ReturnType = "Void"
					var Parameters = "(Integer x, Integer y, Real4 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "x"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "y"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "value"
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ThrustEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a directional force at the thrust effect's center. When applied to a rigid body, this will compute a torque if the force's direction does not go through the center of mass. Useful for modeling any sort of a thruster."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "ForceDirection"
					var Type = "Real3"
					var Description = "The direction that the force should be applied."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ForceStrength"
					var Type = "Real"
					var Description = "The strength of the force being applied in the force direction."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalSpaceDirection"
					var Type = "Boolean"
					var Description = "Determines if this force is to be applied in local or world space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldForceDirection"
					var Type = "Real3"
					var Description = "The direction that the force should be applied in world space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TileMapSource"
			var BaseClass = "Resource"
			var Library = "GameplayLibrary"
			var Description = ""
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TilePaletteSource"
			var BaseClass = "Resource"
			var Library = "EditorLibrary"
			var Description = ""
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TimeSpace"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Time space component controls time for a Space."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dt"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "DtOrZero"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Frame"
					var Type = "Integer"
					var Description = "The current frame we are on (starts at 0 and counts up for every frame that is run) This value counts up regardless of if the space is paused."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "GloballyPaused"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "MaxDt"
					var Type = "Real"
					var Description = "The maximum amount of time we send when running in 'ActualFrametime' mode If this value is set too high and the user does anything to pause their system or the game (example grabbing the window) then a large frame time will be sent out and physics objects will jump very far (causing tunnelling and random bounces)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinDt"
					var Type = "Real"
					var Description = "The minimum amount of time we send when running in 'ActualFrametime' mode Ideally this is set to a very small non-zero value to prevent any division by zero errors."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Paused"
					var Type = "Boolean"
					var Description = "If the time space is paused then we cease sending out logic update events When paused, the Dt will remain at whatever it was (it will NOT be set to 0)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RealDt"
					var Type = "Real"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "RealTimePassed"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "StepCount"
					var Type = "Integer"
					var Description = "Causes the engine to update multiple times before rendering a frame."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimeMode"
					var Type = "TimeMode"
					var Description = "When set to fixed framerate the Dt/frame time will never change (it will send whatever the project frame-rate-limiter is set to) This means it is important to run with a frame-rate limiter of some kind otherwise the game will appear to run much faster/slower Note: For determinism, you should always run in FixedFrametime mode When set to actual framerate we will send out the real time that the engine is encountering (clamped by MinDt / MaxDt)"
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimePassed"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimeScale"
					var Type = "Real"
					var Description = "Scale the speed of time for interesting effects like bullet time or fast paced gameplay."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Step"
					var Description = "Allows the engine to be advance one frame forward. Useful for debugging one frame at a time."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TogglePause"
					var Description = "Toggles the state of paused."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TorqueEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a torque to the center of mass of a body."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalTorque"
					var Type = "Boolean"
					var Description = "Determines if the torque is applied in local or world space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TorqueAxis"
					var Type = "Real3"
					var Description = "The axis that the torque is being applied about."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TorqueStrength"
					var Type = "Real"
					var Description = "The strength of the torque being applied."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldTorqueAxis"
					var Type = "Real3"
					var Description = "The axis of the torque in world space (can be used to manually add torque to a RigidBody)."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Transform"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Transform component class. The transform component provides the position, rotation and scale of an object."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EulerAngles"
					var Type = "Real3"
					var Description = "The rotation of the transform as an Euler angle vector in radians."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalRotation"
					var Type = "Quaternion"
					var Description = "Local rotation relative to parent."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalScale"
					var Type = "Real3"
					var Description = "Local Scale relative to parent."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalTranslation"
					var Type = "Real3"
					var Description = "Local Translation relative to parent."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Rotation"
					var Type = "Quaternion"
					var Description = "Local rotation relative to parent."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Scale"
					var Type = "Real3"
					var Description = "Local Scale relative to parent."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Translation"
					var Type = "Real3"
					var Description = "Local Translation relative to parent."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldMatrix"
					var Type = "Real4x4"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "WorldRotation"
					var Type = "Quaternion"
					var Description = "Rotation in World Space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldScale"
					var Type = "Real3"
					var Description = "Scale in World Space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldTranslation"
					var Type = "Real3"
					var Description = "Translation in World Space."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "RotateAnglesLocal"
					var Description = "Rotate object in local space by the given Euler angle vector (in radians)."
					var ReturnType = "Void"
					var Parameters = "(Real3 angles)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angles"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RotateAnglesWorld"
					var Description = "Rotate object in world space by the given Euler angle vector (in radians)."
					var ReturnType = "Void"
					var Parameters = "(Real3 angles)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "angles"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RotateAround"
					var Description = "Rotate around a given point with the given rotation."
					var ReturnType = "Void"
					var Parameters = "(Real3 point, Quaternion rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "rotation"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RotateLocal"
					var Description = "Rotate object in local space."
					var ReturnType = "Void"
					var Parameters = "(Quaternion rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rotation"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "RotateWorld"
					var Description = "Rotate object in world space."
					var ReturnType = "Void"
					var Parameters = "(Quaternion rotation)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "rotation"
							var Type = "Quaternion"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetEulerAnglesXYZ"
					var Description = "Sets the rotation of the transform by the given Euler angles in radians."
					var ReturnType = "Void"
					var Parameters = "(Real xRadians, Real yRadians, Real zRadians)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "xRadians"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "yRadians"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "zRadians"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetRotationBases"
					var Description = "Generates a rotation matrix from the given bases."
					var ReturnType = "Void"
					var Parameters = "(Real3 facing, Real3 up, Real3 right)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "facing"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "up"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "right"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TransformNormal"
					var Description = "Transforms a local normal (direction) into world space."
					var ReturnType = "Real3"
					var Parameters = "(Real3 normal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normal"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TransformNormalInverse"
					var Description = "Transforms a world normal (direction) into local space."
					var ReturnType = "Real3"
					var Parameters = "(Real3 normal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normal"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TransformNormalLocal"
					var Description = "Transforms a normal by the local matrix (ignores parent's transform) Needed now because there is no quaternion times vector in script."
					var ReturnType = "Real3"
					var Parameters = "(Real3 normal)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "normal"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TransformPoint"
					var Description = "Transforms a local point into world space."
					var ReturnType = "Real3"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TransformPointInverse"
					var Description = "Transforms a world point into local space."
					var ReturnType = "Real3"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "TransformPointLocal"
					var Description = "Transforms a point by the local matrix (ignores parent's transform)"
					var ReturnType = "Real3"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "TranslateGizmo"
			var BaseClass = "Component"
			var Library = "EditorLibrary"
			var Description = "Updates the translation of the gizmo when it's being dragged."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "SnapDistance"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "SnapMode"
					var Type = "GizmoSnapMode"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Snapping"
					var Type = "Boolean"
					var Description = "Snapping."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "UpdateMode"
					var Type = "UpdateMode"
					var Description = "Whether or not to automatically translate the gizmo as it's moved."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Type"
			var BaseClass = "ReflectionObject"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "IsAny"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsDelegate"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEnum"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsEnumOrFlags"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsFlags"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsHandle"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "IsValue"
					var Type = "Boolean"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Library"
					var Type = "ZilchLibrary"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "Name"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "IsA"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsCastableTo"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsRawCastableTo"
					var Description = ""
					var ReturnType = "Boolean"
					var Parameters = "(Type)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Type"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "UiFocusEvent"
			var BaseClass = "Event"
			var Library = "UiWidgetLibrary"
			var Description = ""
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "UniversalJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A universal joint locks positional movement of two points together as well as locking rotation about one axis. This means it is a joint that constrains four axes and leaves two free rotational axes. This joint is most useful to model something like a arm or leg that has a large range of rotational movement."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxis0OfBodyA"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object A that the objects are allowed to rotate about."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxis0OfBodyB"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object B that the objects are allowed to rotate about."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxis1OfBodyA"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object A that the objects are allowed to rotate about."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxis1OfBodyB"
					var Type = "Real3"
					var Description = "One of the two axes in local space of object B that the objects are allowed to rotate about."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "UpdateEvent"
			var BaseClass = "Event"
			var Library = "EngineLibrary"
			var Description = "Update event Contains current time and delta time."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Dt"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RealTimePassed"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TimePassed"
					var Type = "Real"
					var Description = ""
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "UprightJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A joint to keep an object upright. Locks two axes of the objects together but allows free rotation on the plane defined by that axis. This constraint is useful for keeping any object upright. This could also be used to auto correct an object slowly by lowering the max impulse value of the constraint."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = "The locally defined axis on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = "The locally defined axis on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = "The axis in world space that is being rotated about . "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Utf8Encoding"
			var BaseClass = "IEncoding"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Variable"
			var BaseClass = "ReflectionObject"
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "VertexBuffer"
			var BaseClass = "SafeId32"
			var Library = "GraphicsLibrary"
			var Description = "Vertex data and attribute semantics for defining data that can be uploaded to the gpu."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "VertexCount"
					var Type = "Integer"
					var Description = "Returns the number of vertices that have a complete set of data stored."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "AddAttribute"
					var Description = "Adds an attribute to the definition of the vertices that are to be stored. Add the attributes in the order that they should be stored in memory on a vertex."
					var ReturnType = "Void"
					var Parameters = "(VertexSemantic semantic, VertexElementType elementType, Integer elementCount)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "semantic"
							var Type = "VertexSemantic"
							var Description = ""
						}
						Parameter
						{
							var Name = "elementType"
							var Type = "VertexElementType"
							var Description = ""
						}
						Parameter
						{
							var Name = "elementCount"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Element Count"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid Semantic"
							var Message = "[variable]"
						}
						Exception
						{
							var Title = "Invalid Element Type"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "AddByte"
					var Description = "Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddByte"
					var Description = "Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddByte"
					var Description = "Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddByte"
					var Description = "Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddReal"
					var Description = "Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Real value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddReal"
					var Description = "Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Real2 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddReal"
					var Description = "Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Real3 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddReal"
					var Description = "Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Real4 value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Real4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddShort"
					var Description = "Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer value)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "value"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddShort"
					var Description = "Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer2)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer2"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddShort"
					var Description = "Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "AddShort"
					var Description = "Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another."
					var ReturnType = "Void"
					var Parameters = "(Integer4)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Integer4"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearAttributes"
					var Description = "Clears all added attributes from the vertex definition so they can be redefined."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ClearData"
					var Description = "Clears all added vertex data so new data can be added."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetAttributes"
					var Description = "Returns a range of attribute semantics in the order that they were added."
					var ReturnType = "VertexSemanticRange"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "GetElementCount"
					var Description = "Returns the number of elements stored for the given attribute, throws exception if the attribute is not in the vertex definition."
					var ReturnType = "Integer"
					var Parameters = "(VertexSemantic semantic)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "semantic"
							var Type = "VertexSemantic"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Read"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "GetElementType"
					var Description = "Returns the type that is used to store the given attribute, throws exception if the attribute is not in the vertex definition."
					var ReturnType = "VertexElementType"
					var Parameters = "(VertexSemantic semantic)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "semantic"
							var Type = "VertexSemantic"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Read"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "GetVertexData"
					var Description = "Gets the data of an attribute of a vertex, returns values of 0 if read is invalid."
					var ReturnType = "Real4"
					var Parameters = "(Integer vertexIndex, VertexSemantic semantic)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "vertexIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "semantic"
							var Type = "VertexSemantic"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
						Exception
						{
							var Title = "Invalid Read"
							var Message = "[variable]"
						}
					}
					var Static = false
				}
				Method
				{
					var Name = "GetVertexData"
					var Description = "Gets the data of an attribute of a vertex, throws exception if attribute info doesn't match or read is invalid."
					var ReturnType = "Real4"
					var Parameters = "(Integer vertexIndex, VertexSemantic semantic, VertexElementType type, Integer count)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "vertexIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "semantic"
							var Type = "VertexSemantic"
							var Description = ""
						}
						Parameter
						{
							var Name = "type"
							var Type = "VertexElementType"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "IsValidVertexData"
					var Description = "Returns false if GetVertexData() would throw an exception with the same arguments."
					var ReturnType = "Boolean"
					var Parameters = "(Integer vertexIndex, VertexSemantic semantic, VertexElementType type, Integer count)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "vertexIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "semantic"
							var Type = "VertexSemantic"
							var Description = ""
						}
						Parameter
						{
							var Name = "type"
							var Type = "VertexElementType"
							var Description = ""
						}
						Parameter
						{
							var Name = "count"
							var Type = "Integer"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ViewportMouseEvent"
			var BaseClass = "MouseEvent"
			var Library = "GameplayLibrary"
			var Description = "All mouse events that are forwarded to reactive components or the space use this event to add extra data."
			var Tags = Array
			{
				"Event"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "CameraViewport"
					var Type = "CameraViewport"
					var Description = "Camera viewport that generated this event."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "HitDistance"
					var Type = "Real"
					var Description = "The distance away the hit point is. Used with Reactive components."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HitNormal"
					var Type = "Real3"
					var Description = "The normal at the intersection point with an object. Used with Reactive components."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "HitObject"
					var Type = "Cog"
					var Description = "Object hit in ray cast."
					var ReadOnly = true
					var Static = false
				}
				Property
				{
					var Name = "HitPosition"
					var Type = "Real3"
					var Description = "The intersection point with an object. Used with Reactive components."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RayDirection"
					var Type = "Real3"
					var Description = "Mouse Ray Direction."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "RayStart"
					var Type = "Real3"
					var Description = "Mouse Ray start."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldRay"
					var Type = "Ray"
					var Description = "The world mouse ray."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ToWorldPlane"
					var Description = "The world mouse position on any arbitrary plane."
					var ReturnType = "Real3"
					var Parameters = "(Real3 worldPlaneNormal, Real3 worldPlanePosition)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldPlaneNormal"
							var Type = "Real3"
							var Description = ""
						}
						Parameter
						{
							var Name = "worldPlanePosition"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToWorldViewPlane"
					var Description = "The world mouse position on the view plane at view depth."
					var ReturnType = "Real3"
					var Parameters = "(Real viewDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "viewDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "ToWorldZPlane"
					var Description = "The world mouse position on the z plane at depth."
					var ReturnType = "Real3"
					var Parameters = "(Real worldDepth)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "worldDepth"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Void"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "VolumeNode"
			var BaseClass = "SoundNode"
			var Library = "SoundLibrary"
			var Description = "Changes the volume of audio generated by its input SoundNodes."
			var Tags = Array
			{
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Decibels"
					var Type = "Real"
					var Description = "The volume adjustment, in decibels, that will be applied to the node's input. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "Volume"
					var Type = "Real"
					var Description = "The volume adjustment that will be applied to the node's input. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "InterpolateDecibels"
					var Description = "Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volumeDB, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volumeDB"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "InterpolateVolume"
					var Description = "Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter."
					var ReturnType = "Void"
					var Parameters = "(Real volume, Real interpolationTime)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "volume"
							var Type = "Real"
							var Description = ""
						}
						Parameter
						{
							var Name = "interpolationTime"
							var Type = "Real"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "VortexEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a force about an axis at the object's center. This will apply two forces to a body: One pulls the object towards the center of the vortex and the other applies a tangential force. Useful to model a vortex. This only expects to be used as a Region effect."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "EndCondition"
					var Type = "PhysicsEffectEndCondition"
					var Description = "How the interpolation should be handled at MaxDistance. ClampToMax will clamp to the max strength values. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative)."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InterpolationType"
					var Type = "PhysicsEffectInterpolationType"
					var Description = "The type of interpolation used (e.g. Linear, Quadratic) for the forces."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InwardStrengthAtMaxDistance"
					var Type = "Real"
					var Description = "The inward strength of the vortex at the max distance."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "InwardStrengthAtMinDistance"
					var Type = "Real"
					var Description = "The inward strength of the vortex at the min distance."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxis"
					var Type = "Boolean"
					var Description = "Determines if the vortex axis is in world or local space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MaxDistance"
					var Type = "Real"
					var Description = "The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "MinDistance"
					var Type = "Real"
					var Description = "The first distance at which attenuation will start. If an object is under the min distance, the min strength values will be used. If an object is in between min and max, then it will attenuate."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TwistStrengthAtMaxDistance"
					var Type = "Real"
					var Description = "The perpendicular strength (twist) of the vortex at max distance."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "TwistStrengthAtMinDistance"
					var Type = "Real"
					var Description = "The perpendicular strength (twist) of the vortex at min distance."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "VortexAxis"
					var Type = "Real3"
					var Description = "The axis the vortex spins about."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldVortexAxis"
					var Type = "Real3"
					var Description = "The axis the vortex spins about in world space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "WebRequester"
			var BaseClass = "Component"
			var Library = "NetworkingLibrary"
			var Description = "A component we can use to facilitate web requests."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Url"
					var Type = "String"
					var Description = "Get and set the url that we make requests to."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "Clear"
					var Description = "Clear headers and post data."
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "Run"
					var Description = "Run the web request (we should get data back in a WebResponse event)"
					var ReturnType = "Void"
					var Parameters = "()"
					var ParameterList = Array
					{
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetHeader"
					var Description = "Add a header to the web request."
					var ReturnType = "Void"
					var Parameters = "(String name, String data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "name"
							var Type = "String"
							var Description = ""
						}
						Parameter
						{
							var Name = "data"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetPostData"
					var Description = "Add Post data to the request, this will also change the request to a post request."
					var ReturnType = "Void"
					var Parameters = "(String data)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "data"
							var Type = "String"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "WeldJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A weld joint is used to lock the position and orientation of two objects together. Welds should generally not be used to make two objects rigid as they are computationally more expensive and less rigid than using composites. The primary uses for welds are for quick connections or connections that are desired to not be fully rigid. Also, while it can be done with composites too, welds can be used to model object breaking beyond some max force. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on the x, y, and z axes. Motor: A motor will attempt to drive the rotation on the x, y, and z axes. Spring: A spring will make the x, y, and z axis springy."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "WheelJoint"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A joint that models a wheel with shocks. A wheel aligns the two local axes together and allows free rotation about this axis. The specified shock axis is turned into a soft constraint to model the shocks. Note: ObjectA should be the root object as the shock axis rotates with this object. If ObjectA is the wheel, then the shock axis will rotate with the wheel, causing the shocks to not stay aligned. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalAxisA"
					var Type = "Real3"
					var Description = "The locally defined axis on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalAxisB"
					var Type = "Real3"
					var Description = "The locally defined axis on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShockAxis"
					var Type = "Real3"
					var Description = "The shock axis in the local space of body A."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldAxis"
					var Type = "Real3"
					var Description = "The axis in world space that is being rotated about . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldShockAxis"
					var Type = "Real3"
					var Description = "The shock axis after it has been translated into world space."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "WheelJoint2d"
			var BaseClass = "Joint"
			var Library = "PhysicsLibrary"
			var Description = "A joint that models a wheel with shocks. This is the 2d version of WheelJoint. This joint is used in 2d mode for increased performance and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate about. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalBasisA"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalBasisB"
					var Type = "Quaternion"
					var Description = "The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointA"
					var Type = "Real3"
					var Description = "The local point of the anchor on object A . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "LocalPointB"
					var Type = "Real3"
					var Description = "The local point of the anchor on object B . "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "ShockAxis"
					var Type = "Real3"
					var Description = "The shock axis of the wheel in object A's local space."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointA"
					var Type = "Real3"
					var Description = "The position of the anchor on object A given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldPointB"
					var Type = "Real3"
					var Description = "The position of the anchor on object B given a position in world space "
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldShockAxis"
					var Type = "Real3"
					var Description = "The shock axis of the wheel in world space."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
				Method
				{
					var Name = "ObjectLinkPointUpdated"
					var Description = "Virtual function for when an object link point changes "
					var ReturnType = "Void"
					var Parameters = "(Integer edgeIndex, Real3 localPoint)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "edgeIndex"
							var Type = "Integer"
							var Description = ""
						}
						Parameter
						{
							var Name = "localPoint"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = ""
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
				Method
				{
					var Name = "SetWorldPoints"
					var Description = "Sets the position of the anchor on object A and B given a position in world space "
					var ReturnType = "Void"
					var Parameters = "(Real3 point)"
					var ParameterList = Array
					{
						Parameter
						{
							var Name = "point"
							var Type = "Real3"
							var Description = ""
						}
					}
					var PossibleExceptionThrows = Array
					{
					}
					var Static = false
				}
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "WindEffect"
			var BaseClass = "PhysicsEffect"
			var Library = "PhysicsLibrary"
			var Description = "Applies a wind force in a given direction. The wind force is calculated from the squared wind speed and is scaled by the approximate surface area of the object in the direction of the force."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LocalSpaceDirection"
					var Type = "Boolean"
					var Description = "Determines if the wind's direction is a local or world-space vector."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WindDirection"
					var Type = "Real3"
					var Description = "The direction that the wind is blowing."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WindSpeed"
					var Type = "Real"
					var Description = "The speed that the wind is blowing."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WorldWindDirection"
					var Type = "Real3"
					var Description = "The direction of the wind in world space."
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "WindowLaunchSettings"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = "Settings for how the application window should be sized when launched."
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "LaunchFullscreen"
					var Type = "Boolean"
					var Description = "If a pre-launch popup should be used to determine how application window is sized."
					var ReadOnly = false
					var Static = false
				}
				Property
				{
					var Name = "WindowedResolution"
					var Type = "Integer2"
					var Description = "Resolution of application when launched in windowed mode."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "Wrapper"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ZilchDocumentResource"
			var BaseClass = "DocumentResource"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "Text"
					var Type = "String"
					var Description = ""
					var ReadOnly = true
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ZilchLibrary"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ZilchLibraryResource"
			var BaseClass = "Resource"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Resource"
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "ZilchPluginConfig"
			var BaseClass = "Component"
			var Library = "EngineLibrary"
			var Description = ""
			var Tags = Array
			{
				"Component"
			}
			var Properties = Array
			{
				Property
				{
					var Name = "AttemptedIdeToolsInstall"
					var Type = "Boolean"
					var Description = "If on this machine we attempted to install IDE tools for plugins."
					var ReadOnly = false
					var Static = false
				}
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
		Object
		{
			var Name = "[T]"
			var BaseClass = ""
			var Library = "Core"
			var Description = ""
			var Tags = Array
			{
			}
			var Properties = Array
			{
			}
			var Methods = Array
			{
			}
			var EventsSent = Array
			{
			}
			var ImportDocumentation = true
		}
	}
	var Enums = Array
	{
		Object
		{
			var Name = "ActionExecuteMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "FrameUpdate"
					var value = ""
				}
				Object
				{
					var key = "LogicUpdate"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ActionState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Completed"
					var value = ""
				}
				Object
				{
					var key = "Running"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AnimationBlendMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Auto"
					var value = ""
				}
				Object
				{
					var key = "Manual"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AnimationBlendType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Normalized"
					var value = ""
				}
				Object
				{
					var key = "Standard"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AnimationPlayMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Loop"
					var value = ""
				}
				Object
				{
					var key = "Pingpong"
					var value = ""
				}
				Object
				{
					var key = "PlayOnce"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ArrowHeadType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Arrow"
					var value = ""
				}
				Object
				{
					var key = "Cube"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AtomFilter"
			var EnumValues = Map
			{
				Object
				{
					var key = "AngularAxis"
					var value = ""
				}
				Object
				{
					var key = "LinearAxis"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioCueImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "Grouped"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "PerSound"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioFileFormats"
			var EnumValues = Map
			{
				Object
				{
					var key = "OGG"
					var value = ""
				}
				Object
				{
					var key = "WAV"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioLatency"
			var EnumValues = Map
			{
				Object
				{
					var key = "High"
					var value = ""
				}
				Object
				{
					var key = "Low"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AudioMixTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "AutoDetect"
					var value = ""
				}
				Object
				{
					var key = "FiveOne"
					var value = ""
				}
				Object
				{
					var key = "Mono"
					var value = ""
				}
				Object
				{
					var key = "Quad"
					var value = ""
				}
				Object
				{
					var key = "SevenOne"
					var value = ""
				}
				Object
				{
					var key = "Stereo"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Authority"
			var EnumValues = Map
			{
				Object
				{
					var key = "Client"
					var value = ""
				}
				Object
				{
					var key = "Server"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AuthorityMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Dynamic"
					var value = ""
				}
				Object
				{
					var key = "Fixed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "AxisDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "X"
					var value = ""
				}
				Object
				{
					var key = "Y"
					var value = ""
				}
				Object
				{
					var key = "Z"
					var value = ""
				}
			}
			var Description = "Defines a primary direction for an axis."
		}
		Object
		{
			var Name = "BasicNetType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Boolean"
					var value = ""
				}
				Object
				{
					var key = "Boolean2"
					var value = ""
				}
				Object
				{
					var key = "Boolean3"
					var value = ""
				}
				Object
				{
					var key = "Boolean4"
					var value = ""
				}
				Object
				{
					var key = "Byte"
					var value = ""
				}
				Object
				{
					var key = "DoubleInteger"
					var value = ""
				}
				Object
				{
					var key = "DoubleReal"
					var value = ""
				}
				Object
				{
					var key = "Integer"
					var value = ""
				}
				Object
				{
					var key = "Integer2"
					var value = ""
				}
				Object
				{
					var key = "Integer3"
					var value = ""
				}
				Object
				{
					var key = "Integer4"
					var value = ""
				}
				Object
				{
					var key = "Other"
					var value = ""
				}
				Object
				{
					var key = "Quaternion"
					var value = ""
				}
				Object
				{
					var key = "Real"
					var value = ""
				}
				Object
				{
					var key = "Real2"
					var value = ""
				}
				Object
				{
					var key = "Real2x2"
					var value = ""
				}
				Object
				{
					var key = "Real3"
					var value = ""
				}
				Object
				{
					var key = "Real3x3"
					var value = ""
				}
				Object
				{
					var key = "Real4"
					var value = ""
				}
				Object
				{
					var key = "Real4x4"
					var value = ""
				}
				Object
				{
					var key = "String"
					var value = ""
				}
			}
			var Description = "Useref\"ResourceId:Name\" String as ReplicaType? Otherwise we will use ResourceId u64 as ReplicaType (much more efficient) This impacts bandwidth performance when first spawning/cloning newreftypes to remote peers."
		}
		Object
		{
			var Name = "BasisType"
			var EnumValues = Map
			{
				Object
				{
					var key = "NegativeX"
					var value = ""
				}
				Object
				{
					var key = "NegativeY"
					var value = ""
				}
				Object
				{
					var key = "NegativeZ"
					var value = ""
				}
				Object
				{
					var key = "PositiveX"
					var value = ""
				}
				Object
				{
					var key = "PositiveY"
					var value = ""
				}
				Object
				{
					var key = "PositiveZ"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BlendEquation"
			var EnumValues = Map
			{
				Object
				{
					var key = "Add"
					var value = ""
				}
				Object
				{
					var key = "Max"
					var value = ""
				}
				Object
				{
					var key = "Min"
					var value = ""
				}
				Object
				{
					var key = "ReverseSubtract"
					var value = ""
				}
				Object
				{
					var key = "Subtract"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BlendFactor"
			var EnumValues = Map
			{
				Object
				{
					var key = "DestAlpha"
					var value = ""
				}
				Object
				{
					var key = "DestColor"
					var value = ""
				}
				Object
				{
					var key = "InvDestAlpha"
					var value = ""
				}
				Object
				{
					var key = "InvDestColor"
					var value = ""
				}
				Object
				{
					var key = "InvSourceAlpha"
					var value = ""
				}
				Object
				{
					var key = "InvSourceColor"
					var value = ""
				}
				Object
				{
					var key = "One"
					var value = ""
				}
				Object
				{
					var key = "SourceAlpha"
					var value = ""
				}
				Object
				{
					var key = "SourceAlphaSaturate"
					var value = ""
				}
				Object
				{
					var key = "SourceColor"
					var value = ""
				}
				Object
				{
					var key = "Zero"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BlendMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Enabled"
					var value = ""
				}
				Object
				{
					var key = "Separate"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "BoundType"
			var EnumValues = Map
			{
				Object
				{
					var key = "PrismJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismJoint2d"
					var value = ""
				}
				Object
				{
					var key = "RevJoint"
					var value = ""
				}
				Object
				{
					var key = "RevJoint2d"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Buttons"
			var EnumValues = Map
			{
				Object
				{
					var key = "A"
					var value = ""
				}
				Object
				{
					var key = "AnyButton"
					var value = ""
				}
				Object
				{
					var key = "B"
					var value = ""
				}
				Object
				{
					var key = "Back"
					var value = ""
				}
				Object
				{
					var key = "DpadDown"
					var value = ""
				}
				Object
				{
					var key = "DpadDownFiltered"
					var value = ""
				}
				Object
				{
					var key = "DpadLeft"
					var value = ""
				}
				Object
				{
					var key = "DpadLeftFiltered"
					var value = ""
				}
				Object
				{
					var key = "DpadRight"
					var value = ""
				}
				Object
				{
					var key = "DpadRightFiltered"
					var value = ""
				}
				Object
				{
					var key = "DpadUp"
					var value = ""
				}
				Object
				{
					var key = "DpadUpFiltered"
					var value = ""
				}
				Object
				{
					var key = "LeftShoulder"
					var value = ""
				}
				Object
				{
					var key = "LeftThumb"
					var value = ""
				}
				Object
				{
					var key = "RightShoulder"
					var value = ""
				}
				Object
				{
					var key = "RightThumb"
					var value = ""
				}
				Object
				{
					var key = "Start"
					var value = ""
				}
				Object
				{
					var key = "StickDown"
					var value = ""
				}
				Object
				{
					var key = "StickLeft"
					var value = ""
				}
				Object
				{
					var key = "StickRight"
					var value = ""
				}
				Object
				{
					var key = "StickUp"
					var value = ""
				}
				Object
				{
					var key = "X"
					var value = ""
				}
				Object
				{
					var key = "Y"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CameraDragMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "NotActive"
					var value = ""
				}
				Object
				{
					var key = "Pan"
					var value = ""
				}
				Object
				{
					var key = "Rotation"
					var value = ""
				}
				Object
				{
					var key = "Zoom"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CapsuleScalingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "PreserveHeight"
					var value = "Scale applies to the height of the cylinder."
				}
				Object
				{
					var key = "PreserveScale"
					var value = "Scale applies to the total size of the capsule."
				}
			}
			var Description = "How should a capsule collider respond to non-uniform scale?"
		}
		Object
		{
			var Name = "CastFilterState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = "Always accept this object for testing."
				}
				Object
				{
					var key = "DefaultBehavior"
					var value = "Run the rest of the filtering logic on the cast filter."
				}
				Object
				{
					var key = "Reject"
					var value = "Always reject this object for testing."
				}
			}
			var Description = "Controls custom cast filtering via theref. Allows custom filter logic per object."
		}
		Object
		{
			var Name = "CellIndexType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Absoulte"
					var value = ""
				}
				Object
				{
					var key = "Local"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CogPathPreference"
			var EnumValues = Map
			{
				Object
				{
					var key = "Absolute"
					var value = ""
				}
				Object
				{
					var key = "CogRelative"
					var value = ""
				}
				Object
				{
					var key = "SpaceRelative"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ColliderType"
			var EnumValues = Map
			{
				Object
				{
					var key = "cBox"
					var value = ""
				}
				Object
				{
					var key = "cCapsule"
					var value = ""
				}
				Object
				{
					var key = "cConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "cCylinder"
					var value = ""
				}
				Object
				{
					var key = "cEllipsoid"
					var value = ""
				}
				Object
				{
					var key = "cHeightMap"
					var value = ""
				}
				Object
				{
					var key = "cInvalid"
					var value = ""
				}
				Object
				{
					var key = "cMesh"
					var value = ""
				}
				Object
				{
					var key = "cMultiConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "cSize"
					var value = ""
				}
				Object
				{
					var key = "cSphere"
					var value = ""
				}
			}
			var Description = "All possible collider types. Needed mostly for collision detection. The order is somewhat important as collision detection currently assumes that all simple shapes (primitive types) are before the complex shapes."
		}
		Object
		{
			var Name = "CollisionFilterBlockType"
			var EnumValues = Map
			{
				Object
				{
					var key = "CollisionEndedBlock"
					var value = ""
				}
				Object
				{
					var key = "CollisionPersistedBlock"
					var value = ""
				}
				Object
				{
					var key = "CollisionStartedBlock"
					var value = ""
				}
				Object
				{
					var key = "PreSolveBlock"
					var value = ""
				}
			}
			var Description = "What kind of filter block this is. These blocks are used to send out/override collision group events of certain types (collision started, etc...)"
		}
		Object
		{
			var Name = "CollisionFilterCollisionFlags"
			var EnumValues = Map
			{
				Object
				{
					var key = "Resolve"
					var value = "Run both collision detection and resolution as normal."
				}
				Object
				{
					var key = "SkipDetection"
					var value = "Don't run collision detection. No events will be sent."
				}
				Object
				{
					var key = "SkipResolution"
					var value = "Don't run collision resolution. Detection will still be run so events might be sent out."
				}
			}
			var Description = "Controls what parts of collision detection/resolution are run for arefpair."
		}
		Object
		{
			var Name = "CollisionType"
			var EnumValues = Map
			{
				Object
				{
					var key = "CollisionEnded"
					var value = ""
				}
				Object
				{
					var key = "CollisionPersisted"
					var value = ""
				}
				Object
				{
					var key = "CollisionStarted"
					var value = ""
				}
			}
			var Description = "Used to determine what kind of collision this is during event sending."
		}
		Object
		{
			var Name = "ConflictAction"
			var EnumValues = Map
			{
				Object
				{
					var key = "Replace"
					var value = ""
				}
				Object
				{
					var key = "Skip"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConnectResponse"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
				Object
				{
					var key = "DenyFull"
					var value = ""
				}
				Object
				{
					var key = "DenyTimeout"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConnectResponseMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConstraintPositionCorrection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Baumgarte"
					var value = "Use a baumgarte penalty force."
				}
				Object
				{
					var key = "Inherit"
					var value = "Use the global position correction method."
				}
				Object
				{
					var key = "PostStabilization"
					var value = "Directly fix position errors via translation."
				}
			}
			var Description = "What kind of position correction behavior is desired for constraint or constraint type."
		}
		Object
		{
			var Name = "ControlMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "FirstPerson"
					var value = ""
				}
				Object
				{
					var key = "Orbit"
					var value = ""
				}
				Object
				{
					var key = "ZPlane"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ConvergenceState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Active"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Resting"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CoreVertexType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Count"
					var value = ""
				}
				Object
				{
					var key = "Mesh"
					var value = ""
				}
				Object
				{
					var key = "SkinnedMesh"
					var value = ""
				}
				Object
				{
					var key = "Streamed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "CullMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "BackFace"
					var value = ""
				}
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "FrontFace"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Cursor"
			var EnumValues = Map
			{
				Object
				{
					var key = "Arrow"
					var value = ""
				}
				Object
				{
					var key = "Cross"
					var value = ""
				}
				Object
				{
					var key = "Hand"
					var value = ""
				}
				Object
				{
					var key = "Invisible"
					var value = ""
				}
				Object
				{
					var key = "SizeAll"
					var value = ""
				}
				Object
				{
					var key = "SizeNESW"
					var value = ""
				}
				Object
				{
					var key = "SizeNS"
					var value = ""
				}
				Object
				{
					var key = "SizeNWSE"
					var value = ""
				}
				Object
				{
					var key = "SizeWE"
					var value = ""
				}
				Object
				{
					var key = "TextBeam"
					var value = ""
				}
				Object
				{
					var key = "Wait"
					var value = ""
				}
			}
			var Description = "StandardrefCursors."
		}
		Object
		{
			var Name = "CurveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "BSpline"
					var value = ""
				}
				Object
				{
					var key = "CatmulRom"
					var value = ""
				}
				Object
				{
					var key = "Linear"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DefaultAddOnFilters"
			var EnumValues = Map
			{
				Object
				{
					var key = "AllAngularAxes"
					var value = ""
				}
				Object
				{
					var key = "AllAxes"
					var value = ""
				}
				Object
				{
					var key = "AllLinearAxes"
					var value = ""
				}
				Object
				{
					var key = "SingleAngularAxis"
					var value = ""
				}
				Object
				{
					var key = "SingleAxis"
					var value = ""
				}
				Object
				{
					var key = "SingleLinearAxis"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DepthMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Read"
					var value = ""
				}
				Object
				{
					var key = "Write"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DetectionMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Assume"
					var value = ""
				}
				Object
				{
					var key = "Automatic"
					var value = ""
				}
				Object
				{
					var key = "Manual"
					var value = ""
				}
				Object
				{
					var key = "Manumatic"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DisconnectReason"
			var EnumValues = Map
			{
				Object
				{
					var key = "Latency"
					var value = ""
				}
				Object
				{
					var key = "Request"
					var value = ""
				}
				Object
				{
					var key = "Timeout"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "DockArea"
			var EnumValues = Map
			{
				Object
				{
					var key = "BotTool"
					var value = ""
				}
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Count"
					var value = ""
				}
				Object
				{
					var key = "Floating"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
				Object
				{
					var key = "TopTool"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Ease"
			var EnumValues = Map
			{
				Object
				{
					var key = "Linear"
					var value = ""
				}
				Object
				{
					var key = "QuadIn"
					var value = ""
				}
				Object
				{
					var key = "QuadInOut"
					var value = ""
				}
				Object
				{
					var key = "QuadOut"
					var value = ""
				}
				Object
				{
					var key = "SinIn"
					var value = ""
				}
				Object
				{
					var key = "SinInOut"
					var value = ""
				}
				Object
				{
					var key = "SinOut"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "EditorMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Mode2D"
					var value = ""
				}
				Object
				{
					var key = "Mode3D"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Enum"
			var EnumValues = Map
			{
			}
			var Description = ""
		}
		Object
		{
			var Name = "FalloffCurveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "Linear"
					var value = ""
				}
				Object
				{
					var key = "Log"
					var value = ""
				}
				Object
				{
					var key = "Sine"
					var value = ""
				}
				Object
				{
					var key = "SquareRoot"
					var value = ""
				}
				Object
				{
					var key = "Squared"
					var value = ""
				}
			}
			var Description = "The type of curve used for attenuating volume by SoundAttenuators."
		}
		Object
		{
			var Name = "Filter"
			var EnumValues = Map
			{
				Object
				{
					var key = "ActiveOffset"
					var value = ""
				}
				Object
				{
					var key = "DefaultOffset"
					var value = ""
				}
				Object
				{
					var key = "FilterFlag"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FlickedStick"
			var EnumValues = Map
			{
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FragmentCountFilter"
			var EnumValues = Map
			{
				Object
				{
					var key = "FiveFragments"
					var value = ""
				}
				Object
				{
					var key = "FourFragments"
					var value = ""
				}
				Object
				{
					var key = "OneFragment"
					var value = ""
				}
				Object
				{
					var key = "SixFragments"
					var value = ""
				}
				Object
				{
					var key = "ThreeFragments"
					var value = ""
				}
				Object
				{
					var key = "TwoFragments"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "FragmentFilter"
			var EnumValues = Map
			{
				Object
				{
					var key = "FreeAngularFragment"
					var value = ""
				}
				Object
				{
					var key = "FreeLinearFragment"
					var value = ""
				}
				Object
				{
					var key = "NoFreeAxesFragment"
					var value = ""
				}
				Object
				{
					var key = "SingleFragment"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GeometryValue"
			var EnumValues = Map
			{
				Object
				{
					var key = "Albedo"
					var value = ""
				}
				Object
				{
					var key = "Depth"
					var value = ""
				}
				Object
				{
					var key = "Metallic"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Normal"
					var value = ""
				}
				Object
				{
					var key = "Roughness"
					var value = ""
				}
				Object
				{
					var key = "Specular"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoBasis"
			var EnumValues = Map
			{
				Object
				{
					var key = "Local"
					var value = ""
				}
				Object
				{
					var key = "World"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoDragMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Line"
					var value = ""
				}
				Object
				{
					var key = "Plane"
					var value = ""
				}
				Object
				{
					var key = "ViewPlane"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoGrab"
			var EnumValues = Map
			{
				Object
				{
					var key = "Hold"
					var value = ""
				}
				Object
				{
					var key = "Toggle"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoGrabMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Hold"
					var value = ""
				}
				Object
				{
					var key = "Toggle"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoPivot"
			var EnumValues = Map
			{
				Object
				{
					var key = "Average"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Primary"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GizmoSnapMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Relative"
					var value = ""
				}
				Object
				{
					var key = "WorldAxes"
					var value = ""
				}
				Object
				{
					var key = "WorldGrid"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "GraphicalSortMethod"
			var EnumValues = Map
			{
				Object
				{
					var key = "BackToFrontView"
					var value = ""
				}
				Object
				{
					var key = "BackToFrontZ"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackView"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackZ"
					var value = ""
				}
				Object
				{
					var key = "GraphicalSortValue"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "SortEvent"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "HeightTextureSelect"
			var EnumValues = Map
			{
				Object
				{
					var key = "Texture0"
					var value = ""
				}
				Object
				{
					var key = "Texture1"
					var value = ""
				}
				Object
				{
					var key = "Texture2"
					var value = ""
				}
				Object
				{
					var key = "Texture3"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "HeightTool"
			var EnumValues = Map
			{
				Object
				{
					var key = "CreateDestroy"
					var value = ""
				}
				Object
				{
					var key = "Flatten"
					var value = ""
				}
				Object
				{
					var key = "RaiseLower"
					var value = ""
				}
				Object
				{
					var key = "SmoothSharpen"
					var value = ""
				}
				Object
				{
					var key = "WeightPainter"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "HorizontalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ImageImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "Sprites"
					var value = ""
				}
				Object
				{
					var key = "Textures"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ImportMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "FitToPatches"
					var value = ""
				}
				Object
				{
					var key = "MaintainAspectRatio"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "InputDevice"
			var EnumValues = Map
			{
				Object
				{
					var key = "Gamepad"
					var value = ""
				}
				Object
				{
					var key = "Joystick"
					var value = ""
				}
				Object
				{
					var key = "Keyboard"
					var value = ""
				}
				Object
				{
					var key = "Mouse"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "InternalKeyState"
			var EnumValues = Map
			{
				Object
				{
					var key = "KeyHeld"
					var value = ""
				}
				Object
				{
					var key = "KeyNotHeld"
					var value = ""
				}
				Object
				{
					var key = "KeyPressed"
					var value = ""
				}
				Object
				{
					var key = "KeyReleased"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "InternetProtocol"
			var EnumValues = Map
			{
				Object
				{
					var key = "Both"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
				Object
				{
					var key = "V4"
					var value = ""
				}
				Object
				{
					var key = "V6"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "JointFrameOfReference"
			var EnumValues = Map
			{
				Object
				{
					var key = "ObjectA"
					var value = ""
				}
				Object
				{
					var key = "ObjectB"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "JointToolTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "FixedAngleJoint"
					var value = ""
				}
				Object
				{
					var key = "GearJoint"
					var value = ""
				}
				Object
				{
					var key = "LinearAxisJoint"
					var value = ""
				}
				Object
				{
					var key = "ObjectLink"
					var value = ""
				}
				Object
				{
					var key = "PositionJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint2d"
					var value = ""
				}
				Object
				{
					var key = "PulleyJoint"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint2d"
					var value = ""
				}
				Object
				{
					var key = "StickJoint"
					var value = ""
				}
				Object
				{
					var key = "UniversalJoint"
					var value = ""
				}
				Object
				{
					var key = "UprightJoint"
					var value = ""
				}
				Object
				{
					var key = "WeldJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint2d"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "JointTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "CustomJoint"
					var value = ""
				}
				Object
				{
					var key = "FixedAngleJoint"
					var value = ""
				}
				Object
				{
					var key = "GearJoint"
					var value = ""
				}
				Object
				{
					var key = "LinearAxisJoint"
					var value = ""
				}
				Object
				{
					var key = "ManipulatorJoint"
					var value = ""
				}
				Object
				{
					var key = "PhyGunJoint"
					var value = ""
				}
				Object
				{
					var key = "PositionJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint"
					var value = ""
				}
				Object
				{
					var key = "PrismaticJoint2d"
					var value = ""
				}
				Object
				{
					var key = "PulleyJoint"
					var value = ""
				}
				Object
				{
					var key = "RelativeVelocityJoint"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint"
					var value = ""
				}
				Object
				{
					var key = "RevoluteJoint2d"
					var value = ""
				}
				Object
				{
					var key = "StickJoint"
					var value = ""
				}
				Object
				{
					var key = "UniversalJoint"
					var value = ""
				}
				Object
				{
					var key = "UprightJoint"
					var value = ""
				}
				Object
				{
					var key = "WeldJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint"
					var value = ""
				}
				Object
				{
					var key = "WheelJoint2d"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "KeyState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Down"
					var value = ""
				}
				Object
				{
					var key = "Repeated"
					var value = ""
				}
				Object
				{
					var key = "Up"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Keys"
			var EnumValues = Map
			{
				Object
				{
					var key = "A"
					var value = ""
				}
				Object
				{
					var key = "Add"
					var value = ""
				}
				Object
				{
					var key = "Alt"
					var value = ""
				}
				Object
				{
					var key = "Apostrophe"
					var value = ""
				}
				Object
				{
					var key = "B"
					var value = ""
				}
				Object
				{
					var key = "Back"
					var value = ""
				}
				Object
				{
					var key = "Backslash"
					var value = ""
				}
				Object
				{
					var key = "C"
					var value = ""
				}
				Object
				{
					var key = "Capital"
					var value = ""
				}
				Object
				{
					var key = "Comma"
					var value = ""
				}
				Object
				{
					var key = "Control"
					var value = ""
				}
				Object
				{
					var key = "D"
					var value = ""
				}
				Object
				{
					var key = "Decimal"
					var value = ""
				}
				Object
				{
					var key = "Delete"
					var value = ""
				}
				Object
				{
					var key = "Divide"
					var value = ""
				}
				Object
				{
					var key = "Down"
					var value = ""
				}
				Object
				{
					var key = "E"
					var value = ""
				}
				Object
				{
					var key = "Eight"
					var value = ""
				}
				Object
				{
					var key = "End"
					var value = ""
				}
				Object
				{
					var key = "Enter"
					var value = ""
				}
				Object
				{
					var key = "Equal"
					var value = ""
				}
				Object
				{
					var key = "Escape"
					var value = ""
				}
				Object
				{
					var key = "F"
					var value = ""
				}
				Object
				{
					var key = "F1"
					var value = ""
				}
				Object
				{
					var key = "F10"
					var value = ""
				}
				Object
				{
					var key = "F11"
					var value = ""
				}
				Object
				{
					var key = "F12"
					var value = ""
				}
				Object
				{
					var key = "F2"
					var value = ""
				}
				Object
				{
					var key = "F3"
					var value = ""
				}
				Object
				{
					var key = "F4"
					var value = ""
				}
				Object
				{
					var key = "F5"
					var value = ""
				}
				Object
				{
					var key = "F6"
					var value = ""
				}
				Object
				{
					var key = "F7"
					var value = ""
				}
				Object
				{
					var key = "F8"
					var value = ""
				}
				Object
				{
					var key = "F9"
					var value = ""
				}
				Object
				{
					var key = "Five"
					var value = ""
				}
				Object
				{
					var key = "Four"
					var value = ""
				}
				Object
				{
					var key = "G"
					var value = ""
				}
				Object
				{
					var key = "H"
					var value = ""
				}
				Object
				{
					var key = "Home"
					var value = ""
				}
				Object
				{
					var key = "I"
					var value = ""
				}
				Object
				{
					var key = "J"
					var value = ""
				}
				Object
				{
					var key = "K"
					var value = ""
				}
				Object
				{
					var key = "L"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "LeftBracket"
					var value = ""
				}
				Object
				{
					var key = "M"
					var value = ""
				}
				Object
				{
					var key = "Minus"
					var value = ""
				}
				Object
				{
					var key = "Multiply"
					var value = ""
				}
				Object
				{
					var key = "N"
					var value = ""
				}
				Object
				{
					var key = "Nine"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "NumPad0"
					var value = ""
				}
				Object
				{
					var key = "NumPad1"
					var value = ""
				}
				Object
				{
					var key = "NumPad2"
					var value = ""
				}
				Object
				{
					var key = "NumPad3"
					var value = ""
				}
				Object
				{
					var key = "NumPad4"
					var value = ""
				}
				Object
				{
					var key = "NumPad5"
					var value = ""
				}
				Object
				{
					var key = "NumPad6"
					var value = ""
				}
				Object
				{
					var key = "NumPad7"
					var value = ""
				}
				Object
				{
					var key = "NumPad8"
					var value = ""
				}
				Object
				{
					var key = "NumPad9"
					var value = ""
				}
				Object
				{
					var key = "O"
					var value = ""
				}
				Object
				{
					var key = "One"
					var value = ""
				}
				Object
				{
					var key = "P"
					var value = ""
				}
				Object
				{
					var key = "PageDown"
					var value = ""
				}
				Object
				{
					var key = "PageUp"
					var value = ""
				}
				Object
				{
					var key = "Period"
					var value = ""
				}
				Object
				{
					var key = "Q"
					var value = ""
				}
				Object
				{
					var key = "R"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "RightBracket"
					var value = ""
				}
				Object
				{
					var key = "S"
					var value = ""
				}
				Object
				{
					var key = "Semicolon"
					var value = ""
				}
				Object
				{
					var key = "Seven"
					var value = ""
				}
				Object
				{
					var key = "Shift"
					var value = ""
				}
				Object
				{
					var key = "Six"
					var value = ""
				}
				Object
				{
					var key = "Slash"
					var value = ""
				}
				Object
				{
					var key = "Space"
					var value = ""
				}
				Object
				{
					var key = "Subtract"
					var value = ""
				}
				Object
				{
					var key = "T"
					var value = ""
				}
				Object
				{
					var key = "Tab"
					var value = ""
				}
				Object
				{
					var key = "Three"
					var value = ""
				}
				Object
				{
					var key = "Tilde"
					var value = ""
				}
				Object
				{
					var key = "Two"
					var value = ""
				}
				Object
				{
					var key = "U"
					var value = ""
				}
				Object
				{
					var key = "Unknown"
					var value = ""
				}
				Object
				{
					var key = "Up"
					var value = ""
				}
				Object
				{
					var key = "V"
					var value = ""
				}
				Object
				{
					var key = "W"
					var value = ""
				}
				Object
				{
					var key = "X"
					var value = ""
				}
				Object
				{
					var key = "Y"
					var value = ""
				}
				Object
				{
					var key = "Z"
					var value = ""
				}
				Object
				{
					var key = "Zero"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LauncherAutoRunMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "IfInstalled"
					var value = ""
				}
				Object
				{
					var key = "InstallAndRun"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LinkState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Connected"
					var value = ""
				}
				Object
				{
					var key = "Disconnected"
					var value = ""
				}
				Object
				{
					var key = "ReceivedConnectRequest"
					var value = ""
				}
				Object
				{
					var key = "ReceivedDisconnectNotice"
					var value = ""
				}
				Object
				{
					var key = "ReceivedNegativeConnectResponse"
					var value = ""
				}
				Object
				{
					var key = "SentConnectRequest"
					var value = ""
				}
				Object
				{
					var key = "SentDisconnectNotice"
					var value = ""
				}
				Object
				{
					var key = "SentNegativeConnectResponse"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LinkStatus"
			var EnumValues = Map
			{
				Object
				{
					var key = "AttemptingConnection"
					var value = ""
				}
				Object
				{
					var key = "Connected"
					var value = ""
				}
				Object
				{
					var key = "Disconnected"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Location"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomCenter"
					var value = ""
				}
				Object
				{
					var key = "BottomLeft"
					var value = ""
				}
				Object
				{
					var key = "BottomRight"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "CenterLeft"
					var value = ""
				}
				Object
				{
					var key = "CenterRight"
					var value = ""
				}
				Object
				{
					var key = "TopCenter"
					var value = ""
				}
				Object
				{
					var key = "TopLeft"
					var value = ""
				}
				Object
				{
					var key = "TopRight"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "LoopingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Default"
					var value = ""
				}
				Object
				{
					var key = "Looping"
					var value = ""
				}
				Object
				{
					var key = "Once"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MeshEmitMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Edge"
					var value = ""
				}
				Object
				{
					var key = "Face"
					var value = ""
				}
				Object
				{
					var key = "Vertex"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MeshImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "MultiMesh"
					var value = ""
				}
				Object
				{
					var key = "NoMesh"
					var value = ""
				}
				Object
				{
					var key = "SingleMesh"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Mode2DStates"
			var EnumValues = Map
			{
				Object
				{
					var key = "InheritFromSpace"
					var value = "Use the Mode2D state on the"
				}
				Object
				{
					var key = "Mode2D"
					var value = "Restricts the object's movement through physics to 2D. This lowers the object's degrees of freedom down to 3 (x-linear, y-linear, z-angular)."
				}
				Object
				{
					var key = "Mode3D"
					var value = "A regular 3D object (6 degrees of freedom)."
				}
			}
			var Description = "Represents what dimensions arefshould operate in (how many degrees of freedom it has by default)."
		}
		Object
		{
			var Name = "MouseButtons"
			var EnumValues = Map
			{
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Middle"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "XOneBack"
					var value = ""
				}
				Object
				{
					var key = "XTwoForward"
					var value = ""
				}
			}
			var Description = "As the extra mouse buttons are typically Back and Forward they have been named accordingly."
		}
		Object
		{
			var Name = "MultiConvexMeshAutoComputeMethod"
			var EnumValues = Map
			{
				Object
				{
					var key = "MarchingSquares"
					var value = ""
				}
				Object
				{
					var key = "Pixels"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MultiConvexMeshAutoComputeMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Alpha"
					var value = ""
				}
				Object
				{
					var key = "Intensity"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MultiConvexMeshDrawMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Edges"
					var value = ""
				}
				Object
				{
					var key = "Filled"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "MultiConvexMeshSnappingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Always"
					var value = ""
				}
				Object
				{
					var key = "IfClose"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "NetRefreshResult"
			var EnumValues = Map
			{
				Object
				{
					var key = "DirectBasicHostInfo"
					var value = ""
				}
				Object
				{
					var key = "ExtraHostInfo"
					var value = ""
				}
				Object
				{
					var key = "IndirectBasicHostInfo"
					var value = ""
				}
				Object
				{
					var key = "NoResponse"
					var value = ""
				}
			}
			var Description = "The internet."
		}
		Object
		{
			var Name = "NetRole"
			var EnumValues = Map
			{
				Object
				{
					var key = "Client"
					var value = ""
				}
				Object
				{
					var key = "MasterServer"
					var value = ""
				}
				Object
				{
					var key = "Offline"
					var value = ""
				}
				Object
				{
					var key = "Server"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "NetUserAddResponse"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
			}
			var Description = "Network user add response."
		}
		Object
		{
			var Name = "Network"
			var EnumValues = Map
			{
				Object
				{
					var key = "Internet"
					var value = ""
				}
				Object
				{
					var key = "LAN"
					var value = ""
				}
			}
			var Description = "Network specification."
		}
		Object
		{
			var Name = "NineSlices"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ObjectIndex"
			var EnumValues = Map
			{
				Object
				{
					var key = "IndexA"
					var value = ""
				}
				Object
				{
					var key = "IndexB"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "OrientationBases"
			var EnumValues = Map
			{
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "ForwardNegativeZUpY"
					var value = ""
				}
				Object
				{
					var key = "ForwardXUpY"
					var value = ""
				}
				Object
				{
					var key = "ForwardXUpZ"
					var value = ""
				}
				Object
				{
					var key = "ForwardYUpZ"
					var value = ""
				}
				Object
				{
					var key = "ForwardZUpY"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PerspectiveMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Orthographic"
					var value = ""
				}
				Object
				{
					var key = "Perspective"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsContactTangentTypes"
			var EnumValues = Map
			{
				Object
				{
					var key = "OrthonormalTangents"
					var value = ""
				}
				Object
				{
					var key = "RandomTangents"
					var value = ""
				}
				Object
				{
					var key = "VelocityTangents"
					var value = ""
				}
			}
			var Description = "How to compute the tangents for a contact point. Mainly for testing."
		}
		Object
		{
			var Name = "PhysicsEffectEndCondition"
			var EnumValues = Map
			{
				Object
				{
					var key = "ClampToMax"
					var value = "Clamps to the max force value"
				}
				Object
				{
					var key = "ContinueFalloff"
					var value = "Continue the regular interpolation method"
				}
				Object
				{
					var key = "NoEffect"
					var value = "Don't apply a force past the max distance"
				}
			}
			var Description = "Describes how interpolation is performed (if at all) outside of a physics effect's max distance."
		}
		Object
		{
			var Name = "PhysicsEffectInterpolationType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Linear"
					var value = "Linearly interpolate between values."
				}
				Object
				{
					var key = "Quadratic"
					var value = "Quadratically interpolate between values (uses t^2)."
				}
			}
			var Description = "Describes how force values are interpolated between min/max values."
		}
		Object
		{
			var Name = "PhysicsEffectType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Buoyancy"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "Drag"
					var value = ""
				}
				Object
				{
					var key = "Flow"
					var value = ""
				}
				Object
				{
					var key = "Force"
					var value = ""
				}
				Object
				{
					var key = "Gravity"
					var value = ""
				}
				Object
				{
					var key = "Invalid"
					var value = ""
				}
				Object
				{
					var key = "PointForce"
					var value = ""
				}
				Object
				{
					var key = "PointGravity"
					var value = ""
				}
				Object
				{
					var key = "Thrust"
					var value = ""
				}
				Object
				{
					var key = "Torque"
					var value = ""
				}
				Object
				{
					var key = "Vortex"
					var value = ""
				}
				Object
				{
					var key = "Wind"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsImport"
			var EnumValues = Map
			{
				Object
				{
					var key = "ConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "NoMesh"
					var value = ""
				}
				Object
				{
					var key = "StaticMesh"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsIslandPreProcessingMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "ColliderCount"
					var value = ""
				}
				Object
				{
					var key = "ConstraintCount"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = "What kind of pre-processing strategy should be used for merging islands."
		}
		Object
		{
			var Name = "PhysicsIslandType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Composites"
					var value = ""
				}
				Object
				{
					var key = "ForcedOne"
					var value = ""
				}
				Object
				{
					var key = "Kinematics"
					var value = ""
				}
			}
			var Description = "How should islands be built. Internal for testing (mostly legacy)."
		}
		Object
		{
			var Name = "PhysicsMeshType"
			var EnumValues = Map
			{
				Object
				{
					var key = "ConvexMesh"
					var value = ""
				}
				Object
				{
					var key = "PhysicsMesh"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PhysicsSolverPositionCorrection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Baumgarte"
					var value = "Use a baumgarte penalty force."
				}
				Object
				{
					var key = "PostStabilization"
					var value = "Directly fix position errors via translation."
				}
			}
			var Description = "What kind of position correction should be applied for any constraint that is set to Inherit."
		}
		Object
		{
			var Name = "PhysicsSolverSubType"
			var EnumValues = Map
			{
				Object
				{
					var key = "BasicSolving"
					var value = ""
				}
				Object
				{
					var key = "BlockSolving"
					var value = ""
				}
			}
			var Description = "What kind of solver technique to use for position correction. Mainly for testing."
		}
		Object
		{
			var Name = "PhysicsSolverType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Basic"
					var value = ""
				}
				Object
				{
					var key = "GenericBasic"
					var value = ""
				}
				Object
				{
					var key = "Normal"
					var value = ""
				}
				Object
				{
					var key = "Threaded"
					var value = ""
				}
			}
			var Description = "What kind of a constraint solver should be used. A few pre-defined types meant for comparing performance."
		}
		Object
		{
			var Name = "Placement"
			var EnumValues = Map
			{
				Object
				{
					var key = "CameraLocation"
					var value = ""
				}
				Object
				{
					var key = "LookAtPlane"
					var value = ""
				}
				Object
				{
					var key = "LookAtPoint"
					var value = ""
				}
				Object
				{
					var key = "OnTop"
					var value = ""
				}
				Object
				{
					var key = "PlaneXY"
					var value = ""
				}
				Object
				{
					var key = "ViewAtDepth"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "PrimitiveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Lines"
					var value = ""
				}
				Object
				{
					var key = "Points"
					var value = ""
				}
				Object
				{
					var key = "Triangles"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Receipt"
			var EnumValues = Map
			{
				Object
				{
					var key = "ACK"
					var value = ""
				}
				Object
				{
					var key = "EXPIRED"
					var value = ""
				}
				Object
				{
					var key = "MAYBE"
					var value = ""
				}
				Object
				{
					var key = "NAK"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReceiveState"
			var EnumValues = Map
			{
				Object
				{
					var key = "cCloseConnection"
					var value = ""
				}
				Object
				{
					var key = "cDataReceived"
					var value = ""
				}
				Object
				{
					var key = "cNextConnection"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReliabilityMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Reliable"
					var value = ""
				}
				Object
				{
					var key = "Unreliable"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "RenderingType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Static"
					var value = ""
				}
				Object
				{
					var key = "Streamed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ReplicationPhase"
			var EnumValues = Map
			{
				Object
				{
					var key = "Change"
					var value = ""
				}
				Object
				{
					var key = "Initialization"
					var value = ""
				}
				Object
				{
					var key = "Uninitialization"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "RigidBodyDynamicState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Dynamic"
					var value = "A regular body that can be affected by forces."
				}
				Object
				{
					var key = "Kinematic"
					var value = "An infinite mass body that approximates velocity when moved. Used for moving platforms and other movable infinite mass objects."
				}
				Object
				{
					var key = "Static"
					var value = "An infinite mass body. Will not move via dynamics."
				}
			}
			var Description = "What kind of dynamics this body should have. Determines if forces are integrated and if collisions are resolved."
		}
		Object
		{
			var Name = "RouteMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Exclude"
					var value = ""
				}
				Object
				{
					var key = "Include"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ScaleConversion"
			var EnumValues = Map
			{
				Object
				{
					var key = "CentimeterToInches"
					var value = ""
				}
				Object
				{
					var key = "CentimeterToMeter"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "InchesToCentimenters"
					var value = ""
				}
				Object
				{
					var key = "InchesToMeters"
					var value = ""
				}
				Object
				{
					var key = "MetersToCentimeters"
					var value = ""
				}
				Object
				{
					var key = "MetersToInches"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ScriptReloadMethod"
			var EnumValues = Map
			{
				Object
				{
					var key = "PatchObjects"
					var value = ""
				}
				Object
				{
					var key = "ReInitializeObjects"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SendsEvents"
			var EnumValues = Map
			{
				Object
				{
					var key = "False"
					var value = ""
				}
				Object
				{
					var key = "True"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SerializationMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "All"
					var value = ""
				}
				Object
				{
					var key = "Changed"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ShaderInputType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bool"
					var value = ""
				}
				Object
				{
					var key = "Count"
					var value = ""
				}
				Object
				{
					var key = "Float"
					var value = ""
				}
				Object
				{
					var key = "Int"
					var value = ""
				}
				Object
				{
					var key = "IntVec2"
					var value = ""
				}
				Object
				{
					var key = "IntVec3"
					var value = ""
				}
				Object
				{
					var key = "IntVec4"
					var value = ""
				}
				Object
				{
					var key = "Invalid"
					var value = ""
				}
				Object
				{
					var key = "Mat3"
					var value = ""
				}
				Object
				{
					var key = "Mat4"
					var value = ""
				}
				Object
				{
					var key = "Texture"
					var value = ""
				}
				Object
				{
					var key = "Vec2"
					var value = ""
				}
				Object
				{
					var key = "Vec3"
					var value = ""
				}
				Object
				{
					var key = "Vec4"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ShadowResolution"
			var EnumValues = Map
			{
				Object
				{
					var key = "High"
					var value = ""
				}
				Object
				{
					var key = "Low"
					var value = ""
				}
				Object
				{
					var key = "Medium"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SoundPlayMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Looping"
					var value = ""
				}
				Object
				{
					var key = "Single"
					var value = ""
				}
			}
			var Description = "Whether arefshould play once or loop continuously."
		}
		Object
		{
			var Name = "SoundSelectMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Random"
					var value = ""
				}
				Object
				{
					var key = "Sequential"
					var value = ""
				}
			}
			var Description = "Whether arefshould pick arefto play randomly or sequentially."
		}
		Object
		{
			var Name = "SplineAnimatorMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Exact"
					var value = ""
				}
				Object
				{
					var key = "Spring"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SplineType"
			var EnumValues = Map
			{
				Object
				{
					var key = "BSpline"
					var value = ""
				}
				Object
				{
					var key = "CatmulRom"
					var value = ""
				}
				Object
				{
					var key = "Linear"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpringDebugDrawMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Always"
					var value = "Always debug draw."
				}
				Object
				{
					var key = "None"
					var value = "Never debug draw."
				}
				Object
				{
					var key = "WhenNoMesh"
					var value = "Only debug draw if no graphical mesh is present."
				}
			}
			var Description = "When should debug drawing of a spring system happen."
		}
		Object
		{
			var Name = "SpringDebugDrawType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Normal"
					var value = "Draw all springs equally (same color)."
				}
				Object
				{
					var key = "Sorted"
					var value = "Draw the springs in sorted order. This alters the color based upon the distance from an anchor point."
				}
			}
			var Description = "How should springs be drawn?"
		}
		Object
		{
			var Name = "SpringSortOrder"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomUp"
					var value = "Sort so that springs further away from anchors are solved first."
				}
				Object
				{
					var key = "None"
					var value = "No sorting is preserved."
				}
				Object
				{
					var key = "TopDown"
					var value = "Sort so that springs closer to anchors are solved first."
				}
			}
			var Description = "How should springs be sorted for solving. This effects the convergence rate of a system."
		}
		Object
		{
			var Name = "SpringSubTools"
			var EnumValues = Map
			{
				Object
				{
					var key = "Anchoring"
					var value = ""
				}
				Object
				{
					var key = "PointSelector"
					var value = ""
				}
				Object
				{
					var key = "RopeCreator"
					var value = ""
				}
				Object
				{
					var key = "SpringCreator"
					var value = ""
				}
				Object
				{
					var key = "SpringSelector"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteFill"
			var EnumValues = Map
			{
				Object
				{
					var key = "NineSlice"
					var value = ""
				}
				Object
				{
					var key = "Stretch"
					var value = ""
				}
				Object
				{
					var key = "Tiled"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteGeometryMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "ViewPlane"
					var value = ""
				}
				Object
				{
					var key = "ZPlane"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteOrigin"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomCenter"
					var value = ""
				}
				Object
				{
					var key = "BottomLeft"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Custom"
					var value = ""
				}
				Object
				{
					var key = "UpperLeft"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteParticleAnimationMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Looping"
					var value = ""
				}
				Object
				{
					var key = "Single"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteParticleGeometryMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Beam"
					var value = ""
				}
				Object
				{
					var key = "Billboarded"
					var value = ""
				}
				Object
				{
					var key = "FaceVelocity"
					var value = ""
				}
				Object
				{
					var key = "Flat"
					var value = ""
				}
				Object
				{
					var key = "Outward"
					var value = ""
				}
			}
			var Description = "refrefrefEnums."
		}
		Object
		{
			var Name = "SpriteParticleSortMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "BackToFrontView"
					var value = ""
				}
				Object
				{
					var key = "BackToFrontZ"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackView"
					var value = ""
				}
				Object
				{
					var key = "FrontToBackZ"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SpriteSampling"
			var EnumValues = Map
			{
				Object
				{
					var key = "Linear"
					var value = ""
				}
				Object
				{
					var key = "Nearest"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StencilMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Enabled"
					var value = ""
				}
				Object
				{
					var key = "Separate"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StencilOp"
			var EnumValues = Map
			{
				Object
				{
					var key = "Decrement"
					var value = ""
				}
				Object
				{
					var key = "DecrementWrap"
					var value = ""
				}
				Object
				{
					var key = "Increment"
					var value = ""
				}
				Object
				{
					var key = "IncrementWrap"
					var value = ""
				}
				Object
				{
					var key = "Invert"
					var value = ""
				}
				Object
				{
					var key = "Keep"
					var value = ""
				}
				Object
				{
					var key = "Replace"
					var value = ""
				}
				Object
				{
					var key = "Zero"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StoreResult"
			var EnumValues = Map
			{
				Object
				{
					var key = "Added"
					var value = ""
				}
				Object
				{
					var key = "Failed"
					var value = ""
				}
				Object
				{
					var key = "Replaced"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StreamOrigin"
			var EnumValues = Map
			{
				Object
				{
					var key = "Current"
					var value = ""
				}
				Object
				{
					var key = "End"
					var value = ""
				}
				Object
				{
					var key = "Start"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "SynthWaveType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Noise"
					var value = ""
				}
				Object
				{
					var key = "SawWave"
					var value = ""
				}
				Object
				{
					var key = "SineWave"
					var value = ""
				}
				Object
				{
					var key = "SquareWave"
					var value = ""
				}
				Object
				{
					var key = "TriangleWave"
					var value = ""
				}
			}
			var Description = "Types of sound waves that can be used by SoundNodes."
		}
		Object
		{
			var Name = "SystemSpace"
			var EnumValues = Map
			{
				Object
				{
					var key = "LocalSpace"
					var value = ""
				}
				Object
				{
					var key = "WorldSpace"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TabWidth"
			var EnumValues = Map
			{
				Object
				{
					var key = "FourSpaces"
					var value = ""
				}
				Object
				{
					var key = "TwoSpaces"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TcpSocketBind"
			var EnumValues = Map
			{
				Object
				{
					var key = "Any"
					var value = ""
				}
				Object
				{
					var key = "Loopback"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextAlign"
			var EnumValues = Map
			{
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextRounding"
			var EnumValues = Map
			{
				Object
				{
					var key = "LastCharacter"
					var value = ""
				}
				Object
				{
					var key = "Nearest"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureAddressing"
			var EnumValues = Map
			{
				Object
				{
					var key = "Clamp"
					var value = ""
				}
				Object
				{
					var key = "Mirror"
					var value = ""
				}
				Object
				{
					var key = "Repeat"
					var value = ""
				}
			}
			var Description = "How to address the texture with uv's outside of the range [0, 1] Clamp - Uses the last pixel at the border of the image Repeat - Wraps to the opposite side and continues to sample the image Mirror - Similar to Repeat but reverses image direction."
		}
		Object
		{
			var Name = "TextureAnisotropy"
			var EnumValues = Map
			{
				Object
				{
					var key = "x1"
					var value = ""
				}
				Object
				{
					var key = "x16"
					var value = ""
				}
				Object
				{
					var key = "x2"
					var value = ""
				}
				Object
				{
					var key = "x4"
					var value = ""
				}
				Object
				{
					var key = "x8"
					var value = ""
				}
			}
			var Description = "How pixels are sampled when the ratio of pixels viewed along its u/v directions is not 1:1 (Typically when viewing a texture at an angle) The options represent how large of a ratio will be accounted for when sampling x1 = 1:1 (no anisotropy), x16 = 16:1 (high anisotropy), x16 being the best quality."
		}
		Object
		{
			var Name = "TextureCompareFunc"
			var EnumValues = Map
			{
				Object
				{
					var key = "Always"
					var value = ""
				}
				Object
				{
					var key = "Equal"
					var value = ""
				}
				Object
				{
					var key = "Greater"
					var value = ""
				}
				Object
				{
					var key = "GreaterEqual"
					var value = ""
				}
				Object
				{
					var key = "Less"
					var value = ""
				}
				Object
				{
					var key = "LessEqual"
					var value = ""
				}
				Object
				{
					var key = "Never"
					var value = ""
				}
				Object
				{
					var key = "NotEqual"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureCompareMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Disabled"
					var value = ""
				}
				Object
				{
					var key = "Enabled"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureCompression"
			var EnumValues = Map
			{
				Object
				{
					var key = "BC1"
					var value = ""
				}
				Object
				{
					var key = "BC2"
					var value = ""
				}
				Object
				{
					var key = "BC3"
					var value = ""
				}
				Object
				{
					var key = "BC4"
					var value = ""
				}
				Object
				{
					var key = "BC5"
					var value = ""
				}
				Object
				{
					var key = "BC6"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
			}
			var Description = "Block compression, lossy hardware supported formats with very high memory savings None - No compression will be used BC1 - RGB stored at 1/2 byte per pixel Used for color maps that don't need alpha, normal maps BC2 - RGB w/ low precision alpha stored at 1 byte per pixel No common usages BC3 - RGB w/ alpha stored at 1 byte per pixel Used for color maps that need alpha BC4 - R stored at 1/2 byte per pixel Used for single channel maps like height, specular, roughness BC5 - RG stored at 1 byte per pixel Used for two channel maps like normals with reconstructedrefBC6 - RGB floats stored at 1 byte per pixel Used for high dynamic range images."
		}
		Object
		{
			var Name = "TextureFace"
			var EnumValues = Map
			{
				Object
				{
					var key = "NegativeX"
					var value = ""
				}
				Object
				{
					var key = "NegativeY"
					var value = ""
				}
				Object
				{
					var key = "NegativeZ"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "PositiveX"
					var value = ""
				}
				Object
				{
					var key = "PositiveY"
					var value = ""
				}
				Object
				{
					var key = "PositiveZ"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureFiltering"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bilinear"
					var value = ""
				}
				Object
				{
					var key = "Nearest"
					var value = ""
				}
				Object
				{
					var key = "Trilinear"
					var value = ""
				}
			}
			var Description = "How pixels are sampled when viewing image at a different size Nearest - Gets the closest pixel unaltered Bilinear - Gets the 4 closest pixels and linearly blends between them Trilinear - Same as bilinear with an additional linear blend between mip levels."
		}
		Object
		{
			var Name = "TextureFormat"
			var EnumValues = Map
			{
				Object
				{
					var key = "Depth16"
					var value = ""
				}
				Object
				{
					var key = "Depth24"
					var value = ""
				}
				Object
				{
					var key = "Depth24Stencil8"
					var value = ""
				}
				Object
				{
					var key = "Depth32"
					var value = ""
				}
				Object
				{
					var key = "Depth32f"
					var value = ""
				}
				Object
				{
					var key = "Depth32fStencil8Pad24"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "R16"
					var value = ""
				}
				Object
				{
					var key = "R16f"
					var value = ""
				}
				Object
				{
					var key = "R32f"
					var value = ""
				}
				Object
				{
					var key = "R8"
					var value = ""
				}
				Object
				{
					var key = "RG16"
					var value = ""
				}
				Object
				{
					var key = "RG16f"
					var value = ""
				}
				Object
				{
					var key = "RG32f"
					var value = ""
				}
				Object
				{
					var key = "RG8"
					var value = ""
				}
				Object
				{
					var key = "RGB16"
					var value = ""
				}
				Object
				{
					var key = "RGB16f"
					var value = ""
				}
				Object
				{
					var key = "RGB32f"
					var value = ""
				}
				Object
				{
					var key = "RGB8"
					var value = ""
				}
				Object
				{
					var key = "RGBA16"
					var value = ""
				}
				Object
				{
					var key = "RGBA16f"
					var value = ""
				}
				Object
				{
					var key = "RGBA32f"
					var value = ""
				}
				Object
				{
					var key = "RGBA8"
					var value = ""
				}
				Object
				{
					var key = "SRGB8"
					var value = ""
				}
				Object
				{
					var key = "SRGB8A8"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TextureMipMapping"
			var EnumValues = Map
			{
				Object
				{
					var key = "GpuGenerated"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "PreGenerated"
					var value = ""
				}
			}
			var Description = "Progressively scaled down versions of the image are produced to preserve image integrity when viewed at smaller scales None - No mipmaps are generated PreGenerated - Mipmaps are generated by the engine Uses higher quality filtering than the gpu Required for cubemaps in order to get perspective correct filtering over face edges GpuGenerated - Mipmaps are generated by the gpu at load time."
		}
		Object
		{
			var Name = "TextureType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Texture2D"
					var value = ""
				}
				Object
				{
					var key = "TextureCube"
					var value = ""
				}
			}
			var Description = "Type of the texture, must match sampler type in shaders Texture2D - Standard 2 dimensional texture TextureCube - Uses texture as a cubemap Faces are extracted from the image using aspect ratio to determine layout."
		}
		Object
		{
			var Name = "TileEditor2DSubToolType"
			var EnumValues = Map
			{
				Object
				{
					var key = "DrawTool"
					var value = ""
				}
				Object
				{
					var key = "SelectionTool"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TimeDisplay"
			var EnumValues = Map
			{
				Object
				{
					var key = "Frames"
					var value = ""
				}
				Object
				{
					var key = "Timecodes"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TimeMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "ActualFrametime"
					var value = ""
				}
				Object
				{
					var key = "FixedFrametime"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TrackType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Component"
					var value = ""
				}
				Object
				{
					var key = "Invalid"
					var value = ""
				}
				Object
				{
					var key = "Object"
					var value = ""
				}
				Object
				{
					var key = "Property"
					var value = ""
				}
				Object
				{
					var key = "SubProperty"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TransferMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Immediate"
					var value = ""
				}
				Object
				{
					var key = "Ordered"
					var value = ""
				}
				Object
				{
					var key = "Sequenced"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TransmissionDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Incoming"
					var value = ""
				}
				Object
				{
					var key = "Outgoing"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "TransportProtocol"
			var EnumValues = Map
			{
				Object
				{
					var key = "Tcp"
					var value = ""
				}
				Object
				{
					var key = "Udp"
					var value = ""
				}
				Object
				{
					var key = "Unspecified"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiDockMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiFocusDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "Backwards"
					var value = ""
				}
				Object
				{
					var key = "Forward"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiHorizontalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Left"
					var value = ""
				}
				Object
				{
					var key = "Right"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiSizePolicy"
			var EnumValues = Map
			{
				Object
				{
					var key = "Auto"
					var value = ""
				}
				Object
				{
					var key = "Fixed"
					var value = ""
				}
				Object
				{
					var key = "Flex"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiStackLayoutDirection"
			var EnumValues = Map
			{
				Object
				{
					var key = "BottomToTop"
					var value = ""
				}
				Object
				{
					var key = "LeftToRight"
					var value = ""
				}
				Object
				{
					var key = "RightToLeft"
					var value = ""
				}
				Object
				{
					var key = "TopToBottom"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UiVerticalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UpdateMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "TranslateRoot"
					var value = ""
				}
				Object
				{
					var key = "TranslateSelf"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "UserConnectResponse"
			var EnumValues = Map
			{
				Object
				{
					var key = "Accept"
					var value = ""
				}
				Object
				{
					var key = "Deny"
					var value = ""
				}
				Object
				{
					var key = "Pending"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Verbosity"
			var EnumValues = Map
			{
				Object
				{
					var key = "Detailed"
					var value = ""
				}
				Object
				{
					var key = "Minimal"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "VertexElementType"
			var EnumValues = Map
			{
				Object
				{
					var key = "Byte"
					var value = ""
				}
				Object
				{
					var key = "Half"
					var value = ""
				}
				Object
				{
					var key = "NormByte"
					var value = ""
				}
				Object
				{
					var key = "NormShort"
					var value = ""
				}
				Object
				{
					var key = "Real"
					var value = ""
				}
				Object
				{
					var key = "Short"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "VertexSemantic"
			var EnumValues = Map
			{
				Object
				{
					var key = "Aux0"
					var value = ""
				}
				Object
				{
					var key = "Aux1"
					var value = ""
				}
				Object
				{
					var key = "Aux2"
					var value = ""
				}
				Object
				{
					var key = "Aux3"
					var value = ""
				}
				Object
				{
					var key = "Aux4"
					var value = ""
				}
				Object
				{
					var key = "Aux5"
					var value = ""
				}
				Object
				{
					var key = "Bitangent"
					var value = ""
				}
				Object
				{
					var key = "BoneIndices"
					var value = ""
				}
				Object
				{
					var key = "BoneWeights"
					var value = ""
				}
				Object
				{
					var key = "Color"
					var value = ""
				}
				Object
				{
					var key = "ColorAux"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Normal"
					var value = ""
				}
				Object
				{
					var key = "Position"
					var value = ""
				}
				Object
				{
					var key = "Tangent"
					var value = ""
				}
				Object
				{
					var key = "Uv"
					var value = ""
				}
				Object
				{
					var key = "UvAux"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "VerticalAlignment"
			var EnumValues = Map
			{
				Object
				{
					var key = "Bottom"
					var value = ""
				}
				Object
				{
					var key = "Center"
					var value = ""
				}
				Object
				{
					var key = "Top"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ViewportScaling"
			var EnumValues = Map
			{
				Object
				{
					var key = "Exact"
					var value = ""
				}
				Object
				{
					var key = "Fill"
					var value = ""
				}
				Object
				{
					var key = "LargestMultiple"
					var value = ""
				}
				Object
				{
					var key = "Letterbox"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "WebBrowserModifiers"
			var EnumValues = Map
			{
				Object
				{
					var key = "Alt"
					var value = ""
				}
				Object
				{
					var key = "CapsLock"
					var value = ""
				}
				Object
				{
					var key = "Command"
					var value = ""
				}
				Object
				{
					var key = "Control"
					var value = ""
				}
				Object
				{
					var key = "IsKeyPad"
					var value = ""
				}
				Object
				{
					var key = "IsLeft"
					var value = ""
				}
				Object
				{
					var key = "IsRight"
					var value = ""
				}
				Object
				{
					var key = "LeftMouse"
					var value = ""
				}
				Object
				{
					var key = "MiddleMouse"
					var value = ""
				}
				Object
				{
					var key = "NumLock"
					var value = ""
				}
				Object
				{
					var key = "RightMouse"
					var value = ""
				}
				Object
				{
					var key = "Shift"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "WindowState"
			var EnumValues = Map
			{
				Object
				{
					var key = "Fullscreen"
					var value = ""
				}
				Object
				{
					var key = "Maximized"
					var value = ""
				}
				Object
				{
					var key = "Minimized"
					var value = ""
				}
				Object
				{
					var key = "Restore"
					var value = ""
				}
				Object
				{
					var key = "Windowed"
					var value = ""
				}
			}
			var Description = "The state of the window for minimizing / maximizing."
		}
		Object
		{
			var Name = "WindowStyleFlags"
			var EnumValues = Map
			{
				Object
				{
					var key = "ClientOnly"
					var value = ""
				}
				Object
				{
					var key = "Close"
					var value = ""
				}
				Object
				{
					var key = "MainWindow"
					var value = ""
				}
				Object
				{
					var key = "NotVisible"
					var value = ""
				}
				Object
				{
					var key = "OnTaskBar"
					var value = ""
				}
				Object
				{
					var key = "Resizable"
					var value = ""
				}
				Object
				{
					var key = "TitleBar"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ZUiHighlightColorMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Hierarchy"
					var value = ""
				}
				Object
				{
					var key = "Local"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "ZUiHighlightMouseMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Enter"
					var value = ""
				}
				Object
				{
					var key = "EnterHierarchy"
					var value = ""
				}
				Object
				{
					var key = "Hover"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "eUpdateTransformState"
			var EnumValues = Map
			{
				Object
				{
					var key = "cInitialize"
					var value = ""
				}
				Object
				{
					var key = "cUpdate"
					var value = ""
				}
			}
			var Description = "Internal enum used for determining what kind of transform update is happening."
		}
	}
	var Flags = Array
	{
		Object
		{
			var Name = "FileMode"
			var EnumValues = Map
			{
				Object
				{
					var key = "Append"
					var value = ""
				}
				Object
				{
					var key = "Read"
					var value = ""
				}
				Object
				{
					var key = "Sequential"
					var value = ""
				}
				Object
				{
					var key = "ShareDelete"
					var value = ""
				}
				Object
				{
					var key = "ShareRead"
					var value = ""
				}
				Object
				{
					var key = "ShareWrite"
					var value = ""
				}
				Object
				{
					var key = "Write"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "Members"
			var EnumValues = Map
			{
				Object
				{
					var key = "All"
					var value = ""
				}
				Object
				{
					var key = "Extension"
					var value = ""
				}
				Object
				{
					var key = "Inherited"
					var value = ""
				}
				Object
				{
					var key = "InheritedInstance"
					var value = ""
				}
				Object
				{
					var key = "InheritedInstanceStatic"
					var value = ""
				}
				Object
				{
					var key = "InheritedStatic"
					var value = ""
				}
				Object
				{
					var key = "Instance"
					var value = ""
				}
				Object
				{
					var key = "InstanceStatic"
					var value = ""
				}
				Object
				{
					var key = "Static"
					var value = ""
				}
			}
			var Description = ""
		}
		Object
		{
			var Name = "StreamCapabilities"
			var EnumValues = Map
			{
				Object
				{
					var key = "GetCount"
					var value = ""
				}
				Object
				{
					var key = "None"
					var value = ""
				}
				Object
				{
					var key = "Read"
					var value = ""
				}
				Object
				{
					var key = "Seek"
					var value = ""
				}
				Object
				{
					var key = "SetCount"
					var value = ""
				}
				Object
				{
					var key = "Write"
					var value = ""
				}
			}
			var Description = ""
		}
	}
}
