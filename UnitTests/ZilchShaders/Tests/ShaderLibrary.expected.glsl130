#version 130
//----- Shader Inputs/Outputs -----

//----- Struct Definitions -----
struct SamplerHelper
{
  int Dummy;
};

struct DiscardExtensions
{
  int Dummy;
};

struct DdxExtensions
{
  int Dummy;
};

struct DdyExtensions
{
  int Dummy;
};

struct ShaderLibrary
{
  vec2 Uv;
};

//----- Forward Declarations -----
void _SamplerHelperPreConstructor(inout SamplerHelper self);
SamplerHelper _SamplerHelperConstructor();
vec2 _SamplerHelperConvertUvCoordinate(vec2 _uv);
vec3 _SamplerHelperConvertUvCoordinate(vec3 _uv);

vec4 _sampler2DSample(vec2 _uv, in sampler2D self);
vec4 _sampler2DSample(vec2 _uv, vec2 _ddx, vec2 _ddy, in sampler2D self);
vec4 _sampler2DSampleLod(vec2 _uv, float _lod, in sampler2D self);
ivec2 _sampler2DSampleSize(int _lod, in sampler2D self);

void _DiscardExtensionsPreConstructor(inout DiscardExtensions self);
DiscardExtensions _DiscardExtensionsConstructor();
void _ShaderDiscard();

void _DdxExtensionsPreConstructor(inout DdxExtensions self);
DdxExtensions _DdxExtensionsConstructor();
float _ShaderDdx(float _value);
vec2 _ShaderDdx(vec2 _value);
vec3 _ShaderDdx(vec3 _value);
vec4 _ShaderDdx(vec4 _value);

void _DdyExtensionsPreConstructor(inout DdyExtensions self);
DdyExtensions _DdyExtensionsConstructor();
float _ShaderDdy(float _value);
vec2 _ShaderDdy(vec2 _value);
vec3 _ShaderDdy(vec3 _value);
vec4 _ShaderDdy(vec4 _value);

void _ShaderLibraryPreConstructor(inout ShaderLibrary self);
ShaderLibrary _ShaderLibraryConstructor();
vec4 _ShaderLibrarySamplerFunctionCall(in sampler2D _sampler, vec2 _uv);
void _ShaderLibraryDiscard(inout ShaderLibrary self);
void _ShaderLibraryMain(inout ShaderLibrary self);

//----- Global Variable Declarations -----
uniform sampler2D _ShaderLibrarySampler;

//----- SamplerHelper Functions -----
void _SamplerHelperPreConstructor(inout SamplerHelper self)
{
  self.Dummy = 0;
}

SamplerHelper _SamplerHelperConstructor()
{
  SamplerHelper self;
  _SamplerHelperPreConstructor(self);
  return self;
}

vec2 _SamplerHelperConvertUvCoordinate(vec2 _uv)
{
  _uv.y = 1.0f - _uv.y;
  return _uv;
}

vec3 _SamplerHelperConvertUvCoordinate(vec3 _uv)
{
  _uv.x = -_uv.x;
  return _uv;
}

//----- Sampler2d Functions -----
vec4 _sampler2DSample(vec2 _uv, in sampler2D self)
{
  vec4 _result = vec4(0.0, 0.0, 0.0, 0.0);
  _uv = _SamplerHelperConvertUvCoordinate(_uv);
  _result = texture(self, _uv);
  return _result;
}

vec4 _sampler2DSample(vec2 _uv, vec2 _ddx, vec2 _ddy, in sampler2D self)
{
  vec4 _result = vec4(0.0, 0.0, 0.0, 0.0);
  _uv = _SamplerHelperConvertUvCoordinate(_uv);
  _result = textureGrad(self, _uv, _ddx, _ddy);
  return _result;
}

vec4 _sampler2DSampleLod(vec2 _uv, float _lod, in sampler2D self)
{
  vec4 _result = vec4(0.0, 0.0, 0.0, 0.0);
  _uv = _SamplerHelperConvertUvCoordinate(_uv);
  _result = textureLod(self, _uv, _lod);
  return _result;
}

ivec2 _sampler2DSampleSize(int _lod, in sampler2D self)
{
  ivec2 _result = ivec2(0, 0);
  _result = textureSize(self, _lod);
  return _result;
}

//----- DiscardExtensions Functions -----
void _DiscardExtensionsPreConstructor(inout DiscardExtensions self)
{
  self.Dummy = 0;
}

DiscardExtensions _DiscardExtensionsConstructor()
{
  DiscardExtensions self;
  _DiscardExtensionsPreConstructor(self);
  return self;
}

void _ShaderDiscard()
{
  discard;
}

//----- DdxExtensions Functions -----
void _DdxExtensionsPreConstructor(inout DdxExtensions self)
{
  self.Dummy = 0;
}

DdxExtensions _DdxExtensionsConstructor()
{
  DdxExtensions self;
  _DdxExtensionsPreConstructor(self);
  return self;
}

float _ShaderDdx(float _value)
{
  float _result = 0.0f;
  _result = dFdx(_value);
  return _result;
}

vec2 _ShaderDdx(vec2 _value)
{
  vec2 _result = vec2(0.0, 0.0);
  _result = dFdx(_value);
  return _result;
}

vec3 _ShaderDdx(vec3 _value)
{
  vec3 _result = vec3(0.0, 0.0, 0.0);
  _result = dFdx(_value);
  return _result;
}

vec4 _ShaderDdx(vec4 _value)
{
  vec4 _result = vec4(0.0, 0.0, 0.0, 0.0);
  _result = dFdx(_value);
  return _result;
}

//----- DdyExtensions Functions -----
void _DdyExtensionsPreConstructor(inout DdyExtensions self)
{
  self.Dummy = 0;
}

DdyExtensions _DdyExtensionsConstructor()
{
  DdyExtensions self;
  _DdyExtensionsPreConstructor(self);
  return self;
}

float _ShaderDdy(float _value)
{
  float _result = 0.0f;
  _result = dFdy(_value);
  return _result;
}

vec2 _ShaderDdy(vec2 _value)
{
  vec2 _result = vec2(0.0, 0.0);
  _result = dFdy(_value);
  return _result;
}

vec3 _ShaderDdy(vec3 _value)
{
  vec3 _result = vec3(0.0, 0.0, 0.0);
  _result = dFdy(_value);
  return _result;
}

vec4 _ShaderDdy(vec4 _value)
{
  vec4 _result = vec4(0.0, 0.0, 0.0, 0.0);
  _result = dFdy(_value);
  return _result;
}

//----- ShaderLibrary Functions -----
void _ShaderLibraryPreConstructor(inout ShaderLibrary self)
{
  self.Uv = vec2(0.0, 0.0);
}

ShaderLibrary _ShaderLibraryConstructor()
{
  ShaderLibrary self;
  _ShaderLibraryPreConstructor(self);
  return self;
}

vec4 _ShaderLibrarySamplerFunctionCall(in sampler2D _sampler, vec2 _uv)
{
  return _sampler2DSample(_uv, _sampler);
}

void _ShaderLibraryDiscard(inout ShaderLibrary self)
{
  _ShaderDiscard();
}

void _ShaderLibraryMain(inout ShaderLibrary self)
{
  vec2 _ddx = _ShaderDdx(self.Uv);
  vec2 _ddy = _ShaderDdy(self.Uv);
  
  //var result = ShaderLibrary.SamplerFunctionCall(this.Sampler, this.Uv);
  vec4 _result = _sampler2DSample(self.Uv, _ShaderLibrarySampler);
  // only 1.3
  vec4 _resultDdx = _sampler2DSample(self.Uv, _ddx, _ddy, _ShaderLibrarySampler);
}

