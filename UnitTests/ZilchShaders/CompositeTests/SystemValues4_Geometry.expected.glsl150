#version 150
//----- Shader Inputs/Outputs -----
layout(triangles) in;
uniform float Time;
flat in int[3] gsInPrimitiveId;
flat in int[3] gsInVertexId;
layout(points, max_vertices = 3) out;
out vec4 psInApiPerspectivePosition;
flat out int psInVertexId;

//----- Struct Definitions -----
struct SVGeometryVertex2
{
  vec4 ApiPerspectivePosition;
  int PrimitiveId;
  int VertexId;
};

struct SystemValues4_Geometry_Output
{
  vec4 ApiPerspectivePosition;
  int PrimitiveId;
  int VertexId;
};

struct SystemValues4_Geometry_Input
{
  vec4 ApiPerspectivePosition;
  int PrimitiveId;
  int VertexId;
};

struct template_PointOutput_SystemValues4_Geometry_Output_
{
  int Dummy;
};

struct template_PointOutput_SVGeometryVertex2_
{
  int Dummy;
};

struct SVGeometry2
{
  int PrimitiveId;
};

struct SystemValues4_Geometry
{
  float Time;
  int PrimitiveId;
};

//----- Forward Declarations -----
void _SVGeometryVertex2PreConstructor(inout SVGeometryVertex2 self);
SVGeometryVertex2 _SVGeometryVertex2Constructor();

void _SystemValues4_Geometry_OutputPreConstructor(inout SystemValues4_Geometry_Output self);
SystemValues4_Geometry_Output _SystemValues4_Geometry_OutputConstructor();

void _SystemValues4_Geometry_InputPreConstructor(inout SystemValues4_Geometry_Input self);
SystemValues4_Geometry_Input _SystemValues4_Geometry_InputConstructor();

template_PointOutput_SystemValues4_Geometry_Output_ _template_PointOutput_SystemValues4_Geometry_Output_Constructor();
void _template_PointOutput_SystemValues4_Geometry_Output_Append(SystemValues4_Geometry_Output systemvalues4_geometry_output, int index, template_PointOutput_SystemValues4_Geometry_Output_ self);

template_PointOutput_SVGeometryVertex2_ _template_PointOutput_SVGeometryVertex2_Constructor();
void _template_PointOutput_SVGeometryVertex2_Append(SVGeometryVertex2 svgeometryvertex2, int index, template_PointOutput_SVGeometryVertex2_ self);

void _SVGeometry2PreConstructor(inout SVGeometry2 self);
SVGeometry2 _SVGeometry2Constructor();
void _SVGeometry2Main(SVGeometryVertex2[3] _input, template_PointOutput_SVGeometryVertex2_ _output, inout SVGeometry2 self);

void _SystemValues4_GeometryPreConstructor(inout SystemValues4_Geometry self);
SystemValues4_Geometry _SystemValues4_GeometryConstructor();
void EmitVertexHelper(inout SVGeometryVertex2 _fragmentOutput, inout SystemValues4_Geometry_Output _compositeOutput);
void _SystemValues4_GeometryMain(SystemValues4_Geometry_Input[3] _input, template_PointOutput_SystemValues4_Geometry_Output_ _output, inout SystemValues4_Geometry self);
void CopyInputs(inout SystemValues4_Geometry_Input[3] inputs, inout SystemValues4_Geometry self);
void CloneVertex(int i, inout SystemValues4_Geometry_Output finalOutput);
void WriteVertex(SystemValues4_Geometry_Output finalOutput);
void WriteToVertex(int index, SystemValues4_Geometry_Output fragmentOutput);
void EmitVertexHelper(inout SystemValues4_Geometry_Output _fragmentOutput, inout SystemValues4_Geometry_Output _compositeOutput);
void CloneVertex(int i, inout SVGeometryVertex2 finalOutput);
void WriteVertex(SVGeometryVertex2 finalOutput);
void WriteToVertex(int index, SVGeometryVertex2 fragmentOutput);
void main(void);

//----- Global Variable Declarations -----
//----- SVGeometryVertex2 Functions -----
void _SVGeometryVertex2PreConstructor(inout SVGeometryVertex2 self)
{
  self.ApiPerspectivePosition = vec4(0.0, 0.0, 0.0, 0.0);
  self.PrimitiveId = int(0);
  self.VertexId = int(0);
}

SVGeometryVertex2 _SVGeometryVertex2Constructor()
{
  SVGeometryVertex2 self;
  _SVGeometryVertex2PreConstructor(self);
  return self;
}

//----- SystemValues4_Geometry_Output Functions -----
void _SystemValues4_Geometry_OutputPreConstructor(inout SystemValues4_Geometry_Output self)
{
  self.ApiPerspectivePosition = vec4(0.0, 0.0, 0.0, 0.0);
  self.PrimitiveId = int(0);
  self.VertexId = int(0);
}

SystemValues4_Geometry_Output _SystemValues4_Geometry_OutputConstructor()
{
  SystemValues4_Geometry_Output self;
  _SystemValues4_Geometry_OutputPreConstructor(self);
  return self;
}

//----- SystemValues4_Geometry_Input Functions -----
void _SystemValues4_Geometry_InputPreConstructor(inout SystemValues4_Geometry_Input self)
{
  self.ApiPerspectivePosition = vec4(0.0, 0.0, 0.0, 0.0);
  self.PrimitiveId = int(0);
  self.VertexId = int(0);
}

SystemValues4_Geometry_Input _SystemValues4_Geometry_InputConstructor()
{
  SystemValues4_Geometry_Input self;
  _SystemValues4_Geometry_InputPreConstructor(self);
  return self;
}

//----- PointOutput[SystemValues4_Geometry_Output] Functions -----
template_PointOutput_SystemValues4_Geometry_Output_ _template_PointOutput_SystemValues4_Geometry_Output_Constructor()
{
  template_PointOutput_SystemValues4_Geometry_Output_ self;
  return self;
}

void _template_PointOutput_SystemValues4_Geometry_Output_Append(SystemValues4_Geometry_Output systemvalues4_geometry_output, int index, template_PointOutput_SystemValues4_Geometry_Output_ self)
{
  WriteToVertex(index, systemvalues4_geometry_output);
  EmitVertex();
}

//----- PointOutput[SVGeometryVertex2] Functions -----
template_PointOutput_SVGeometryVertex2_ _template_PointOutput_SVGeometryVertex2_Constructor()
{
  template_PointOutput_SVGeometryVertex2_ self;
  return self;
}

void _template_PointOutput_SVGeometryVertex2_Append(SVGeometryVertex2 svgeometryvertex2, int index, template_PointOutput_SVGeometryVertex2_ self)
{
  WriteToVertex(index, svgeometryvertex2);
  EmitVertex();
}

//----- SVGeometry2 Functions -----
void _SVGeometry2PreConstructor(inout SVGeometry2 self)
{
  self.PrimitiveId = int(0);
}

SVGeometry2 _SVGeometry2Constructor()
{
  SVGeometry2 self;
  _SVGeometry2PreConstructor(self);
  return self;
}

void _SVGeometry2Main(SVGeometryVertex2[3] _input, template_PointOutput_SVGeometryVertex2_ _output, inout SVGeometry2 self)
{
  ++self.PrimitiveId;
  _template_PointOutput_SVGeometryVertex2_Append(_input[0], 0, _output);
}

//----- SystemValues4_Geometry Functions -----
void _SystemValues4_GeometryPreConstructor(inout SystemValues4_Geometry self)
{
  self.Time = float(0.0);
  self.PrimitiveId = int(0);
}

SystemValues4_Geometry _SystemValues4_GeometryConstructor()
{
  SystemValues4_Geometry self;
  _SystemValues4_GeometryPreConstructor(self);
  return self;
}

void EmitVertexHelper(inout SVGeometryVertex2 _fragmentOutput, inout SystemValues4_Geometry_Output _compositeOutput)
{
  _compositeOutput.ApiPerspectivePosition = _fragmentOutput.ApiPerspectivePosition;
  _compositeOutput.PrimitiveId = _fragmentOutput.PrimitiveId;
  _compositeOutput.VertexId = _fragmentOutput.VertexId;
}

void _SystemValues4_GeometryMain(SystemValues4_Geometry_Input[3] _input, template_PointOutput_SystemValues4_Geometry_Output_ _output, inout SystemValues4_Geometry self)
{
  // Copy composite inputs into fragment inputs
  SVGeometryVertex2[3] _fragmentInput = SVGeometryVertex2[3](_SVGeometryVertex2Constructor(), _SVGeometryVertex2Constructor(), _SVGeometryVertex2Constructor());
  for(int _i = 0; _i < _input.length(); ++_i)
  {
    _fragmentInput[_i].ApiPerspectivePosition = _input[_i].ApiPerspectivePosition;
    _fragmentInput[_i].PrimitiveId = _input[_i].PrimitiveId;
    _fragmentInput[_i].VertexId = _input[_i].VertexId;
  }
  // Create the fragment output type
  template_PointOutput_SVGeometryVertex2_ _fragmentOutput = _template_PointOutput_SVGeometryVertex2_Constructor();
  
  SVGeometry2 _svgeometry2 = _SVGeometry2Constructor();
  _svgeometry2.PrimitiveId = self.PrimitiveId;
  _SVGeometry2Main(_fragmentInput, _fragmentOutput, _svgeometry2);
}

//----- SystemValues4_Geometry Final Shader Functions -----
void CopyInputs(inout SystemValues4_Geometry_Input[3] inputs, inout SystemValues4_Geometry self)
{
  self.Time = Time;
  self.PrimitiveId = gl_PrimitiveIDIn;
  for(int i = 0; i < 3; ++i)
  {
    inputs[i].ApiPerspectivePosition = gl_in[i].gl_Position;
    inputs[i].PrimitiveId = gsInPrimitiveId[i];
    inputs[i].VertexId = gsInVertexId[i];
  }
}

void CloneVertex(int i, inout SystemValues4_Geometry_Output finalOutput)
{
  // Copy input to output
  finalOutput.ApiPerspectivePosition = gl_in[i].gl_Position;
  finalOutput.PrimitiveId = gsInPrimitiveId[i];
  finalOutput.VertexId = gsInVertexId[i];
}

void WriteVertex(SystemValues4_Geometry_Output finalOutput)
{
  gl_Position = finalOutput.ApiPerspectivePosition;
  psInApiPerspectivePosition = finalOutput.ApiPerspectivePosition;
  gl_PrimitiveID = finalOutput.PrimitiveId;
  psInVertexId = finalOutput.VertexId;
}

void WriteToVertex(int index, SystemValues4_Geometry_Output fragmentOutput)
{
  SystemValues4_Geometry_Output finalOutput;
  CloneVertex(index, finalOutput);
  EmitVertexHelper(fragmentOutput, finalOutput);
  WriteVertex(finalOutput);
}

void EmitVertexHelper(inout SystemValues4_Geometry_Output _fragmentOutput, inout SystemValues4_Geometry_Output _compositeOutput)
{
}

void CloneVertex(int i, inout SVGeometryVertex2 finalOutput)
{
  // Copy input to output
}

void WriteVertex(SVGeometryVertex2 finalOutput)
{
}

void WriteToVertex(int index, SVGeometryVertex2 fragmentOutput)
{
  SystemValues4_Geometry_Output finalOutput;
  CloneVertex(index, finalOutput);
  EmitVertexHelper(fragmentOutput, finalOutput);
  WriteVertex(finalOutput);
}

//----- Main -----
void main(void)
{
  // Construct input/output types
  SystemValues4_Geometry_Input[3] inputs; 
  template_PointOutput_SystemValues4_Geometry_Output_ template_pointoutput_systemvalues4_geometry_output_ = _template_PointOutput_SystemValues4_Geometry_Output_Constructor(); 
  // Construct the shader type
  SystemValues4_Geometry systemvalues4_geometry = _SystemValues4_GeometryConstructor(); 

  CopyInputs(inputs, systemvalues4_geometry);
  _SystemValues4_GeometryMain(inputs, template_pointoutput_systemvalues4_geometry_output_, systemvalues4_geometry);
}

